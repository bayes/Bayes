/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package bayes;


import applications.bayesAnalyze.BayesAnalyze;
import applications.bayesAnalyzeImagePixels.AnalyzeImagePixels;
import applications.bayesBF.BayesBF;
import applications.bayesBinnedHistogram.BayesBinnedHistogram;
import applications.bayesDensityEstimation.BayesDensityEstimation;
import applications.bayesDiffTensor.BayesDiffTensor;
import applications.bayesEnterAscii.BayesEnterAscii;
import applications.bayesEnterAsciiModel.BayesEnterAsciiModel;
import applications.bayesEnterAsciiPreloaded.BayesEnterAsciiPreloaded;
import applications.bayesErrInVarsGiven.BayesErrInVarsGiven;
import applications.bayesExponential.BayesExponential;
import applications.bayesFindResonances.BayesFindResonances;
import applications.bayesImageModelSelection.ImageModelSelection;
import applications.bayesMetabolite.BayesMetabolite;
import applications.bayesMtZ.BayesMtZ;
import applications.bayesMtZKinetics.BayesMtZKinetics;
import applications.bayesPhase.BayesPhase;
import applications.bayesPhase2.BayesPhaseNonlinear;
import applications.bayesPolynomial.BayesPolynomial;
import applications.bayesTestModel.BayesTestModel;
import applications.bayesWater.BayesWater;
import applications.model.Model;
import interfacebeans.AllViewers;
import interfacebeans.JCleanJobRequest;
import interfacebeans.JServer;
import interfacebeans.Viewer;
import java.awt.Component;
import java.awt.Cursor;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.lang.reflect.Constructor;
import java.net.URI;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import javax.swing.*;
import load.DownloadManual;
import load.DownloadSampleFiles;
import load.LoadAndViewData;
import load.LoadExperimentGui;
import load.gui.JSeekAndLoadWorkDirJDialog;
import run.JRun;
import utilities.BrowserLaunch;
import utilities.DisplayText;
import utilities.MenuScroller;
import utilities.ModelDescriptor;
import utilities.Screenshot;
import utilities.Server;
import utilities.SystemProperties;

/**
 *
 * @author apple
 */
public final class Desktop extends javax.swing.JFrame implements
        java.beans.PropertyChangeListener {

    private final static HashMap<JRadioButtonMenuItem, ModelDescriptor> modelDescrp = new HashMap<JRadioButtonMenuItem, ModelDescriptor>();
    private javax.swing.JRadioButtonMenuItem selectedPackageMenutItem;
    public static boolean debug = false;

    /**
     * Creates new form Desktop
     */
    public Desktop() {
        preGuiElemeInit();
        initComponents();
        postGuiElemeInit();
    }
    
    
    public void preGuiElemeInit(){
    
        java.net.URL url = getClass().getResource("/bayes/resources/wustl_250X115.jpg");
        java.awt.Toolkit kit = java.awt.Toolkit.getDefaultToolkit();
        java.awt.Image img = kit.createImage(url);
        this.setIconImage(img);
    }
      public void postGuiElemeInit(){
    
        initModelDesciptons();
        setAcitveLoadButtons(false);
        try {
            BayesIntro bi = new BayesIntro();
            mainPanel.add(bi, java.awt.BorderLayout.CENTER);
        } catch (Throwable e) {
            e.printStackTrace();
        }

        this.setTitle(BayesManager.APPLICATION_TITLE);
        DisplayText.frame = this;
        
        BayesManager.pcs.addPropertyChangeListener(this);

        ApplicationPreferences.refreshAllPreferences();
    }
    
     @Override
    public void propertyChange(java.beans.PropertyChangeEvent evt) {
        if (evt.getPropertyName().equals(bayes.BayesManager.JRUN_JOB_START)) {
            setActive(false);
        } else if (evt.getPropertyName().equals(bayes.BayesManager.JRUN_JOB_END)) {
            setActive(true);
        } else if (evt.getPropertyName().equals(bayes.BayesManager.JRUN_JOB_CANCELED)) {
            setActive(true);
        }




    }


    // *********** stop setup actions
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        packageButtonGroup = null;
        dummyMenuItem = new javax.swing.JRadioButtonMenuItem();
        contactTimeMenuItem = new javax.swing.JRadioButtonMenuItem();
        menuBarMessage = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();
        bottomPane = new javax.swing.JPanel();
        jSeparator = new javax.swing.JPopupMenu.Separator();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        loadAsciiMenu = new javax.swing.JMenu();
        loadAsciiFromFileMenuItem = new javax.swing.JMenuItem();
        loadAsciiFromBayesAnalyzeMenuItem2 = new javax.swing.JMenuItem();
        loadFidMenu = new javax.swing.JMenu();
        loadFidDataMenuItem = new javax.swing.JMenuItem();
        loadSiemensRdaDataMenuItem = new javax.swing.JMenuItem();
        loadSiemensRawDataMenuItem = new javax.swing.JMenuItem();
        text2FidMenuItem = new javax.swing.JMenuItem();
        BrukerBinaryMenuItem = new javax.swing.JMenuItem();
        loadImageMenu = new javax.swing.JMenu();
        varianBinaryMenuItem = new javax.swing.JMenuItem();
        text2FidImageMenuItem = new javax.swing.JMenuItem();
        fdf2imageMenuItem = new javax.swing.JMenuItem();
        imgBinaryMenuItem = new javax.swing.JMenuItem();
        rawBinaryMenuItem = new javax.swing.JMenuItem();
        singled2seqMenuItem = new javax.swing.JMenuItem();
        text2imageMenuItem = new javax.swing.JMenuItem();
        textMultiColumn2imageMenuItem = new javax.swing.JMenuItem();
        ima2imageMenuItem = new javax.swing.JMenuItem();
        DicomMenuItem = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JSeparator();
        loadAbscissaMenu = new javax.swing.JMenu();
        loadAbscissaMenuItem = new javax.swing.JMenuItem();
        loadAbscissaProcparMenuItem = new javax.swing.JMenuItem();
        downloadTestDataMenuItem = new javax.swing.JMenuItem();
        downloadManualMenuItem = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JSeparator();
        jsaveExperimentMenuItem = new javax.swing.JMenuItem();
        loadExperimentMenuItem = new javax.swing.JMenuItem();
        bacthLoadWorkDirMenuItem = new javax.swing.JMenuItem();
        jSeparator9 = new javax.swing.JSeparator();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        packageMenu = new javax.swing.JMenu();
        exponentialMenuItem = new javax.swing.JRadioButtonMenuItem();
        inversionRecoverylMenuItem = new javax.swing.JRadioButtonMenuItem();
        diffusonTensorMenuItem = new javax.swing.JRadioButtonMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        enterAsciiMenuItem = new javax.swing.JRadioButtonMenuItem();
        enterAsciiModelMenuItem = new javax.swing.JRadioButtonMenuItem();
        enterAsciiModelTestRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        mzTMenuItem = new javax.swing.JRadioButtonMenuItem();
        mzTKineticsMenuItem = new javax.swing.JRadioButtonMenuItem();
        mtZBigMenuItem = new javax.swing.JRadioButtonMenuItem();
        jSeparator5 = new javax.swing.JSeparator();
        bayesAnalyzeMenuItem = new javax.swing.JRadioButtonMenuItem();
        bayesWaterMenuItem = new javax.swing.JRadioButtonMenuItem();
        findResMenuItem = new javax.swing.JRadioButtonMenuItem();
        bayesMetaboliteMenuItem = new javax.swing.JRadioButtonMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        behrensFisherMenuItem = new javax.swing.JRadioButtonMenuItem();
        ErrInVarsGivenButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        polynomialMenuItem = new javax.swing.JRadioButtonMenuItem();
        redoDpCMenuItem = new javax.swing.JRadioButtonMenuItem();
        jSeparator10 = new javax.swing.JPopupMenu.Separator();
        histogramMenuItem = new javax.swing.JRadioButtonMenuItem();
        binnedHistogramMenuItem = new javax.swing.JRadioButtonMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        bayesPhaseMenuItem = new javax.swing.JRadioButtonMenuItem();
        bayesPhaseNonLinearMenuItem = new javax.swing.JRadioButtonMenuItem();
        analyzeImagePixelMenuItem = new javax.swing.JRadioButtonMenuItem();
        imageModelSelectionMenuItem = new javax.swing.JRadioButtonMenuItem();
        workDirMenu = new javax.swing.JMenu();
        optionsMenu = new javax.swing.JMenu();
        mcmcMenuItem = new javax.swing.JMenuItem();
        setServersMenuItem = new javax.swing.JMenuItem();
        windowSizeMEnu = new javax.swing.JMenuItem();
        jSeparator8 = new javax.swing.JSeparator();
        preferencesMenuItem = new javax.swing.JMenuItem();
        utilitiesMenu = new javax.swing.JMenu();
        memoryMonitorMenuItem = new javax.swing.JMenuItem();
        systemInfoMenuItem = new javax.swing.JMenuItem();
        checkSoftwareUpdateMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        manualMenuItem = new javax.swing.JMenuItem();
        homepageMenuItem = new javax.swing.JMenuItem();
        contactUsMenu = new javax.swing.JMenuItem();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        packageButtonGroup = makePackageButtonGroup();

        dummyMenuItem.setSelected(true);
        dummyMenuItem.setText("RadioButton");

        contactTimeMenuItem.setText("Contact Time"); // NOI18N
        contactTimeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contactTimeMenuItempackageMenuActionPerformed(evt);
            }
        });

        menuBarMessage.setFont(new java.awt.Font("Helvetica", 1, 14));
        menuBarMessage.setForeground(new java.awt.Color(0, 0, 153));
        menuBar.add( Box.createHorizontalStrut(70));
        menuBar.add(jSeparator);

        menuBar.add( Box.createHorizontalStrut(70));

        menuBar.add(menuBarMessage);
        jSeparator.setVisible(false);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 708, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 253, Short.MAX_VALUE)
        );

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        org.jdesktop.layout.GroupLayout bottomPaneLayout = new org.jdesktop.layout.GroupLayout(bottomPane);
        bottomPane.setLayout(bottomPaneLayout);
        bottomPaneLayout.setHorizontalGroup(
            bottomPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 708, Short.MAX_VALUE)
        );
        bottomPaneLayout.setVerticalGroup(
            bottomPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 22, Short.MAX_VALUE)
        );

        getContentPane().add(bottomPane, java.awt.BorderLayout.SOUTH);

        jSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator.setMaximumSize(new java.awt.Dimension(30, 32767));
        jSeparator.setPreferredSize(new java.awt.Dimension(20, 0));
        getContentPane().add(jSeparator, java.awt.BorderLayout.PAGE_START);

        menuBar.setPreferredSize(new java.awt.Dimension(385, 25));

        fileMenu.setText("File");
        fileMenu.setFont(new java.awt.Font("Helvetica", 1, 14));

        loadAsciiMenu.setText("Load Ascii");

        loadAsciiFromFileMenuItem.setText("File");
        loadAsciiFromFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadAsciiFromFileMenuItemActionPerformed(evt);
            }
        });
        loadAsciiMenu.add(loadAsciiFromFileMenuItem);

        loadAsciiFromBayesAnalyzeMenuItem2.setText("Bayes Analyze File");
        loadAsciiFromBayesAnalyzeMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadAsciiFromBayesAnalyzeMenuItem2ActionPerformed(evt);
            }
        });
        loadAsciiMenu.add(loadAsciiFromBayesAnalyzeMenuItem2);

        fileMenu.add(loadAsciiMenu);

        loadFidMenu.setText("Load Spectroscopy Fid");

        loadFidDataMenuItem.setText("Varian FID");
        loadFidDataMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFidDataMenuItemActionPerformed(evt);
            }
        });
        loadFidMenu.add(loadFidDataMenuItem);

        loadSiemensRdaDataMenuItem.setText("Siemens RDA");
        loadSiemensRdaDataMenuItem.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\nLoad  Siemens RDA file. <br>\n</font></p><html>\n"); // NOI18N
        loadSiemensRdaDataMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadSiemensRdaDataMenuItemActionPerformed(evt);
            }
        });
        loadFidMenu.add(loadSiemensRdaDataMenuItem);

        loadSiemensRawDataMenuItem.setText("Siemens RAW");
        loadSiemensRawDataMenuItem.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\nLoad  Siemens RAW file. <br>\n</font></p><html>\n"); // NOI18N
        loadSiemensRawDataMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadSiemensRawDataMenuItemActionPerformed(evt);
            }
        });
        loadFidMenu.add(loadSiemensRawDataMenuItem);

        text2FidMenuItem.setText("Text File");
        text2FidMenuItem.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\nLoad  ascii (text) file. <br>\n</font></p><html>\n"); // NOI18N
        text2FidMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                text2FidMenuItemActionPerformed(evt);
            }
        });
        loadFidMenu.add(text2FidMenuItem);

        BrukerBinaryMenuItem.setText("Bruker Binary");
        BrukerBinaryMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrukerBinaryMenuItemActionPerformed(evt);
            }
        });
        //BrukerBinaryMenuItem.setVisible(false);
        loadFidMenu.add(BrukerBinaryMenuItem);

        fileMenu.add(loadFidMenu);

        loadImageMenu.setText("Load Image "); // NOI18N

        varianBinaryMenuItem.setText("Varian k-space FID");
        varianBinaryMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                varianBinaryMenuItemActionPerformed(evt);
            }
        });
        loadImageMenu.add(varianBinaryMenuItem);

        text2FidImageMenuItem.setText("Text k-space FID");
        text2FidImageMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                text2FidImageMenuItemActionPerformed(evt);
            }
        });
        loadImageMenu.add(text2FidImageMenuItem);

        fdf2imageMenuItem.setText("FDF");
        fdf2imageMenuItem.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\nLoad single or multiple <br> \nVarian FDF image(s).\n</font></p><html>\n"); // NOI18N
        fdf2imageMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fdf2imageMenuItemActionPerformed(evt);
            }
        });
        loadImageMenu.add(fdf2imageMenuItem);

        imgBinaryMenuItem.setText("Binary 4dfp (.img)");
        imgBinaryMenuItem.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\nLoad 4dfp binary  image. <br>\n</font></p><html>\n"); // NOI18N
        imgBinaryMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imgBinaryMenuItemActionPerformed(evt);
            }
        });
        loadImageMenu.add(imgBinaryMenuItem);

        rawBinaryMenuItem.setText("General Binary");
        rawBinaryMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rawBinaryMenuItemActionPerformed(evt);
            }
        });
        loadImageMenu.add(rawBinaryMenuItem);

        singled2seqMenuItem.setText("Bruker single 2dseq ");
        singled2seqMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singled2seqMenuItemActionPerformed(evt);
            }
        });
        //singled2seqMenuItem.setVisible(false);
        loadImageMenu.add(singled2seqMenuItem);

        text2imageMenuItem.setText("Single-Column Text File"); // NOI18N
        text2imageMenuItem.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\nLoad image from a single-column<br> \nascii (text) file.\n</font></p><html>\n"); // NOI18N
        text2imageMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                text2imageMenuItemActionPerformed(evt);
            }
        });
        loadImageMenu.add(text2imageMenuItem);

        textMultiColumn2imageMenuItem.setText("Multi-Column Text File");
        textMultiColumn2imageMenuItem.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\nLoad image from a multi-column<br> \nascii (text) file.\n</font></p><html>\n"); // NOI18N
        textMultiColumn2imageMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textMultiColumn2imageMenuItemActionPerformed(evt);
            }
        });
        loadImageMenu.add(textMultiColumn2imageMenuItem);

        ima2imageMenuItem.setText("Siemens IMA");
        ima2imageMenuItem.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\nLoad single or multiple <br> \nSiemens IMA image(s).\n</font></p><html>\n"); // NOI18N
        ima2imageMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ima2imageMenuItemActionPerformed(evt);
            }
        });
        loadImageMenu.add(ima2imageMenuItem);

        DicomMenuItem.setText("DICOM");
        DicomMenuItem.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\nLoad DICOM images. <br> \n</font></p><html>\n"); // NOI18N
        DicomMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DicomMenuItemActionPerformed(evt);
            }
        });
        loadImageMenu.add(DicomMenuItem);

        fileMenu.add(loadImageMenu);
        fileMenu.add(jSeparator7);

        loadAbscissaMenu.setText("Load Abscissa");

        loadAbscissaMenuItem.setText("From File");
        loadAbscissaMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadAbscissaMenuItemActionPerformed(evt);
            }
        });
        loadAbscissaMenu.add(loadAbscissaMenuItem);

        loadAbscissaProcparMenuItem.setText("From Procpar");
        loadAbscissaProcparMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadAbscissaProcparMenuItemActionPerformed(evt);
            }
        });
        loadAbscissaMenu.add(loadAbscissaProcparMenuItem);

        fileMenu.add(loadAbscissaMenu);

        downloadTestDataMenuItem.setText("Download Test Data");
        downloadTestDataMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadTestDataMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(downloadTestDataMenuItem);

        downloadManualMenuItem.setText("Download Manual (pdf)");
        downloadManualMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadManualMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(downloadManualMenuItem);
        fileMenu.add(jSeparator6);

        jsaveExperimentMenuItem.setText("Save Working Directory");
        jsaveExperimentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jsaveExperimentMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(jsaveExperimentMenuItem);

        loadExperimentMenuItem.setText("Import Working Directory");
        loadExperimentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadExperimentMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadExperimentMenuItem);

        bacthLoadWorkDirMenuItem.setText("Import Working Directories in Batch");
        bacthLoadWorkDirMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bacthLoadWorkDirMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(bacthLoadWorkDirMenuItem);
        fileMenu.add(jSeparator9);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(bayes.BayesApp.class).getContext().getActionMap(Desktop.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        packageMenu.setText("Package");
        packageMenu.setFont(new java.awt.Font("Helvetica", 1, 14));
        packageMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                packageMenuActionPerformed(evt);
            }
        });

        exponentialMenuItem.setText("Exponential"); // NOI18N
        exponentialMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exponentialMenuItempackageMenuActionPerformed(evt);
            }
        });
        packageMenu.add(exponentialMenuItem);

        inversionRecoverylMenuItem.setText("Inversion Recovery"); // NOI18N
        inversionRecoverylMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inversionRecoverylMenuItempackageMenuActionPerformed(evt);
            }
        });
        packageMenu.add(inversionRecoverylMenuItem);

        diffusonTensorMenuItem.setText("Diffusion Tensor"); // NOI18N
        diffusonTensorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diffusonTensorMenuItempackageMenuActionPerformed(evt);
            }
        });
        packageMenu.add(diffusonTensorMenuItem);
        packageMenu.add(jSeparator1);

        enterAsciiMenuItem.setText("Enter Ascii Model"); // NOI18N
        enterAsciiMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterAsciiMenuItempackageMenuActionPerformed(evt);
            }
        });
        packageMenu.add(enterAsciiMenuItem);

        enterAsciiModelMenuItem.setText("Enter Ascii Model Selection");
        enterAsciiModelMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterAsciiModelMenuItempackageMenuActionPerformed(evt);
            }
        });
        packageMenu.add(enterAsciiModelMenuItem);

        enterAsciiModelTestRadioButtonMenuItem.setText("Test Ascii Model");
        enterAsciiModelTestRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterAsciiModelTestRadioButtonMenuItempackageMenuActionPerformed(evt);
            }
        });
        packageMenu.add(enterAsciiModelTestRadioButtonMenuItem);
        packageMenu.add(jSeparator2);

        mzTMenuItem.setText("Magnetization Transfer"); // NOI18N
        mzTMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mzTMenuItempackageMenuActionPerformed(evt);
            }
        });
        packageMenu.add(mzTMenuItem);

        mzTKineticsMenuItem.setText("Magnetization Transfer Kinetics"); // NOI18N
        mzTKineticsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mzTKineticsMenuItempackageMenuActionPerformed(evt);
            }
        });
        packageMenu.add(mzTKineticsMenuItem);

        mtZBigMenuItem.setText("Magnetization Transfer Big"); // NOI18N
        mtZBigMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mtZBigMenuItempackageMenuActionPerformed(evt);
            }
        });
        packageMenu.add(mtZBigMenuItem);
        packageMenu.add(jSeparator5);

        bayesAnalyzeMenuItem.setText("Bayes Analyze");
        bayesAnalyzeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bayesAnalyzeMenuItempackageMenuActionPerformed(evt);
            }
        });
        packageMenu.add(bayesAnalyzeMenuItem);

        bayesWaterMenuItem.setText("Bayes Big Peak/Little Peak"); // NOI18N
        bayesWaterMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bayesWaterMenuItempackageMenuActionPerformed(evt);
            }
        });
        packageMenu.add(bayesWaterMenuItem);

        findResMenuItem.setText("Bayes Find Resonance");
        findResMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findResMenuItempackageMenuActionPerformed(evt);
            }
        });
        packageMenu.add(findResMenuItem);

        bayesMetaboliteMenuItem.setText("Bayes Metabolite");
        bayesMetaboliteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bayesMetaboliteMenuItempackageMenuActionPerformed(evt);
            }
        });
        packageMenu.add(bayesMetaboliteMenuItem);
        packageMenu.add(jSeparator3);

        behrensFisherMenuItem.setText("Behrens-Fisher"); // NOI18N
        behrensFisherMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                behrensFisherMenuItempackageMenuActionPerformed(evt);
            }
        });
        packageMenu.add(behrensFisherMenuItem);

        ErrInVarsGivenButtonMenuItem.setText("Errors In Variables Given"); // NOI18N
        ErrInVarsGivenButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ErrInVarsGivenButtonMenuItempackageMenuActionPerformed(evt);
            }
        });
        packageMenu.add(ErrInVarsGivenButtonMenuItem);

        polynomialMenuItem.setText("Polynomial Models "); // NOI18N
        polynomialMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                polynomialMenuItempackageMenuActionPerformed(evt);
            }
        });
        packageMenu.add(polynomialMenuItem);

        redoDpCMenuItem.setText("Redor Dipolar Coupling"); // NOI18N
        redoDpCMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoDpCMenuItempackageMenuActionPerformed(evt);
            }
        });
        redoDpCMenuItem.setVisible(false);
        packageMenu.add(redoDpCMenuItem);
        packageMenu.add(jSeparator10);

        histogramMenuItem.setText("MaxEnt Histograms");
        histogramMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                histogramMenuItempackageMenuActionPerformed(evt);
            }
        });
        packageMenu.add(histogramMenuItem);

        binnedHistogramMenuItem.setText("Binned Histograms");
        binnedHistogramMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binnedHistogramMenuItempackageMenuActionPerformed(evt);
            }
        });
        packageMenu.add(binnedHistogramMenuItem);
        packageMenu.add(jSeparator4);

        bayesPhaseMenuItem.setText("Bayes Phase");
        bayesPhaseMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bayesPhaseMenuItempackageMenuActionPerformed(evt);
            }
        });
        packageMenu.add(bayesPhaseMenuItem);
        //bayesPhaseMenuItemTest.setVisible(false);

        bayesPhaseNonLinearMenuItem.setText("Bayes Phase Nonlinear");
        bayesPhaseNonLinearMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bayesPhaseNonLinearMenuItempackageMenuActionPerformed(evt);
            }
        });
        packageMenu.add(bayesPhaseNonLinearMenuItem);

        analyzeImagePixelMenuItem.setText("Analyze Image Pixel");
        analyzeImagePixelMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeImagePixelMenuItempackageMenuActionPerformed(evt);
            }
        });
        packageMenu.add(analyzeImagePixelMenuItem);

        imageModelSelectionMenuItem.setText("Image Model Selection");
        imageModelSelectionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageModelSelectionMenuItempackageMenuActionPerformed(evt);
            }
        });
        packageMenu.add(imageModelSelectionMenuItem);

        menuBar.add(packageMenu);

        workDirMenu.setText("WorkDir"); // NOI18N
        workDirMenu.setFont(new java.awt.Font("Helvetica", 1, 14));
        modifyExperimentMenu(workDirMenu);

        new MenuScroller(workDirMenu);

        menuBar.add(workDirMenu);

        optionsMenu.setText("Settings");
        optionsMenu.setFont(new java.awt.Font("Helvetica", 1, 14));

        mcmcMenuItem.setText("MCMC Parameters");
        mcmcMenuItem.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nAssign parameter values for Markov chain <br>\nMonte Carlo (MCMC) simulations \n\n</font></p><html>\n"); // NOI18N
        mcmcMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mcmcMenuItemActionPerformed(evt);
            }
        });
        optionsMenu.add(mcmcMenuItem);

        setServersMenuItem.setText("Server Setup");
        setServersMenuItem.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nManage and set up servers.\n\n\n</font></p><html>\n"); // NOI18N
        setServersMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setServersMenuItemActionPerformed(evt);
            }
        });
        optionsMenu.add(setServersMenuItem);

        windowSizeMEnu.setText("Set Window Size");
        windowSizeMEnu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                windowSizeMEnuActionPerformed(evt);
            }
        });
        optionsMenu.add(windowSizeMEnu);
        optionsMenu.add(jSeparator8);

        preferencesMenuItem.setText("Preferences");
        preferencesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preferencesMenuItemActionPerformed(evt);
            }
        });
        optionsMenu.add(preferencesMenuItem);

        menuBar.add(optionsMenu);

        utilitiesMenu.setText("Utilities");
        utilitiesMenu.setFont(new java.awt.Font("Helvetica", 1, 14));

        memoryMonitorMenuItem.setText("Memory Monitor");
        memoryMonitorMenuItem.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nMonitor memory usage consumed by this application. \n\n</font></p><html>\n"); // NOI18N
        memoryMonitorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memoryMonitorMenuItemActionPerformed(evt);
            }
        });
        utilitiesMenu.add(memoryMonitorMenuItem);

        systemInfoMenuItem.setText("System Info");
        systemInfoMenuItem.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nSystem information.\n\n</font></p><html>\n"); // NOI18N
        systemInfoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                systemInfoMenuItemActionPerformed(evt);
            }
        });
        utilitiesMenu.add(systemInfoMenuItem);

        checkSoftwareUpdateMenuItem.setText("Check for Update");
        checkSoftwareUpdateMenuItem.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nCheck for software updates for all currently set-up servers.\n</font></p><html>\n"); // NOI18N
        checkSoftwareUpdateMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkSoftwareUpdateMenuItemActionPerformed(evt);
            }
        });
        utilitiesMenu.add(checkSoftwareUpdateMenuItem);

        menuBar.add(utilitiesMenu);

        helpMenu.setText("Help");
        helpMenu.setFont(new java.awt.Font("Helvetica", 1, 14));

        jMenuItem1.setText("Release Notes");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        helpMenu.add(jMenuItem1);

        manualMenuItem.setText("Online Manual");
        manualMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(manualMenuItem);

        homepageMenuItem.setText("Bayes Analysis Home Page");
        homepageMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homepageMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(homepageMenuItem);

        contactUsMenu.setText("Contact us");
        contactUsMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contactUsMenuActionPerformed(evt);
            }
        });
        helpMenu.add(contactUsMenu);

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        helpMenu.add(aboutMenuItem);
        aboutMenuItem.setVisible(false);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadAsciiFromFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadAsciiFromFileMenuItemActionPerformed

    }//GEN-LAST:event_loadAsciiFromFileMenuItemActionPerformed

    private void loadAsciiFromBayesAnalyzeMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadAsciiFromBayesAnalyzeMenuItem2ActionPerformed

    }//GEN-LAST:event_loadAsciiFromBayesAnalyzeMenuItem2ActionPerformed

    private void loadFidDataMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFidDataMenuItemActionPerformed

    }//GEN-LAST:event_loadFidDataMenuItemActionPerformed

    private void loadSiemensRdaDataMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadSiemensRdaDataMenuItemActionPerformed

    }//GEN-LAST:event_loadSiemensRdaDataMenuItemActionPerformed

    private void loadSiemensRawDataMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadSiemensRawDataMenuItemActionPerformed

    }//GEN-LAST:event_loadSiemensRawDataMenuItemActionPerformed

    private void text2FidMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_text2FidMenuItemActionPerformed

    }//GEN-LAST:event_text2FidMenuItemActionPerformed

    private void BrukerBinaryMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrukerBinaryMenuItemActionPerformed

    }//GEN-LAST:event_BrukerBinaryMenuItemActionPerformed

    private void varianBinaryMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_varianBinaryMenuItemActionPerformed

    }//GEN-LAST:event_varianBinaryMenuItemActionPerformed

    private void text2FidImageMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_text2FidImageMenuItemActionPerformed

    }//GEN-LAST:event_text2FidImageMenuItemActionPerformed

    private void fdf2imageMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fdf2imageMenuItemActionPerformed

    }//GEN-LAST:event_fdf2imageMenuItemActionPerformed

    private void imgBinaryMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imgBinaryMenuItemActionPerformed

    }//GEN-LAST:event_imgBinaryMenuItemActionPerformed

    private void rawBinaryMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rawBinaryMenuItemActionPerformed

    }//GEN-LAST:event_rawBinaryMenuItemActionPerformed

    private void singled2seqMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singled2seqMenuItemActionPerformed

    }//GEN-LAST:event_singled2seqMenuItemActionPerformed

    private void text2imageMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_text2imageMenuItemActionPerformed

    }//GEN-LAST:event_text2imageMenuItemActionPerformed

    private void textMultiColumn2imageMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textMultiColumn2imageMenuItemActionPerformed

    }//GEN-LAST:event_textMultiColumn2imageMenuItemActionPerformed

    private void ima2imageMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ima2imageMenuItemActionPerformed

    }//GEN-LAST:event_ima2imageMenuItemActionPerformed

    private void DicomMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DicomMenuItemActionPerformed

    }//GEN-LAST:event_DicomMenuItemActionPerformed

    private void loadAbscissaMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadAbscissaMenuItemActionPerformed

    }//GEN-LAST:event_loadAbscissaMenuItemActionPerformed

    private void loadAbscissaProcparMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadAbscissaProcparMenuItemActionPerformed

    }//GEN-LAST:event_loadAbscissaProcparMenuItemActionPerformed

    private void downloadTestDataMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadTestDataMenuItemActionPerformed

    }//GEN-LAST:event_downloadTestDataMenuItemActionPerformed

    private void downloadManualMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadManualMenuItemActionPerformed

    }//GEN-LAST:event_downloadManualMenuItemActionPerformed

    private void jsaveExperimentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jsaveExperimentMenuItemActionPerformed

    }//GEN-LAST:event_jsaveExperimentMenuItemActionPerformed

    private void loadExperimentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadExperimentMenuItemActionPerformed

    }//GEN-LAST:event_loadExperimentMenuItemActionPerformed

    private void bacthLoadWorkDirMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bacthLoadWorkDirMenuItemActionPerformed

    }//GEN-LAST:event_bacthLoadWorkDirMenuItemActionPerformed

    private void exponentialMenuItempackageMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exponentialMenuItempackageMenuActionPerformed

        packageMenuAction(evt);     }//GEN-LAST:event_exponentialMenuItempackageMenuActionPerformed

    private void inversionRecoverylMenuItempackageMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inversionRecoverylMenuItempackageMenuActionPerformed

        packageMenuAction(evt);     }//GEN-LAST:event_inversionRecoverylMenuItempackageMenuActionPerformed

    private void diffusonTensorMenuItempackageMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diffusonTensorMenuItempackageMenuActionPerformed

        packageMenuAction(evt);     }//GEN-LAST:event_diffusonTensorMenuItempackageMenuActionPerformed

    private void enterAsciiMenuItempackageMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterAsciiMenuItempackageMenuActionPerformed

        packageMenuAction(evt);     }//GEN-LAST:event_enterAsciiMenuItempackageMenuActionPerformed

    private void enterAsciiModelMenuItempackageMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterAsciiModelMenuItempackageMenuActionPerformed

        packageMenuAction(evt);     }//GEN-LAST:event_enterAsciiModelMenuItempackageMenuActionPerformed

    private void enterAsciiModelTestRadioButtonMenuItempackageMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterAsciiModelTestRadioButtonMenuItempackageMenuActionPerformed

        packageMenuAction(evt);     }//GEN-LAST:event_enterAsciiModelTestRadioButtonMenuItempackageMenuActionPerformed

    private void mzTMenuItempackageMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mzTMenuItempackageMenuActionPerformed

        packageMenuAction(evt);     }//GEN-LAST:event_mzTMenuItempackageMenuActionPerformed

    private void mzTKineticsMenuItempackageMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mzTKineticsMenuItempackageMenuActionPerformed

        packageMenuAction(evt);     }//GEN-LAST:event_mzTKineticsMenuItempackageMenuActionPerformed

    private void mtZBigMenuItempackageMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mtZBigMenuItempackageMenuActionPerformed

        packageMenuAction(evt);     }//GEN-LAST:event_mtZBigMenuItempackageMenuActionPerformed

    private void bayesAnalyzeMenuItempackageMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bayesAnalyzeMenuItempackageMenuActionPerformed

        packageMenuAction(evt);     }//GEN-LAST:event_bayesAnalyzeMenuItempackageMenuActionPerformed

    private void bayesWaterMenuItempackageMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bayesWaterMenuItempackageMenuActionPerformed

        packageMenuAction(evt);     }//GEN-LAST:event_bayesWaterMenuItempackageMenuActionPerformed

    private void findResMenuItempackageMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findResMenuItempackageMenuActionPerformed

        packageMenuAction(evt);     }//GEN-LAST:event_findResMenuItempackageMenuActionPerformed

    private void bayesMetaboliteMenuItempackageMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bayesMetaboliteMenuItempackageMenuActionPerformed

        packageMenuAction(evt);     }//GEN-LAST:event_bayesMetaboliteMenuItempackageMenuActionPerformed

    private void behrensFisherMenuItempackageMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_behrensFisherMenuItempackageMenuActionPerformed

        packageMenuAction(evt);     }//GEN-LAST:event_behrensFisherMenuItempackageMenuActionPerformed

    private void ErrInVarsGivenButtonMenuItempackageMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ErrInVarsGivenButtonMenuItempackageMenuActionPerformed

        packageMenuAction(evt);     }//GEN-LAST:event_ErrInVarsGivenButtonMenuItempackageMenuActionPerformed

    private void polynomialMenuItempackageMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_polynomialMenuItempackageMenuActionPerformed

        packageMenuAction(evt);     }//GEN-LAST:event_polynomialMenuItempackageMenuActionPerformed

    private void redoDpCMenuItempackageMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoDpCMenuItempackageMenuActionPerformed

        packageMenuAction(evt);     }//GEN-LAST:event_redoDpCMenuItempackageMenuActionPerformed

    private void histogramMenuItempackageMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_histogramMenuItempackageMenuActionPerformed

        packageMenuAction(evt);     }//GEN-LAST:event_histogramMenuItempackageMenuActionPerformed

    private void binnedHistogramMenuItempackageMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binnedHistogramMenuItempackageMenuActionPerformed

        packageMenuAction(evt);     }//GEN-LAST:event_binnedHistogramMenuItempackageMenuActionPerformed

    private void bayesPhaseMenuItempackageMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bayesPhaseMenuItempackageMenuActionPerformed

        packageMenuAction(evt);     }//GEN-LAST:event_bayesPhaseMenuItempackageMenuActionPerformed

    private void bayesPhaseNonLinearMenuItempackageMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bayesPhaseNonLinearMenuItempackageMenuActionPerformed

        packageMenuAction(evt);     }//GEN-LAST:event_bayesPhaseNonLinearMenuItempackageMenuActionPerformed

    private void analyzeImagePixelMenuItempackageMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeImagePixelMenuItempackageMenuActionPerformed

        packageMenuAction(evt);     }//GEN-LAST:event_analyzeImagePixelMenuItempackageMenuActionPerformed

    private void imageModelSelectionMenuItempackageMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageModelSelectionMenuItempackageMenuActionPerformed

        packageMenuAction(evt);     }//GEN-LAST:event_imageModelSelectionMenuItempackageMenuActionPerformed

    private void packageMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_packageMenuActionPerformed

        packageMenuAction(evt);     }//GEN-LAST:event_packageMenuActionPerformed

    private void mcmcMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mcmcMenuItemActionPerformed

    }//GEN-LAST:event_mcmcMenuItemActionPerformed

    private void setServersMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setServersMenuItemActionPerformed

    }//GEN-LAST:event_setServersMenuItemActionPerformed

    private void windowSizeMEnuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_windowSizeMEnuActionPerformed

    }//GEN-LAST:event_windowSizeMEnuActionPerformed

    private void preferencesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preferencesMenuItemActionPerformed

    }//GEN-LAST:event_preferencesMenuItemActionPerformed

    private void memoryMonitorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memoryMonitorMenuItemActionPerformed

    }//GEN-LAST:event_memoryMonitorMenuItemActionPerformed

    private void systemInfoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_systemInfoMenuItemActionPerformed

    }//GEN-LAST:event_systemInfoMenuItemActionPerformed

    private void checkSoftwareUpdateMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkSoftwareUpdateMenuItemActionPerformed

    }//GEN-LAST:event_checkSoftwareUpdateMenuItemActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void manualMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manualMenuItemActionPerformed

    }//GEN-LAST:event_manualMenuItemActionPerformed

    private void homepageMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homepageMenuItemActionPerformed

    }//GEN-LAST:event_homepageMenuItemActionPerformed

    private void contactUsMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contactUsMenuActionPerformed

    }//GEN-LAST:event_contactUsMenuActionPerformed

    private void contactTimeMenuItempackageMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contactTimeMenuItempackageMenuActionPerformed

        packageMenuAction(evt);     }//GEN-LAST:event_contactTimeMenuItempackageMenuActionPerformed

        /**
         * @param args the command line arguments
         */
    
/****** actions start ************/

private void packageMenuAction(java.awt.event.ActionEvent evt){
    if (evt.getSource().equals(dummyMenuItem)) {
        return;
    }
    /*
    // if currently any job is running - warn user.
    if (preservePrevioslySubmittedJob() == true){
    selectedPackageMenutItem.setSelected(true);
    return;
    }
     */

    // Update selected menu item information
    selectedPackageMenutItem = (JRadioButtonMenuItem) evt.getSource();

    //make sure we have all directories in place
    DirectoryManager.doAnalaysisDir();

    // Delete serialization file.
    // We are switching package - so it is always safe.
    DirectoryManager.getSerializationFile().delete();


    // Clear Menu Bar Message
    this.setMenuBarMsg("");

    // Get model descriptor for selected package menu item.
    // Construct and display model.
    ModelDescriptor modelDescriptor = (ModelDescriptor) getModelDescrptorMap().get(selectedPackageMenutItem);
    setModel(modelDescriptor);
}
private void brukerMenuAction(java.awt.event.ActionEvent evt){
     JFileChooser fc = new JFileChooser();
    fc.setCurrentDirectory(DirectoryManager.startDir);
    fc.setMultiSelectionEnabled(false);
    fc.setFileSelectionMode(javax.swing.JFileChooser.FILES_ONLY);
    //fc.setFileFilter( new utilities.BayesFileFilters. ImageFileChooserFilter ());
    fc.setDialogTitle("Load Bruker FID");

    int returnVal = fc.showOpenDialog(null);

    if (returnVal == JFileChooser.APPROVE_OPTION) {

        try {
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            File file = fc.getSelectedFile();

            // if (file.isDirectory()){}
            LoadAndViewData.loadBrukerFid(file);



        } catch (Exception exp) {
            exp.printStackTrace();
        } finally {
            this.setCursor(Cursor.getDefaultCursor());
        }


    } else {
        return;
    }

    DirectoryManager.startDir = fc.getCurrentDirectory();
   
}
private void expMenuItemStateChanged(java.awt.event.ItemEvent evt) {
        if (evt.getStateChange() == java.awt.event.ItemEvent.DESELECTED) {
            return;
        }
        JRadioButtonMenuItem m = (JRadioButtonMenuItem) evt.getSource();
        String dir = m.getText();
        changeWorkDir(dir);


    }

    public void setModel(ModelDescriptor modelDescriptor) {
        System.out.println("Start loading package " + modelDescriptor.getModelTitle());
        killCurrentModel();
        boolean isModelLoaded = makeAndDisplayCurrentModel(modelDescriptor);

        if (isModelLoaded == false) {
            doNoModelSelected("No model is loaded");
        } else {
            setAcitveLoadButtons(isModelLoaded);
        }

    }

    public void popupEditExperiments() {
        List<String> dir_names = ApplicationPreferences.getWorkDirs();
        String curWorkDir = ApplicationPreferences.getCurrentWorkDir();
        DirectoryViewer l = DirectoryViewer.showDialog(dir_names, curWorkDir);
        String newWorkDir = l.getCurrenWorkingDir();
        l.dispose();
        l = null; // make sure garbage constructor destroys it
        modifyExperimentMenu(getWorkDirMenu());

        boolean isNewWorkDir = !curWorkDir.equals(newWorkDir);

        if (isNewWorkDir) {
            Component[] c = getWorkDirMenu().getMenuComponents();

            for (Component component : c) {
                if (component instanceof JMenuItem) {
                    JMenuItem mi = (JMenuItem) component;
                    boolean found = mi.getText().trim().equalsIgnoreCase(newWorkDir);
                    if (found) {
                        mi.doClick();
                    }
                } else {
                    continue;
                }
            }
            /* if  workdir didn't change */
        } else {
            if (this.isPackageLoaded() == false) {
                loadDir(curWorkDir);
            }

        }



 }
private void downloadTestData(){
     Server server = JServer.getInstance().getServer();
    DownloadSampleFiles.execute(server);
}
private void linkToHomePage(){
       StringBuilder sb = new StringBuilder();
    sb.append("http://bayesiananalysis.wustl.edu/");
    sb.append(BayesManager.APPLICATION_VERSION);
    sb.append(".html");

    launchLink(sb.toString());
}
private void showSystemInfo(){
        String sysInfo = SystemProperties.getSpecificSystemProperties();
    Viewer.display(sysInfo, "System Information", false);
}
private void windowSize(){
        JFrameSize.display(this);
   
}
private void downloadManual(){
          Server server = JServer.getInstance().getServer();
    String url = server.getManualURL();
    DownloadManual serverDownload = new DownloadManual(url);
    serverDownload.setDownloadDesciptor("Bayes Manual");
    DownloadManual.execute(serverDownload);
}
private void getAllViewerScreenShot(){
            Component screenshotCompt = AllViewers.getInstance().getCurrentViewable();
    if (screenshotCompt != null) {
        screenshotCompt = AllViewers.getInstance().getCurrentViewable();
    }

    if (screenshotCompt != null && screenshotCompt.isShowing()) {
        Screenshot.captureScreenShotAndDisplay(screenshotCompt, "BayesScreenShot");
    } else {
        DisplayText.popupErrorMessage("No Viewer is currently displayed.");
    }
}
private void batchLoadWorkDir(){
           // record wurrent working information before the any loading
    File before = DirectoryManager.getSerializationFile();
    boolean existBefore = (before != null && before.exists());
    long modTimeBefore = (existBefore) ? before.lastModified() : 0L;

    JSeekAndLoadWorkDirJDialog leg = JSeekAndLoadWorkDirJDialog.showDialog();

    File after = DirectoryManager.getSerializationFile();
    boolean existAfter = (after != null && after.exists());
    long modTimeAfter = (existAfter) ? after.lastModified() : modTimeBefore;

    modifyExperimentMenu(getWorkDirMenu());

    boolean curDirHasChanged = (modTimeBefore != modTimeAfter);
    if (curDirHasChanged) {
        String cwd = DirectoryManager.getExperimentDirName();
        System.out.println("Loading " + cwd);
        loadDir(cwd);
    }
}
private void loadWorkDir(){
        // record wurrent working information before the any loading
    File before = DirectoryManager.getSerializationFile();
    boolean existBefore = (before != null && before.exists());
    long modTimeBefore = (existBefore) ? before.lastModified() : 0L;

    LoadExperimentGui leg = LoadExperimentGui.showDialog();

    File after = DirectoryManager.getSerializationFile();
    boolean existAfter = (after != null && after.exists());
    long modTimeAfter = (existAfter) ? after.lastModified() : modTimeBefore;

    modifyExperimentMenu(getWorkDirMenu());

    boolean curDirHasChanged = (modTimeBefore != modTimeAfter);
    if (curDirHasChanged) {
        String cwd = DirectoryManager.getExperimentDirName();
        System.out.println("Loading " + cwd);
        loadDir(cwd);
    }
}
   
private void launchLink(String link) {
        Desktop desktop = null;
        URI uri = null;


        try {
            boolean isDesktop = Desktop.isDesktopSupported();
            if (isDesktop == false) {
                DisplayText.popupErrorMessage("Java Desktop is not supported by your OS. Exit...");

            } else {

                desktop = Desktop.getDesktop();
                uri = new URI(link);
                desktop.browse(uri);
            }


        } catch (Exception e) {
            System.err.println("Failed to launch link " + link + " using Desktop function.");
            e.printStackTrace();
            BrowserLaunch.openURL(link);
        } finally {
        }




    }
private void sendEmail(String email) {
        Desktop desktop = null;


        try {
            boolean isDesktop = Desktop.isDesktopSupported();
            if (isDesktop == false) {
                DisplayText.popupErrorMessage("Java Desktop is not supported by your OS. Exit...");

            } else {
                desktop = Desktop.getDesktop();

                if (email != null && email.length() > 0) {
                    URI uriMailTo = new URI("mailto", email, null);
                    desktop.mail(uriMailTo);
                } else {
                    desktop.mail();
                }
            }


        } catch (Exception e) {
            e.printStackTrace();
        } finally {
        }




    }
    void changeWorkDir(String newdir) {
        // Deserialize model in the "old" directory
        Model oldModel = PackageManager.getCurrentApplication();
        if (oldModel != null) {
            DirectoryManager.leaveExperiment();
        }

        loadDir(newdir);

    }
    void loadDir(String dir) {
        // set new directory
        DirectoryManager.move2Experiment(dir);

        // deserilize modelDescriptor in new directory
        ModelDescriptor modelDescriptor = bayes.Serialize.getDeserializedModelDescriptor();

        if (modelDescriptor == null) {
            doNoModelSelected("Please Select The Package");
        } else {
            checkSelectedPackage(modelDescriptor);
        }
    }
    void killCurrentModel() {
        mainPanel.removeAll();
        Model model = PackageManager.getCurrentApplication();
        if (model != null) {
            killModel(model);
            setMenuBarMsg("");
            // DirectoryManager.cleanCurrentDir();
        }
    }
    void killModel(Model model) {
        try {
            if (model == null) {
                return;
            }
            if (model instanceof java.beans.PropertyChangeListener) {
                PropertyChangeListener listener = (PropertyChangeListener) model;
                BayesManager.pcs.removePropertyChangeListener(listener);
                listener = null;
            }



            PropertyChangeListener[] lis = BayesManager.pcs.getPropertyChangeListeners();
            for (PropertyChangeListener listener : lis) {
                if (listener == this) {
                    continue;
                }
                BayesManager.pcs.removePropertyChangeListener(listener);
                listener = null;
            }

            // make sure JServer is set to zero
            // otherwist it is not being deserialized correctly
            JServer.reset();

            // make sure that static variables in Run are set
            // as status = NotRun and jobID = null
            JRun.setNotRun();



            AllViewers.reset();
            if (model instanceof JPanel) {
                JPanel pane = (JPanel) model;
                pane.removeAll();
                pane = null;
            }
            model = null;
            PackageManager.setCurrentApplication(null);

        } finally {
            setActive(true);
        }


    }
    void updateExperimentChange(JRadioButtonMenuItem menuItem) {
        menuItem.setSelected(true);
        selectedPackageMenutItem = menuItem;
        ModelDescriptor modelDescriptor = (ModelDescriptor) getModelDescrptorMap().get(menuItem);
        setModel(modelDescriptor);
    }
    void checkSelectedPackage(ModelDescriptor modelDescriptor) {
        if (debug) {
            System.out.println("Start loading package " + modelDescriptor.getModelClass());
        }

        Class modelClass = modelDescriptor.getModelClass();
        String constrArg = modelDescriptor.getConstrArg();

        if (debug) {
            System.out.println("Constructor argument is: " + constrArg);
        }

        if (modelDescriptor == null) {
            dummyMenuItem.doClick();
            return;
        }

        Set<JRadioButtonMenuItem> mitems = getModelDescrptorMap().keySet();


        for (JRadioButtonMenuItem mi : mitems) {
            ModelDescriptor md = getModelDescrptorMap().get(mi);

            if (modelClass.equals(md.getModelClass())) {

                // check if  it is an acsii preloaded packages
                if (modelClass.equals(BayesEnterAsciiPreloaded.class)) {

                    if (constrArg.equalsIgnoreCase(md.getConstrArg())) {
                        updateExperimentChange(mi);
                        return;
                    }

                } else {
                    updateExperimentChange(mi);
                    return;
                }

            }

        }


    }
    void setMainFrameTitle() {
        String title = "";

        File file = DirectoryManager.getExperimentDir();
        Model model = PackageManager.getCurrentApplication();
        if (model != null && model.getExtendedProgramName() != null) {
            title += "Package: " + model.getExtendedProgramName();
            title += "       ";
        }
        if (file != null) {
            title += "WorkDir: " + file.getName();
            title += "       ";
        }

        String host = SystemProperties.getHost();
        if (host != null) {
            title += "Host: " + host + "";
        }

        setMainFrameTitle(title);

    }
    void setMainFrameTitle(String title) {
        JFrame mainFrame = BayesApp.getApplication().getMainFrame();
        mainFrame.setTitle(title);
    }
    public void setMenuBarMsg(String msg) {
        boolean visibleText = !msg.isEmpty();
        //   jSeparator.setVisible(visibleText);
        this.menuBarMessage.setText(msg);

    }
    public String getMenuBarMsg() {
        return menuBarMessage.getText();

    }
    public static void setMenuBarMessage(String msg) {
        BayesView bw = BayesApp.getApplication().bayesView;
        if (bw != null) {
            bw.setMenuBarMsg(msg);
        }


    }
    public static String getMenuBarMessage() {
        String out = "";
        try {
            BayesView bw = BayesApp.getApplication().bayesView;
            if (bw != null) {
                out = bw.getMenuBarMsg();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            return out;
        }
    }
    boolean makeAndDisplayCurrentModel(ModelDescriptor modelDescriptor) {
        Model model = null;
        Class modelClass = modelDescriptor.getModelClass();
        System.out.println("Model class is " + modelClass);
        //  ApplicationPreferences.getBayesHomeDir();
        try {

            // if model is NOT of BayesEnterAscii family invoke single argument constrictor
            if (modelClass.equals(BayesEnterAsciiPreloaded.class) == false) {

                Constructor constr = modelClass.getConstructor();
                if (debug) {
                    System.out.println("Start constructing package ");
                }
                model = (Model) constr.newInstance();
                if (debug) {
                    System.out.println("Package initialization is complete.");
                }
            } // if model IS FROM BayesEnterAscii family invoke single or two-argument constrictor
            else {


                String constArg = modelDescriptor.getConstrArg();
                if (constArg == null) {
                    Constructor constr = modelClass.getConstructor();
                    model = (Model) constr.newInstance();
                } else {
                    Constructor constr = modelClass.getConstructor(String.class);
                    model = (Model) constr.newInstance(constArg);
                }
            }


            // make sure preloaded packages were loaded
            // For isntance these packages can not be loaded offline
            if (model instanceof BayesEnterAsciiPreloaded) {
                boolean isloaded = ((BayesEnterAsciiPreloaded) model).isLoaded();
                if (isloaded == false) {
                    return false;
                }
            }




        } catch (java.lang.reflect.InvocationTargetException e) {
            e.printStackTrace();
            String errormessage = String.format(
                    "Error is encountered while trying to construct package.\n"
                    + "Error type is : \"java.lang.reflect.InvocationTargetException\"\n"
                    + "Error message is : %s.\n"
                    + "Exiting...",
                    e.getMessage());
            DisplayText.popupErrorMessage(errormessage);
            return false;
        } catch (Exception e) {
            e.printStackTrace();
            selectedPackageMenutItem.setSelected(true);
            return false;
        }

        mainPanel.add((javax.swing.JPanel) model);
        mainPanel.revalidate();
        mainPanel.repaint();


        // this line is not neccessary, since during construction
        // model is set be PackageManager.currentApplication
        PackageManager.setCurrentApplication(model);
        setMainFrameTitle();
        return true;

    }
    void doNoModelSelected(String message) {
        dummyMenuItem.doClick();

        killCurrentModel();
        setAcitveLoadButtons(false);


        mainPanel.removeAll();
        mainPanel.revalidate();
        mainPanel.repaint();


        JFrame mainFrame = BayesApp.getApplication().getMainFrame();
        mainFrame.setTitle(message);
    }
    boolean preservePrevioslySubmittedJob() {
        boolean preserve = !JCleanJobRequest.cleanSubmittedJobAndSwitchPackage();
        if (preserve) {
            if (selectedPackageMenutItem != null) {
                selectedPackageMenutItem.setSelected(true);
            }
        }

        return preserve;
    }
    JMenu modifyExperimentMenu(JMenu menu) {
        List<String> dirs = ApplicationPreferences.getWorkDirs();
        String curDir = ApplicationPreferences.getCurrentWorkDir();
        ButtonGroup expButtonGroup = new ButtonGroup();

        menu.removeAll();

        // populated experiments
        for (String string : dirs) {

            JMenuItem menuItem = new JRadioButtonMenuItem();
            menuItem.setText(string);
            expButtonGroup.add(menuItem);
            if (string.equalsIgnoreCase(curDir)) {
                menuItem.setSelected(true);
            }
            menu.add(menuItem);
            menuItem.addItemListener(new java.awt.event.ItemListener() {

                public void itemStateChanged(java.awt.event.ItemEvent evt) {
                    expMenuItemStateChanged(evt);
                }
            });
        }

        menu.add(new JSeparator());

        // add menu item to edit experiment list
        JMenuItem editExpMenuItem = new JMenuItem();
        editExpMenuItem.addItemListener(new java.awt.event.ItemListener() {

                public void itemStateChanged(java.awt.event.ItemEvent evt) {
                    popupEditExperiments();
                }
            });
        editExpMenuItem.setText("Edit");
        menu.add(editExpMenuItem);

        return menu;
    }
    private ButtonGroup makePackageButtonGroup() {
        ButtonGroup bg = new javax.swing.ButtonGroup();
        List<JRadioButtonMenuItem> list = new ArrayList<JRadioButtonMenuItem>();
        JMenu menu = getPackageMenu();


        list = getRadioButtonMenues(menu, list);

        for (JRadioButtonMenuItem jRadioButtonMenuItem : list) {
            bg.add(jRadioButtonMenuItem);
        }

        return bg;
    }
    public static List<JRadioButtonMenuItem> getRadioButtonMenues(JMenu menu, List<JRadioButtonMenuItem> list) {

        Component[] menuItems = menu.getMenuComponents();

        for (Component component : menuItems) {
            if (component instanceof JRadioButtonMenuItem) {
                list.add((JRadioButtonMenuItem) component);
            } else if (component instanceof JMenu) {
                JMenu nestedmenu = (JMenu) component;
                getRadioButtonMenues(nestedmenu, list);
            }
        }

        return list;
    }
    private void setAcitveLoadButtons(boolean isActive) {

        getLoadAsciiMenu().setEnabled(isActive);
        getLoadImageMenu().setEnabled(isActive);
        getLoadFidMenu().setEnabled(isActive);

        getLoadAbscissaMenu().setEnabled(isActive);
        getLoadAbscissaMenuItem().setEnabled(isActive);
        getLoadAbscissaProcparMenuItem().setEnabled(isActive);

        getMcmcMenuItem().setEnabled(isActive);
        getSetServersMenuItem().setEnabled(isActive);

    }

    private void setActive(boolean active) {
        getPackageMenu().setEnabled(active);
        getFileMenu().setEnabled(active);
        getOptionsMenu().setEnabled(active);
    }
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Desktop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Desktop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Desktop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Desktop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        System.setProperty("swing.aatext", "true");
        System.out.println("Maximum Requested Memory = " + Runtime.getRuntime().maxMemory());
        if (args != null) {
            for (String string : args) {
                System.out.println(string);
            }
        }

        ApplicationPreferences.setDefaultServer(args);
        
        try {
            String savedLookAndFeel = ApplicationPreferences.getLookAndFeel();
            /*
            System.out.println("Saved Look and Feel "+  savedLookAndFeel );
            for (LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
            System.out.println( info);
            System.out.println( info.getName());
            System.out.println("");

            }
             *
             */
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if (savedLookAndFeel.equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }


        } catch (Exception exp) {
            exp.printStackTrace();
        }
        
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {

                new Desktop().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem BrukerBinaryMenuItem;
    private javax.swing.JMenuItem DicomMenuItem;
    private javax.swing.JRadioButtonMenuItem ErrInVarsGivenButtonMenuItem;
    private javax.swing.JRadioButtonMenuItem analyzeImagePixelMenuItem;
    private javax.swing.JMenuItem bacthLoadWorkDirMenuItem;
    private javax.swing.JRadioButtonMenuItem bayesAnalyzeMenuItem;
    private javax.swing.JRadioButtonMenuItem bayesMetaboliteMenuItem;
    private javax.swing.JRadioButtonMenuItem bayesPhaseMenuItem;
    private javax.swing.JRadioButtonMenuItem bayesPhaseNonLinearMenuItem;
    private javax.swing.JRadioButtonMenuItem bayesWaterMenuItem;
    private javax.swing.JRadioButtonMenuItem behrensFisherMenuItem;
    private javax.swing.JRadioButtonMenuItem binnedHistogramMenuItem;
    private javax.swing.JPanel bottomPane;
    private javax.swing.JMenuItem checkSoftwareUpdateMenuItem;
    private javax.swing.JRadioButtonMenuItem contactTimeMenuItem;
    private javax.swing.JMenuItem contactUsMenu;
    private javax.swing.JRadioButtonMenuItem diffusonTensorMenuItem;
    private javax.swing.JMenuItem downloadManualMenuItem;
    private javax.swing.JMenuItem downloadTestDataMenuItem;
    private javax.swing.JRadioButtonMenuItem dummyMenuItem;
    private javax.swing.JRadioButtonMenuItem enterAsciiMenuItem;
    private javax.swing.JRadioButtonMenuItem enterAsciiModelMenuItem;
    private javax.swing.JRadioButtonMenuItem enterAsciiModelTestRadioButtonMenuItem;
    private javax.swing.JRadioButtonMenuItem exponentialMenuItem;
    private javax.swing.JMenuItem fdf2imageMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JRadioButtonMenuItem findResMenuItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JRadioButtonMenuItem histogramMenuItem;
    private javax.swing.JMenuItem homepageMenuItem;
    private javax.swing.JMenuItem ima2imageMenuItem;
    private javax.swing.JRadioButtonMenuItem imageModelSelectionMenuItem;
    private javax.swing.JMenuItem imgBinaryMenuItem;
    private javax.swing.JRadioButtonMenuItem inversionRecoverylMenuItem;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPopupMenu.Separator jSeparator;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator10;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JMenuItem jsaveExperimentMenuItem;
    private javax.swing.JMenu loadAbscissaMenu;
    private javax.swing.JMenuItem loadAbscissaMenuItem;
    private javax.swing.JMenuItem loadAbscissaProcparMenuItem;
    private javax.swing.JMenuItem loadAsciiFromBayesAnalyzeMenuItem2;
    private javax.swing.JMenuItem loadAsciiFromFileMenuItem;
    private javax.swing.JMenu loadAsciiMenu;
    private javax.swing.JMenuItem loadExperimentMenuItem;
    private javax.swing.JMenuItem loadFidDataMenuItem;
    private javax.swing.JMenu loadFidMenu;
    private javax.swing.JMenu loadImageMenu;
    private javax.swing.JMenuItem loadSiemensRawDataMenuItem;
    private javax.swing.JMenuItem loadSiemensRdaDataMenuItem;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuItem manualMenuItem;
    private javax.swing.JMenuItem mcmcMenuItem;
    private javax.swing.JMenuItem memoryMonitorMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel menuBarMessage;
    private javax.swing.JRadioButtonMenuItem mtZBigMenuItem;
    private javax.swing.JRadioButtonMenuItem mzTKineticsMenuItem;
    private javax.swing.JRadioButtonMenuItem mzTMenuItem;
    private javax.swing.JMenu optionsMenu;
    javax.swing.ButtonGroup packageButtonGroup;
    private javax.swing.JMenu packageMenu;
    private javax.swing.JRadioButtonMenuItem polynomialMenuItem;
    private javax.swing.JMenuItem preferencesMenuItem;
    private javax.swing.JMenuItem rawBinaryMenuItem;
    private javax.swing.JRadioButtonMenuItem redoDpCMenuItem;
    private javax.swing.JMenuItem setServersMenuItem;
    private javax.swing.JMenuItem singled2seqMenuItem;
    private javax.swing.JMenuItem systemInfoMenuItem;
    private javax.swing.JMenuItem text2FidImageMenuItem;
    private javax.swing.JMenuItem text2FidMenuItem;
    private javax.swing.JMenuItem text2imageMenuItem;
    private javax.swing.JMenuItem textMultiColumn2imageMenuItem;
    private javax.swing.JMenu utilitiesMenu;
    private javax.swing.JMenuItem varianBinaryMenuItem;
    private javax.swing.JMenuItem windowSizeMEnu;
    private javax.swing.JMenu workDirMenu;
    // End of variables declaration//GEN-END:variables

    public javax.swing.JRadioButtonMenuItem getErrInVarsGivenButtonMenuItem() {
        return ErrInVarsGivenButtonMenuItem;
    }

    public javax.swing.JRadioButtonMenuItem getAnalyzeImagePixelMenuItem() {
        return analyzeImagePixelMenuItem;
    }

    public javax.swing.JRadioButtonMenuItem getBayesAnalyzeMenuItem() {
        return bayesAnalyzeMenuItem;
    }

    public javax.swing.JRadioButtonMenuItem getBayesMetaboliteMenuItem() {
        return bayesMetaboliteMenuItem;
    }

    public javax.swing.JRadioButtonMenuItem getBayesPhaseTestMenuItem() {
        return bayesPhaseMenuItem;
    }

    public javax.swing.JRadioButtonMenuItem getBayesPhaseNonLinearMenuItem() {
        return bayesPhaseNonLinearMenuItem;
    }

    public javax.swing.JRadioButtonMenuItem getBayesWaterMenuItem() {
        return bayesWaterMenuItem;
    }

    public javax.swing.JRadioButtonMenuItem getBehrensFisherMenuItem() {
        return behrensFisherMenuItem;
    }

    public javax.swing.JRadioButtonMenuItem getContactTimeMenuItem() {
        return contactTimeMenuItem;
    }

    public javax.swing.JRadioButtonMenuItem getDiffusonTensorMenuItem() {
        return diffusonTensorMenuItem;
    }

    public javax.swing.JRadioButtonMenuItem getEnterAsciiMenuItem() {
        return enterAsciiMenuItem;
    }

    public javax.swing.JRadioButtonMenuItem getEnterAsciiModelMenuItem() {
        return enterAsciiModelMenuItem;
    }

    public javax.swing.JRadioButtonMenuItem getFindResMenuItem() {
        return findResMenuItem;
    }

    public javax.swing.JRadioButtonMenuItem getImageModelSelectionMenuItem() {
        return imageModelSelectionMenuItem;
    }

    public javax.swing.JRadioButtonMenuItem getInversionRecoverylMenuItem() {
        return inversionRecoverylMenuItem;
    }

    public javax.swing.JRadioButtonMenuItem getMtZBigMenuItem() {
        return mtZBigMenuItem;
    }

    public javax.swing.JRadioButtonMenuItem getMzTKineticsMenuItem() {
        return mzTKineticsMenuItem;
    }

    public javax.swing.JRadioButtonMenuItem getMzTMenuItem() {
        return mzTMenuItem;
    }

    public javax.swing.JRadioButtonMenuItem getPolynomialMenuItem() {
        return polynomialMenuItem;
    }

    public javax.swing.JRadioButtonMenuItem getRedoDpCMenuItem() {
        return redoDpCMenuItem;
    }

    public javax.swing.JRadioButtonMenuItem getHistogramMenuItem() {
        return histogramMenuItem;
    }

    public javax.swing.JRadioButtonMenuItem getEnterAsciiModelTestRadioButtonMenuItem() {
        return enterAsciiModelTestRadioButtonMenuItem;
    }

    public javax.swing.JMenu getPackageMenu() {
        return packageMenu;
    }

    public javax.swing.JMenu getWorkDirMenu() {
        return workDirMenu;
    }

    public javax.swing.JMenu getLoadAbscissaMenu() {
        return loadAbscissaMenu;
    }

    public javax.swing.JMenu getLoadAsciiMenu() {
        return loadAsciiMenu;
    }

    public javax.swing.JMenuItem getLoadAbscissaMenuItem() {
        return loadAbscissaMenuItem;
    }

    public javax.swing.JMenuItem getLoadAbscissaProcparMenuItem() {
        return loadAbscissaProcparMenuItem;
    }

    public void setWorkDirMenu(javax.swing.JMenu workDirMenu) {
        this.workDirMenu = workDirMenu;
    }

    public javax.swing.JMenu getLoadImageMenu() {
        return loadImageMenu;
    }

    public javax.swing.JMenu getLoadFidMenu() {
        return loadFidMenu;
    }

    public javax.swing.JRadioButtonMenuItem getBinnedHistogramMenuItem() {
        return binnedHistogramMenuItem;
    }

    public javax.swing.JMenu getFileMenu() {
        return fileMenu;
    }

    public javax.swing.JMenu getOptionsMenu() {
        return optionsMenu;
    }

    public javax.swing.JMenuItem getMcmcMenuItem() {
        return mcmcMenuItem;
    }

    public javax.swing.JMenuItem getSetServersMenuItem() {
        return setServersMenuItem;
    }

    public boolean isPackageLoaded() {
        Component[] c = getPackageMenu().getMenuComponents();
        boolean isSelected = false;

        for (Component component : c) {
            if (component instanceof JRadioButtonMenuItem) {
                JRadioButtonMenuItem mi = (JRadioButtonMenuItem) component;
                if (mi.isSelected() && mi != dummyMenuItem) {
                    return true;
                }
            } else {
                continue;
            }
        }
        return isSelected;
    }

    public static HashMap<JRadioButtonMenuItem, ModelDescriptor> getModelDescrptorMap() {
        return modelDescrp;
    }

    private void initModelDesciptons() {
        ModelDescriptor md;

        md = new ModelDescriptor();
        md.setModelClass(BayesExponential.class);
        md.setModelTitle("Given and Unknown Number of Exponentials");
        md.setConstrArg(null);
        getModelDescrptorMap().put(exponentialMenuItem, md);

        md = new ModelDescriptor();
        md.setModelClass(BayesDiffTensor.class);
        md.setModelTitle("Diffusion Tensor Package");
        md.setConstrArg(null);
        getModelDescrptorMap().put(getDiffusonTensorMenuItem(), md);



        md = new ModelDescriptor();
        md.setModelClass(BayesMtZ.class);
        md.setModelTitle("Magnetization Transfer");
        md.setConstrArg(null);
        getModelDescrptorMap().put(getMzTMenuItem(), md);


        md = new ModelDescriptor();
        md.setModelClass(BayesMtZKinetics.class);
        md.setModelTitle("Bayesian Magnetization Transfer Kinetics");
        md.setConstrArg(null);
        getModelDescrptorMap().put(getMzTKineticsMenuItem(), md);

        md = new ModelDescriptor();
        md.setModelClass(BayesPolynomial.class);
        md.setModelTitle("Given and Unknown Number of Polinomials");
        md.setConstrArg(null);
        getModelDescrptorMap().put(getPolynomialMenuItem(), md);



        md = new ModelDescriptor();
        md.setModelClass(BayesBF.class);
        md.setModelTitle("Behrens-Fisher Package");
        md.setConstrArg(null);
        getModelDescrptorMap().put(getBehrensFisherMenuItem(), md);



        md = new ModelDescriptor();
        md.setModelClass(BayesErrInVarsGiven.class);
        md.setModelTitle("Errors In Variables");
        md.setConstrArg(null);
        getModelDescrptorMap().put(getErrInVarsGivenButtonMenuItem(), md);



        md = new ModelDescriptor();
        md.setModelClass(BayesEnterAscii.class);
        md.setModelTitle("Bayesian Build Your Own 1D Model");
        md.setConstrArg(null);
        getModelDescrptorMap().put(getEnterAsciiMenuItem(), md);



        md = new ModelDescriptor();
        md.setModelClass(BayesEnterAsciiModel.class);
        md.setModelTitle("Bayes Ascii Model Selection");
        md.setConstrArg(null);
        getModelDescrptorMap().put(getEnterAsciiModelMenuItem(), md);


        md = new ModelDescriptor();
        md.setModelClass(BayesTestModel.class);
        md.setModelTitle("Bayes Test Model Selection");
        md.setConstrArg(null);
        getModelDescrptorMap().put(getEnterAsciiModelTestRadioButtonMenuItem(), md);



        md = new ModelDescriptor();
        md.setModelClass(BayesDensityEstimation.class);
        md.setModelTitle("Bayes Density Function Estimation");
        md.setConstrArg(null);
        getModelDescrptorMap().put(getHistogramMenuItem(), md);


        md = new ModelDescriptor();
        md.setModelClass(BayesBinnedHistogram.class);
        md.setModelTitle("Bayes Binned Histograms ");
        md.setConstrArg(null);
        getModelDescrptorMap().put(getBinnedHistogramMenuItem(), md);


        md = new ModelDescriptor();
        md.setModelClass(BayesEnterAsciiPreloaded.class);
        md.setModelTitle("Bayes Contact Time Model");
        md.setConstrArg("ContactTime.f");
        getModelDescrptorMap().put(getContactTimeMenuItem(), md);




        md = new ModelDescriptor();
        md.setModelClass(BayesEnterAsciiPreloaded.class);
        md.setModelTitle("Bayes Magnitization Transfer With One Big Z Site");
        md.setConstrArg("MtZBig.f");
        getModelDescrptorMap().put(getMtZBigMenuItem(), md);



        md = new ModelDescriptor();
        md.setModelClass(BayesEnterAsciiPreloaded.class);
        md.setModelTitle("Bayes Redor Dipolor Coupling");
        md.setConstrArg("RedorDpC.f");
        getModelDescrptorMap().put(getRedoDpCMenuItem(), md);


        md = new ModelDescriptor();
        md.setModelClass(BayesEnterAsciiPreloaded.class);
        md.setModelTitle("Bayesian Analysis of Inversion Recovery Data");
        md.setConstrArg("InvRec.f");
        getModelDescrptorMap().put(getInversionRecoverylMenuItem(), md);


        md = new ModelDescriptor();
        md.setModelClass(BayesWater.class);
        md.setModelTitle("Bayes Water");
        md.setConstrArg(null);
        getModelDescrptorMap().put(getBayesWaterMenuItem(), md);


        md = new ModelDescriptor();
        md.setModelClass(BayesMetabolite.class);
        md.setModelTitle("Bayes Metabolite");
        md.setConstrArg(null);
        getModelDescrptorMap().put(getBayesMetaboliteMenuItem(), md);


        md = new ModelDescriptor();
        md.setModelClass(BayesAnalyze.class);
        md.setModelTitle("Bayes Analyze");
        md.setConstrArg(null);
        getModelDescrptorMap().put(getBayesAnalyzeMenuItem(), md);


        md = new ModelDescriptor();
        md.setModelClass(BayesFindResonances.class);
        md.setModelTitle("Bayes Find Resonances");
        md.setConstrArg(null);
        getModelDescrptorMap().put(getFindResMenuItem(), md);


        md = new ModelDescriptor();
        md.setModelClass(BayesPhase.class);
        md.setModelTitle("Bayes Phase");
        md.setConstrArg(null);
        getModelDescrptorMap().put(getBayesPhaseTestMenuItem(), md);


        md = new ModelDescriptor();
        md.setModelClass(BayesPhaseNonlinear.class);
        md.setModelTitle("Bayes Phase Nonlinear");
        md.setConstrArg(null);
        getModelDescrptorMap().put(getBayesPhaseNonLinearMenuItem(), md);

        md = new ModelDescriptor();
        md.setModelClass(AnalyzeImagePixels.class);
        md.setModelTitle("Analyze Image Pixels");
        md.setConstrArg(null);
        getModelDescrptorMap().put(getAnalyzeImagePixelMenuItem(), md);

        md = new ModelDescriptor();
        md.setModelClass(ImageModelSelection.class);
        md.setModelTitle("Bayes Image Model Selection");
        md.setConstrArg(null);
        getModelDescrptorMap().put(getImageModelSelectionMenuItem(), md);


    }

}
