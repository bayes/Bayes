/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RawImageDialog.java
 *
 * Created on Oct 11, 2010, 12:34:27 PM
 */

package image.raw;

import image.raw.BinaryReader.BINARY_TYPE;
import java.awt.Color;
import java.nio.ByteOrder;
import utilities.DisplayText;

/**
 *
 * @author apple
 */
public class RawImageDialog extends javax.swing.JDialog {
    private BinaryReader converter        =   new BinaryReader();
    private boolean load                        =   true;
    private static  RawImageDialog  instance    =   null;
    public static RawImageDialog  getInstance(){
        if (instance  == null){
            instance    =   new RawImageDialog(null, true);
        }
        return instance;
    }


    /** Creates new form RawImageDialog */
    public RawImageDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        imageTypeCB = new javax.swing.JComboBox();
        littleEndianCheckBox = new javax.swing.JCheckBox();
        imageWidthTF = new javax.swing.JFormattedTextField();
        imageHeightInCmTF = new javax.swing.JFormattedTextField();
        headerSizeTF = new javax.swing.JFormattedTextField();
        gapBetweenImagesSizeTF = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        elementsNumberTF = new javax.swing.JFormattedTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        imageWidthInCmTF = new javax.swing.JFormattedTextField();
        imageHeightTF = new javax.swing.JFormattedTextField();
        jLabel15 = new javax.swing.JLabel();
        imageSizeInCmCheckBox = new javax.swing.JCheckBox();
        jLabel17 = new javax.swing.JLabel();
        sliceNumberTF = new javax.swing.JFormattedTextField();
        jLabel18 = new javax.swing.JLabel();
        fileSizeTF = new javax.swing.JFormattedTextField();
        jLabel19 = new javax.swing.JLabel();
        gapBeforeImagesCB = new javax.swing.JCheckBox();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        calculatedBinarySizeTF = new javax.swing.JFormattedTextField();
        flipWidthAndHeightCB = new javax.swing.JCheckBox();
        complexImageCB = new javax.swing.JCheckBox();
        realImagesFirstCB = new javax.swing.JCheckBox();
        makeMagnitudeImagesCB = new javax.swing.JCheckBox();
        innerSliceLoopCB = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Load Raw Binary Image"); // NOI18N
        setResizable(false);

        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Image Type");
        jLabel2.setName("jLabel2"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 2.0;
        jPanel1.add(jLabel2, gridBagConstraints);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Image Width");
        jLabel3.setName("jLabel3"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 2.0;
        jPanel1.add(jLabel3, gridBagConstraints);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Number of Elements");
        jLabel4.setName("jLabel4"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 2.0;
        jPanel1.add(jLabel4, gridBagConstraints);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Header Size");
        jLabel5.setName("jLabel5"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 2.0;
        jPanel1.add(jLabel5, gridBagConstraints);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Estimated Binary Size");
        jLabel6.setName("jLabel6"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 2.0;
        jPanel1.add(jLabel6, gridBagConstraints);

        imageTypeCB.setModel(new javax.swing.DefaultComboBoxModel(
            new BINARY_TYPE[] {
                BINARY_TYPE.GRAY_SIGNED_16BIT_INT,
                BINARY_TYPE.GRAY_SIGNED_32BIT_INT,
                BINARY_TYPE.GRAY_SIGNED_32BIT_FLOAT
            }));
            imageTypeCB.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n<p>\nSpecify image type.\n\n</p>\n\n</html>\n\n\n"); // NOI18N
            imageTypeCB.setName("imageTypeCB"); // NOI18N
            imageTypeCB.addItemListener(new java.awt.event.ItemListener() {
                public void itemStateChanged(java.awt.event.ItemEvent evt) {
                    imageTypeCBItemStateChanged(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
            jPanel1.add(imageTypeCB, gridBagConstraints);

            littleEndianCheckBox.setText("Little Endian Byte Order");
            littleEndianCheckBox.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nCheck if binary is in littel-endian byte order.\n\n</html>\n"); // NOI18N
            littleEndianCheckBox.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
            littleEndianCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
            littleEndianCheckBox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rb.gif"))); // NOI18N
            littleEndianCheckBox.setIconTextGap(16);
            littleEndianCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
            littleEndianCheckBox.setName("littleEndianCheckBox"); // NOI18N
            littleEndianCheckBox.setRolloverEnabled(true);
            littleEndianCheckBox.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbr.gif"))); // NOI18N
            littleEndianCheckBox.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbrs.gif"))); // NOI18N
            littleEndianCheckBox.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbs.gif"))); // NOI18N
            littleEndianCheckBox.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    littleEndianCheckBoxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 8);
            jPanel1.add(littleEndianCheckBox, gridBagConstraints);

            imageWidthTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0"))));
            imageWidthTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
            imageWidthTF.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n<p>\n\nImage width in pixels.\n\n</p>\n\n</html>\n"); // NOI18N
            imageWidthTF.setInputVerifier(new utilities.PositiveIntegerInputVerifier());
            imageWidthTF.setName("imageWidthTF"); // NOI18N
            imageWidthTF.setValue(new Integer(1));
            imageWidthTF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
                public void propertyChange(java.beans.PropertyChangeEvent evt) {
                    imageWidthTFPropertyChange(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
            jPanel1.add(imageWidthTF, gridBagConstraints);

            imageHeightInCmTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0.###"))));
            imageHeightInCmTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
            imageHeightInCmTF.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n<p>\n\nImage height in millimeters.\n\n</p>\n\n</html>"); // NOI18N
            imageHeightInCmTF.setInputVerifier(new utilities.PositiveIntegerInputVerifier());
            imageHeightInCmTF.setName("imageHeightInCmTF"); // NOI18N
            imageHeightInCmTF.setValue(new Integer(1));

            org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, imageSizeInCmCheckBox, org.jdesktop.beansbinding.ELProperty.create("${selected}"), imageHeightInCmTF, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
            bindingGroup.addBinding(binding);

            imageHeightInCmTF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
                public void propertyChange(java.beans.PropertyChangeEvent evt) {
                    imageHeightInCmTFPropertyChange(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
            jPanel1.add(imageHeightInCmTF, gridBagConstraints);

            headerSizeTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0"))));
            headerSizeTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
            headerSizeTF.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nBinary file header size.\n\n\n</html>"); // NOI18N
            headerSizeTF.setInputVerifier(new utilities.PositiveIntegerInputVerifier());
            headerSizeTF.setName("headerSizeTF"); // NOI18N
            headerSizeTF.setValue(0);
            headerSizeTF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
                public void propertyChange(java.beans.PropertyChangeEvent evt) {
                    headerSizeTFPropertyChange(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 7;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
            jPanel1.add(headerSizeTF, gridBagConstraints);

            gapBetweenImagesSizeTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0"))));
            gapBetweenImagesSizeTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
            gapBetweenImagesSizeTF.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nGap between images in bytes.\n\n\n</html>"); // NOI18N
            gapBetweenImagesSizeTF.setInputVerifier(new utilities.PositiveIntegerInputVerifier());
            gapBetweenImagesSizeTF.setName("gapBetweenImagesSizeTF"); // NOI18N
            gapBetweenImagesSizeTF.setValue(0);
            gapBetweenImagesSizeTF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
                public void propertyChange(java.beans.PropertyChangeEvent evt) {
                    gapBetweenImagesSizeTFPropertyChange(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.weightx = 2.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
            jPanel1.add(gapBetweenImagesSizeTF, gridBagConstraints);

            jLabel7.setText("pixels");
            jLabel7.setName("jLabel7"); // NOI18N
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 4);
            jPanel1.add(jLabel7, gridBagConstraints);

            jLabel8.setText("bytes");
            jLabel8.setName("jLabel8"); // NOI18N
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 10;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.ipady = 11;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 4);
            jPanel1.add(jLabel8, gridBagConstraints);

            jLabel9.setText("mm");
            jLabel9.setName("jLabel9"); // NOI18N
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 4);
            jPanel1.add(jLabel9, gridBagConstraints);

            jLabel10.setText("bytes");
            jLabel10.setName("jLabel10"); // NOI18N
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 7;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 6);
            jPanel1.add(jLabel10, gridBagConstraints);

            jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
            jLabel11.setText("Image Height");
            jLabel11.setName("jLabel11"); // NOI18N

            binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, imageSizeInCmCheckBox, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jLabel11, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
            bindingGroup.addBinding(binding);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.weightx = 2.0;
            jPanel1.add(jLabel11, gridBagConstraints);

            elementsNumberTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0"))));
            elementsNumberTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
            elementsNumberTF.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n<p>\n\nNumber of elements for NR images. <br>\n(i.e. 4-th dimension size in image hyper stack).\n\n</p>\n\n</html>"); // NOI18N
            elementsNumberTF.setInputVerifier(new utilities.PositiveIntegerInputVerifier());
            elementsNumberTF.setName("elementsNumberTF"); // NOI18N
            elementsNumberTF.setValue(1);
            elementsNumberTF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
                public void propertyChange(java.beans.PropertyChangeEvent evt) {
                    elementsNumberTFPropertyChange(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
            jPanel1.add(elementsNumberTF, gridBagConstraints);

            jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
            jLabel12.setText("Image Width");
            jLabel12.setName("jLabel12"); // NOI18N

            binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, imageSizeInCmCheckBox, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jLabel12, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
            bindingGroup.addBinding(binding);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.weightx = 2.0;
            jPanel1.add(jLabel12, gridBagConstraints);

            jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
            jLabel13.setText("Image Height");
            jLabel13.setName("jLabel13"); // NOI18N
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.weightx = 2.0;
            jPanel1.add(jLabel13, gridBagConstraints);

            jLabel14.setText("pixels");
            jLabel14.setName("jLabel14"); // NOI18N
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 4);
            jPanel1.add(jLabel14, gridBagConstraints);

            imageWidthInCmTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0.###"))));
            imageWidthInCmTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
            imageWidthInCmTF.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n<p>\n\nImage width in millimeters.\n\n</p>\n\n</html>"); // NOI18N
            imageWidthInCmTF.setInputVerifier(new utilities.PositiveIntegerInputVerifier());
            imageWidthInCmTF.setName("imageWidthInCmTF"); // NOI18N
            imageWidthInCmTF.setValue(new Integer(1));

            binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, imageSizeInCmCheckBox, org.jdesktop.beansbinding.ELProperty.create("${selected}"), imageWidthInCmTF, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
            bindingGroup.addBinding(binding);

            imageWidthInCmTF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
                public void propertyChange(java.beans.PropertyChangeEvent evt) {
                    imageWidthInCmTFPropertyChange(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
            jPanel1.add(imageWidthInCmTF, gridBagConstraints);

            imageHeightTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0"))));
            imageHeightTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
            imageHeightTF.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n<p>\n\nImage height in pixels.\n\n</p>\n\n</html>"); // NOI18N
            imageHeightTF.setInputVerifier(new utilities.PositiveIntegerInputVerifier());
            imageHeightTF.setName("imageHeightTF"); // NOI18N
            imageHeightTF.setValue(new Integer(1));
            imageHeightTF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
                public void propertyChange(java.beans.PropertyChangeEvent evt) {
                    imageHeightTFPropertyChange(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
            jPanel1.add(imageHeightTF, gridBagConstraints);

            jLabel15.setText("mm");
            jLabel15.setName("jLabel15"); // NOI18N
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 4);
            jPanel1.add(jLabel15, gridBagConstraints);

            imageSizeInCmCheckBox.setText("Spatial Image Sizes");
            imageSizeInCmCheckBox.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nCheck if you want to assign<br>\nimages size in spatial units. \n\n</html>\n"); // NOI18N
            imageSizeInCmCheckBox.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
            imageSizeInCmCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
            imageSizeInCmCheckBox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rb.gif"))); // NOI18N
            imageSizeInCmCheckBox.setIconTextGap(16);
            imageSizeInCmCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
            imageSizeInCmCheckBox.setName("imageSizeInCmCheckBox"); // NOI18N
            imageSizeInCmCheckBox.setRolloverEnabled(true);
            imageSizeInCmCheckBox.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbr.gif"))); // NOI18N
            imageSizeInCmCheckBox.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbrs.gif"))); // NOI18N
            imageSizeInCmCheckBox.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbs.gif"))); // NOI18N
            imageSizeInCmCheckBox.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    imageSizeInCmCheckBoxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 8);
            jPanel1.add(imageSizeInCmCheckBox, gridBagConstraints);

            jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
            jLabel17.setText("Number of Slices");
            jLabel17.setName("jLabel17"); // NOI18N
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.weightx = 2.0;
            jPanel1.add(jLabel17, gridBagConstraints);

            sliceNumberTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0"))));
            sliceNumberTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
            sliceNumberTF.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\n\nNumber of slices for NR images. <br>\n(i.e. 3-rd dimension size in image hyper stack).\n\n\n</html>"); // NOI18N
            sliceNumberTF.setInputVerifier(new utilities.PositiveIntegerInputVerifier());
            sliceNumberTF.setName("sliceNumberTF"); // NOI18N
            sliceNumberTF.setValue(1);
            sliceNumberTF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
                public void propertyChange(java.beans.PropertyChangeEvent evt) {
                    sliceNumberTFPropertyChange(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
            jPanel1.add(sliceNumberTF, gridBagConstraints);

            jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
            jLabel18.setText("Gap Between Images");
            jLabel18.setName("jLabel18"); // NOI18N
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.weightx = 2.0;
            jPanel1.add(jLabel18, gridBagConstraints);

            fileSizeTF.setEditable(false);
            fileSizeTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0"))));
            fileSizeTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
            fileSizeTF.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nBinary file size in bytes.\n\n\n</html>"); // NOI18N
            fileSizeTF.setInputVerifier(new utilities.PositiveIntegerInputVerifier());
            fileSizeTF.setName("fileSizeTF"); // NOI18N
            fileSizeTF.setValue(0);
            fileSizeTF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
                public void propertyChange(java.beans.PropertyChangeEvent evt) {
                    fileSizeTFPropertyChange(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 9;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.weightx = 2.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
            jPanel1.add(fileSizeTF, gridBagConstraints);

            jLabel19.setText("bytes");
            jLabel19.setName("jLabel19"); // NOI18N
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.ipady = 11;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 4);
            jPanel1.add(jLabel19, gridBagConstraints);

            gapBeforeImagesCB.setText("Gap Precedes Images");
            gapBeforeImagesCB.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nCheck if \"gaps\" are preceeding <br>\nimages in binary file. <br>\nThese gaps will be skipped when<br>\nfile is read.\n\n</html>\n"); // NOI18N
            gapBeforeImagesCB.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
            gapBeforeImagesCB.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
            gapBeforeImagesCB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rb.gif"))); // NOI18N
            gapBeforeImagesCB.setIconTextGap(16);
            gapBeforeImagesCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
            gapBeforeImagesCB.setName("gapBeforeImagesCB"); // NOI18N
            gapBeforeImagesCB.setRolloverEnabled(true);
            gapBeforeImagesCB.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbr.gif"))); // NOI18N
            gapBeforeImagesCB.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbrs.gif"))); // NOI18N
            gapBeforeImagesCB.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbs.gif"))); // NOI18N
            gapBeforeImagesCB.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    gapBeforeImagesCBActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 8);
            jPanel1.add(gapBeforeImagesCB, gridBagConstraints);

            jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
            jLabel21.setText("File Size");
            jLabel21.setName("jLabel21"); // NOI18N
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 9;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.weightx = 2.0;
            jPanel1.add(jLabel21, gridBagConstraints);

            jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
            jLabel22.setText("File Size");
            jLabel22.setName("jLabel22"); // NOI18N
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 9;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.weightx = 2.0;
            jPanel1.add(jLabel22, gridBagConstraints);

            jLabel23.setText("bytes");
            jLabel23.setName("jLabel23"); // NOI18N
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 9;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.ipady = 11;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 4);
            jPanel1.add(jLabel23, gridBagConstraints);

            calculatedBinarySizeTF.setEditable(false);
            calculatedBinarySizeTF.setForeground(new java.awt.Color(204, 0, 0));
            calculatedBinarySizeTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0"))));
            calculatedBinarySizeTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
            calculatedBinarySizeTF.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nEstimated binary data size in bytes.\n\n\n</html>"); // NOI18N
            calculatedBinarySizeTF.setInputVerifier(new utilities.PositiveIntegerInputVerifier());
            calculatedBinarySizeTF.setName("calculatedBinarySizeTF"); // NOI18N
            calculatedBinarySizeTF.setValue(0);
            calculatedBinarySizeTF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
                public void propertyChange(java.beans.PropertyChangeEvent evt) {
                    calculatedBinarySizeTFPropertyChange(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 10;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.weightx = 2.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
            jPanel1.add(calculatedBinarySizeTF, gridBagConstraints);

            flipWidthAndHeightCB.setText("Swap X and Y");
            flipWidthAndHeightCB.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nCheck if you want to change <br>\nimage orientation.<br>\nPixels in X and Y directions<br>\n(specified by width and height)<br>\nwill be swapped.\n\n</html>"); // NOI18N
            flipWidthAndHeightCB.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
            flipWidthAndHeightCB.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
            flipWidthAndHeightCB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rb.gif"))); // NOI18N
            flipWidthAndHeightCB.setIconTextGap(16);
            flipWidthAndHeightCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
            flipWidthAndHeightCB.setName("flipWidthAndHeightCB"); // NOI18N
            flipWidthAndHeightCB.setRolloverEnabled(true);
            flipWidthAndHeightCB.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbr.gif"))); // NOI18N
            flipWidthAndHeightCB.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbrs.gif"))); // NOI18N
            flipWidthAndHeightCB.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbs.gif"))); // NOI18N
            flipWidthAndHeightCB.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    flipWidthAndHeightCBActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 8);
            jPanel1.add(flipWidthAndHeightCB, gridBagConstraints);

            complexImageCB.setText("Complex data");
            complexImageCB.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nCheck if binary file contains real <br>\nand imaginary images. \n</html>\n"); // NOI18N
            complexImageCB.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
            complexImageCB.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
            complexImageCB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rb.gif"))); // NOI18N
            complexImageCB.setIconTextGap(16);
            complexImageCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
            complexImageCB.setName("complexImageCB"); // NOI18N
            complexImageCB.setRolloverEnabled(true);
            complexImageCB.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbr.gif"))); // NOI18N
            complexImageCB.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbrs.gif"))); // NOI18N
            complexImageCB.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbs.gif"))); // NOI18N
            complexImageCB.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    complexImageCBActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 8);
            jPanel1.add(complexImageCB, gridBagConstraints);

            realImagesFirstCB.setSelected(true);
            realImagesFirstCB.setText("Real Images First");
            realImagesFirstCB.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nCheck if for binary file with complex images<br>\nfirst half of the images corresponds to real channel and <br>\nsecond half of the images corresponds to imaginary channel.\n\n</html>"); // NOI18N
            realImagesFirstCB.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
            realImagesFirstCB.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
            realImagesFirstCB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rb.gif"))); // NOI18N
            realImagesFirstCB.setIconTextGap(16);
            realImagesFirstCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
            realImagesFirstCB.setName("realImagesFirstCB"); // NOI18N
            realImagesFirstCB.setRolloverEnabled(true);
            realImagesFirstCB.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbr.gif"))); // NOI18N
            realImagesFirstCB.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbrs.gif"))); // NOI18N
            realImagesFirstCB.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbs.gif"))); // NOI18N

            binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, complexImageCB, org.jdesktop.beansbinding.ELProperty.create("${selected}"), realImagesFirstCB, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
            bindingGroup.addBinding(binding);

            realImagesFirstCB.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    realImagesFirstCBActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 7;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 8);
            jPanel1.add(realImagesFirstCB, gridBagConstraints);

            makeMagnitudeImagesCB.setSelected(true);
            makeMagnitudeImagesCB.setText("Make Magnitude Images");
            makeMagnitudeImagesCB.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nCheck if you want to generate magnitude images.<br>\nMagnitudre is defined as sqrt(re^2 + im^2).\n\n\n</html>"); // NOI18N
            makeMagnitudeImagesCB.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
            makeMagnitudeImagesCB.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
            makeMagnitudeImagesCB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rb.gif"))); // NOI18N
            makeMagnitudeImagesCB.setIconTextGap(16);
            makeMagnitudeImagesCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
            makeMagnitudeImagesCB.setName("makeMagnitudeImagesCB"); // NOI18N
            makeMagnitudeImagesCB.setRolloverEnabled(true);
            makeMagnitudeImagesCB.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbr.gif"))); // NOI18N
            makeMagnitudeImagesCB.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbrs.gif"))); // NOI18N
            makeMagnitudeImagesCB.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbs.gif"))); // NOI18N

            binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, complexImageCB, org.jdesktop.beansbinding.ELProperty.create("${selected}"), makeMagnitudeImagesCB, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
            bindingGroup.addBinding(binding);

            makeMagnitudeImagesCB.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    makeMagnitudeImagesCBActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 8);
            jPanel1.add(makeMagnitudeImagesCB, gridBagConstraints);

            innerSliceLoopCB.setText("Inner Slice Loop");
            innerSliceLoopCB.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nImages are read usign two loops: loop over slices <br>\nand loop over elements.<br>\nThis check box controls loop reading order:<br>\nIf check box is checked, loop over slices will be <br>\nan outter loop and loop over elements will be an inner loop.<br>\nIf check box is unchecked, loop over slices will be <br>\nan inner loop and loop over elements will be an  outter loop.<br>\n\n\n</html>"); // NOI18N
            innerSliceLoopCB.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
            innerSliceLoopCB.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
            innerSliceLoopCB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rb.gif"))); // NOI18N
            innerSliceLoopCB.setIconTextGap(16);
            innerSliceLoopCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
            innerSliceLoopCB.setName("innerSliceLoopCB"); // NOI18N
            innerSliceLoopCB.setRolloverEnabled(true);
            innerSliceLoopCB.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbr.gif"))); // NOI18N
            innerSliceLoopCB.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbrs.gif"))); // NOI18N
            innerSliceLoopCB.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbs.gif"))); // NOI18N
            innerSliceLoopCB.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    innerSliceLoopCBActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 8);
            jPanel1.add(innerSliceLoopCB, gridBagConstraints);

            getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

            jPanel2.setName("jPanel2"); // NOI18N

            cancelButton.setText("Cancel");
            cancelButton.setName("cancelButton"); // NOI18N
            cancelButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    cancelButtonActionPerformed(evt);
                }
            });

            loadButton.setText("Load");
            loadButton.setName("loadButton"); // NOI18N
            loadButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    loadButtonActionPerformed(evt);
                }
            });

            org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
            jPanel2.setLayout(jPanel2Layout);
            jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addContainerGap(515, Short.MAX_VALUE)
                    .add(cancelButton)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(loadButton))
            );
            jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel2Layout.createSequentialGroup()
                    .add(8, 8, 8)
                    .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(loadButton)
                        .add(cancelButton))
                    .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

            bindingGroup.bind();

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void littleEndianCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_littleEndianCheckBoxActionPerformed
}//GEN-LAST:event_littleEndianCheckBoxActionPerformed
    private void imageWidthTFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_imageWidthTFPropertyChange
        if (evt.getPropertyName().equalsIgnoreCase("value")){
             updateBinarySize();
        }
}//GEN-LAST:event_imageWidthTFPropertyChange
    private void imageHeightInCmTFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_imageHeightInCmTFPropertyChange
    }//GEN-LAST:event_imageHeightInCmTFPropertyChange
    private void headerSizeTFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_headerSizeTFPropertyChange
        if (evt.getPropertyName().equalsIgnoreCase("value")){
             updateBinarySize();
        }
    }//GEN-LAST:event_headerSizeTFPropertyChange
    private void gapBetweenImagesSizeTFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_gapBetweenImagesSizeTFPropertyChange
        if (evt.getPropertyName().equalsIgnoreCase("value")){
             updateBinarySize();
        }
    }//GEN-LAST:event_gapBetweenImagesSizeTFPropertyChange
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
       this.setLoad(false);
       this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed
    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
      boolean ready = isReadyToGo();
      if (ready  == false){return;}

      assignReaderValuesFromGUI();
      setLoad(true);
      dispose();
    }//GEN-LAST:event_loadButtonActionPerformed

    private void elementsNumberTFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_elementsNumberTFPropertyChange
      if (evt.getPropertyName().equalsIgnoreCase("value")){
             updateBinarySize();
        }
    }//GEN-LAST:event_elementsNumberTFPropertyChange
    private void imageWidthInCmTFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_imageWidthInCmTFPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_imageWidthInCmTFPropertyChange
    private void imageHeightTFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_imageHeightTFPropertyChange
       if (evt.getPropertyName().equalsIgnoreCase("value")){
             updateBinarySize();
        }
    }//GEN-LAST:event_imageHeightTFPropertyChange
    private void imageSizeInCmCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageSizeInCmCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_imageSizeInCmCheckBoxActionPerformed
    private void sliceNumberTFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_sliceNumberTFPropertyChange
        if (evt.getPropertyName().equalsIgnoreCase("value")){
             updateBinarySize();
        }
    }//GEN-LAST:event_sliceNumberTFPropertyChange
    private void fileSizeTFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_fileSizeTFPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_fileSizeTFPropertyChange
    private void gapBeforeImagesCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gapBeforeImagesCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gapBeforeImagesCBActionPerformed
    private void calculatedBinarySizeTFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_calculatedBinarySizeTFPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_calculatedBinarySizeTFPropertyChange

    private void imageTypeCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_imageTypeCBItemStateChanged
        updateBinarySize();
    }//GEN-LAST:event_imageTypeCBItemStateChanged
    private void flipWidthAndHeightCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flipWidthAndHeightCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_flipWidthAndHeightCBActionPerformed
    private void complexImageCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_complexImageCBActionPerformed
        updateBinarySize();
    }//GEN-LAST:event_complexImageCBActionPerformed
    private void realImagesFirstCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_realImagesFirstCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_realImagesFirstCBActionPerformed
    private void makeMagnitudeImagesCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeMagnitudeImagesCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_makeMagnitudeImagesCBActionPerformed

private void innerSliceLoopCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_innerSliceLoopCBActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_innerSliceLoopCBActionPerformed

    private void assignReaderValuesFromGUI(){
        BinaryReader reader    =    this.getBinaryReader();
        reader.setFirstImageOffsetInBytes(this.getImageHeaderSize());
        reader.setGapBetweenImagesInBytes(this.getImageGap());
        reader.setWidth(getImageWidth());
        reader.setHeight(getImageHeight());
        reader.setImageType(getImageType());
        reader.setNumberOfElements(getNumberOfElements());
        reader.setNumberOfSlices(getNumberOfSlices());
        reader.setGapBeforeImages(isGapBeforeImages());
        reader.setFlipWidthAndHeight(isSwapXandY());
        reader.setInnerSliceLoop(isInnerSliceLoop());
        reader.setComplex( isComplex());
        reader.setMakeMagnitudeImages(isMakeMagnitudeImages());
        reader.setRealImagesFirst(isRealImagesFirst());
        if (isLittleEndian()){
            reader.setByteOrder(ByteOrder.LITTLE_ENDIAN);
        }
        else{
             reader.setByteOrder(ByteOrder.BIG_ENDIAN);
        }

        if (isUseImageDimension()){
             reader.setWriteImageDimensions(true);
             reader.setImageHeightCm(getImageHeightCm());
             reader.setImageWidthCm(getImageWidthCm());

        }
    }
    /**
    * @param args the command line arguments
    */
    public void updateBinarySize(){
        long cursize    = calculateBinarySize();
        long filesize   = getFileSize(); 
        
        calculatedBinarySizeTF.setValue(cursize);
        if (cursize == filesize ){
            calculatedBinarySizeTF.setForeground(Color.black);
        }
        else{
            calculatedBinarySizeTF.setForeground(Color.red);
        }
        
    }
    public long calculateBinarySize(){
     long   headerSize              =  getImageHeaderSize();
     int    dataitemsize            =   getImageType().getBytes();
     long   getNumberOfDataPoints   =   getNumberOfElements()*getNumberOfSlices()*getImageHeight()*getImageWidth();
     long   dataSize                =   getNumberOfDataPoints * dataitemsize;
     int    numberOfGaps            =   getNumberOfElements()*getNumberOfSlices();
     long   gapSize                 =   numberOfGaps * getImageGap();

     long out                       =   headerSize   + gapSize    + dataSize;
     if (isComplex()){
        out                         =   2 * out;
     }
     return out;
    }
    private boolean isReadyToGo(){
        long cursize    = calculateBinarySize();
        long filesize   = getFileSize();
        if (cursize == filesize ){
            return true;
        }
        else{
            String error  = "Actual and estimated binary file sizes don't match.\nExiting...";
            DisplayText.popupErrorMessage(error);

            return false;
        }
    }


    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                RawImageDialog dialog = new RawImageDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }




    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField calculatedBinarySizeTF;
    private javax.swing.JButton cancelButton;
    public javax.swing.JCheckBox complexImageCB;
    private javax.swing.JFormattedTextField elementsNumberTF;
    private javax.swing.JFormattedTextField fileSizeTF;
    public javax.swing.JCheckBox flipWidthAndHeightCB;
    public javax.swing.JCheckBox gapBeforeImagesCB;
    private javax.swing.JFormattedTextField gapBetweenImagesSizeTF;
    private javax.swing.JFormattedTextField headerSizeTF;
    private javax.swing.JFormattedTextField imageHeightInCmTF;
    private javax.swing.JFormattedTextField imageHeightTF;
    public javax.swing.JCheckBox imageSizeInCmCheckBox;
    private javax.swing.JComboBox imageTypeCB;
    private javax.swing.JFormattedTextField imageWidthInCmTF;
    private javax.swing.JFormattedTextField imageWidthTF;
    public javax.swing.JCheckBox innerSliceLoopCB;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    public javax.swing.JCheckBox littleEndianCheckBox;
    private javax.swing.JButton loadButton;
    public javax.swing.JCheckBox makeMagnitudeImagesCB;
    public javax.swing.JCheckBox realImagesFirstCB;
    private javax.swing.JFormattedTextField sliceNumberTF;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
    public javax.swing.JFormattedTextField getGapBetweenImagesSizeTF() {
        return gapBetweenImagesSizeTF;
    }
    public javax.swing.JFormattedTextField getHeaderSizeTF() {
        return headerSizeTF;
    }
    public javax.swing.JComboBox getImageTypeCB() {
        return imageTypeCB;
    }
    public javax.swing.JCheckBox getLittleEndianCheckBox() {
        return littleEndianCheckBox;
    }

    public int getImageGap(){
        int out                     =   0;
        try{
            Object value            =   getGapBetweenImagesSizeTF().getValue();
            Number number           =   (Number)value;
            out                     =   number.intValue() ;
        }
        catch (Exception e){
            e.printStackTrace();
        }
        finally{
            return  out;
        }
    }
    public int getImageWidth(){
        int out                     =   0;
        try{
            Object value            =   imageWidthTF.getValue();
            Number number           =   (Number)value;
            out                     =   number.intValue() ;
        }
        catch (Exception e){
            e.printStackTrace();
        }
        finally{
            return  out;
        }
    }
    public int getImageHeight(){
        int out                     =   0;
        try{
            Object value            =   imageHeightTF.getValue();
            Number number           =   (Number)value;
            out                     =   number.intValue() ;
        }
        catch (Exception e){
            e.printStackTrace();
        }
        finally{
            return  out;
        }
    }
    public int getImageHeaderSize(){
        int out                     =   0;
        try{
            Object value            =   getHeaderSizeTF().getValue();
            Number number           =   (Number)value;
            out                     =   number.intValue() ;
        }
        catch (Exception e){
            e.printStackTrace();
        }
        finally{
            return  out;
        }
    }
    public int getNumberOfElements(){
        int out                     =   0;
        try{
            Object value            =   elementsNumberTF.getValue();
            Number number           =   (Number)value;
            out                     =   number.intValue() ;
        }
        catch (Exception e){
            e.printStackTrace();
        }
        finally{
            return  out;
        }
    }
    public int getNumberOfSlices(){
        int out                     =   0;
        try{
            Object value            =   sliceNumberTF.getValue();
            Number number           =   (Number)value;
            out                     =   number.intValue() ;
        }
        catch (Exception e){
            e.printStackTrace();
        }
        finally{
            return  out;
        }
    }
    public  BINARY_TYPE getImageType(){
        BINARY_TYPE type             =   BINARY_TYPE.GRAY_SIGNED_16BIT_INT;
        try{
           type                     =   (BINARY_TYPE) getImageTypeCB().getSelectedItem();
        }
        catch (Exception e){
            e.printStackTrace();
        }
        finally{
            return  type;
        }
    }
    public boolean isLittleEndian(){
        return  getLittleEndianCheckBox().isSelected();
    }
    public boolean isGapBeforeImages(){
        return  this.gapBeforeImagesCB.isSelected();
    }
    public boolean isSwapXandY(){
        return  this.flipWidthAndHeightCB.isSelected();
    }
    public boolean isInnerSliceLoop(){
        return  this.innerSliceLoopCB.isSelected();
    }
    public boolean isComplex(){
        return  complexImageCB.isSelected();
    }
    public boolean isMakeMagnitudeImages(){
        return makeMagnitudeImagesCB.isSelected();
    }
    public boolean isRealImagesFirst(){
        return  realImagesFirstCB.isSelected();
    }

    public long getFileSize(){
        long out                     =   0;
        try{
            Object value            =   this.fileSizeTF.getValue();
            Number number           =   (Number)value;
            out                     =   number.longValue() ;
        }
        catch (Exception e){
            e.printStackTrace();
        }
        finally{
            return  out;
        }
    }
    public long getEstimatedSize(){
        long out                     =   0;
        try{
            Object value            =   this.elementsNumberTF.getValue();
            Number number           =   (Number)value;
            out                     =   number.longValue() ;
        }
        catch (Exception e){
            e.printStackTrace();
        }
        finally{
            return  out;
        }
    }


    public boolean isUseImageDimension(){
        return  imageSizeInCmCheckBox.isSelected();
    }
    public double getImageHeightCm(){
        double out                 =   0;
        try{
            Object value            =   imageHeightInCmTF.getValue();
            Number number           =   (Number)value;
            out                     =   number.doubleValue() ;
        }
        catch (Exception e){
            e.printStackTrace();
        }
        finally{
            return  out;
        }
    }
    public double getImageWidthCm(){
           double out                 =   0;
        try{
            Object value            =   imageWidthInCmTF.getValue();
            Number number           =   (Number)value;
            out                     =   number.doubleValue() ;
        }
        catch (Exception e){
            e.printStackTrace();
        }
        finally{
            return  out;
        }
    }

    
    public void setFileSize(long length){
      fileSizeTF.setValue(length);
    }

    public boolean isLoad() {
        return load;
    }
    public void setLoad(boolean load) {
        this.load = load;
    }

    public BinaryReader getBinaryReader() {
        return converter;
    }
    public void setConverter(BinaryReader converter) {
        this.converter = converter;
    }


}
