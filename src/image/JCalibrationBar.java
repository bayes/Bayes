/*
 * JCalibrationBar.java
 *
 * Created on November 17, 2008, 9:39 AM
 */

package image;
import bayes.ApplicationConstants;
import bayes.ApplicationPreferences;
import java.awt.*;
import java.awt.geom.*;
import ij.process.*;
import java.awt.Font;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import javax.swing.*;

/**
 *
 * @author  apple
 */
public class JCalibrationBar extends javax.swing.JPanel
implements ImageConstants{
 public final static String CHANGE_CONTRAST             = "Adjust Contrast";
 public final static int  CALIBRATION_BAR_WIDTH         = 512;
 public final static int  CALIBRATION_BAR_HEIGHT        = 40;
 private FloatProcessor imageProcessor                  =   null;
 private Image image                                    =   null;
 private Line2D  lowLevelLine                           =   null;
 private Line2D  highLevelLine                          =   null;
 private Color   lowColor                                =   Color.RED;
 private Color   highColor                               =   Color.BLUE;
 private int      minLevelPixel                          =   0;
 private int      maxLevelPixel                          =   100;
 private int      midLevelPixel                          =   50;
 private double   maxLevel                               =   100;
 private double   minLevel                               =   0;

    /** Creates new form JCalibrationBar */
    public JCalibrationBar() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        canvas = new Canvas();
        labelPane = new LabelPane ();
        slderPane = new SliderPane();

        FormListener formListener = new FormListener();

        setBackground(new java.awt.Color(204, 0, 0));
        setLayout(new java.awt.BorderLayout());

        canvas.setBackground(new java.awt.Color(0, 0, 0));
        canvas.setName("canvas"); // NOI18N
        canvas.setPreferredSize(new Dimension( CALIBRATION_BAR_WIDTH , CALIBRATION_BAR_HEIGHT  ));
        canvas.addMouseListener(formListener);
        canvas.addMouseMotionListener(formListener);
        canvas.setLayout(new java.awt.BorderLayout());
        add(canvas, java.awt.BorderLayout.CENTER);

        labelPane.setBackground(new java.awt.Color(0, 0, 0));
        labelPane.setName("labelPane"); // NOI18N
        labelPane.setPreferredSize(new java.awt.Dimension(10, 20));
        labelPane.setLayout(new java.awt.BorderLayout());
        add(labelPane, java.awt.BorderLayout.NORTH);

        slderPane.setBackground(new java.awt.Color(0, 0, 0));
        slderPane.setName("slderPane"); // NOI18N
        slderPane.setPreferredSize(new java.awt.Dimension(5, 7));
        slderPane.addMouseListener(formListener);
        slderPane.addMouseMotionListener(formListener);
        slderPane.setLayout(new java.awt.BorderLayout());
        add(slderPane, java.awt.BorderLayout.PAGE_END);
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.MouseListener, java.awt.event.MouseMotionListener {
        FormListener() {}
        public void mouseClicked(java.awt.event.MouseEvent evt) {
        }

        public void mouseEntered(java.awt.event.MouseEvent evt) {
        }

        public void mouseExited(java.awt.event.MouseEvent evt) {
        }

        public void mousePressed(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == canvas) {
                JCalibrationBar.this.canvasMousePressed(evt);
            }
            else if (evt.getSource() == slderPane) {
                JCalibrationBar.this.slderPaneMousePressed(evt);
            }
        }

        public void mouseReleased(java.awt.event.MouseEvent evt) {
        }

        public void mouseDragged(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == canvas) {
                JCalibrationBar.this.canvasMouseDragged(evt);
            }
            else if (evt.getSource() == slderPane) {
                JCalibrationBar.this.slderPaneMouseDragged(evt);
            }
        }

        public void mouseMoved(java.awt.event.MouseEvent evt) {
        }
    }// </editor-fold>//GEN-END:initComponents

    private void canvasMousePressed (java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMousePressed
       mousePressedOrDragged(evt);
    }//GEN-LAST:event_canvasMousePressed
    private void canvasMouseDragged (java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMouseDragged
       mousePressedOrDragged(evt);
    }//GEN-LAST:event_canvasMouseDragged
    private void slderPaneMouseDragged (java.awt.event.MouseEvent evt) {//GEN-FIRST:event_slderPaneMouseDragged
         sliderMousePressedOrDragged(evt);
    }//GEN-LAST:event_slderPaneMouseDragged
    private void slderPaneMousePressed (java.awt.event.MouseEvent evt) {//GEN-FIRST:event_slderPaneMousePressed
         sliderMousePressedOrDragged(evt);
    }//GEN-LAST:event_slderPaneMousePressed

    public void mousePressedOrDragged(java.awt.event.MouseEvent evt){
        if ( getImageProcessor() == null  ) {return;}
        int pos              =      evt.getX();            // java2D posX
        int max              =      getCanvas().getWidth();
        int min              =      0;

        if (pos < min || pos >= max ){return;};

        // IF RIGHT MOUSE BUTTON EVENT
        if (  SwingUtilities.isRightMouseButton(evt) == true){
             if ( pos > getMinLevelPixel()){
                 setMaxLevelPixel(pos);
                 setMaxLevel(getImageProcessor().getPixelValue( getMaxLevelPixel(), 0));
             }
            
        }


        // IF LEFT MOUSE BUTTON EVENT
        else if ( SwingUtilities.isLeftMouseButton(evt) == true
                 && evt.isAltDown() == false)
        {

             if ( pos < getMaxLevelPixel()){
                setMinLevelPixel(pos);
                setMinLevel(getImageProcessor().getPixelValue( getMinLevelPixel(), 0));
             }

        }
       
       
        setMidLevelPixel((getMaxLevelPixel() + getMinLevelPixel()) / 2);

        repaint();
        this.firePropertyChange(CHANGE_CONTRAST, false, true);
    }
    public void sliderMousePressedOrDragged(java.awt.event.MouseEvent evt){
       if ( getImageProcessor() == null  ) {return;}

        int pos              =      evt.getX();            // java2D posX
        int diapason         =      Math.abs (getMaxLevelPixel() -getMinLevelPixel());
        int max              =      this.getCanvas().getWidth();
        int min              =      0;
        

       if (pos  -  diapason/2 < min || pos  +  diapason/2 > max ){return;};
        setMinLevelPixel(pos - diapason / 2);
        setMaxLevelPixel(pos + diapason / 2);
        setMidLevelPixel(pos) ;
       
        setMinLevel(getImageProcessor().getPixelValue( getMinLevelPixel(), 0));
        setMaxLevel(getImageProcessor().getPixelValue( getMaxLevelPixel(), 0));


        repaint();
        this.firePropertyChange(CHANGE_CONTRAST, false, true);
    }
    public void update(double min, double max){
        int    width     = CALIBRATION_BAR_WIDTH;
        int    height    = CALIBRATION_BAR_HEIGHT;

        if (getMinLevel() == min && getMaxLevel() == max){
            return;
        }

        if (getCanvas () != null){
            if (getCanvas ().getWidth() > 0){
                    width  = getCanvas ().getWidth() ;
            }
            if (getCanvas ().getHeight() > 0){
                   height  = getCanvas ().getHeight() ;
            }
        }

        float [][] pix  = new float[width][height];

        for (int i = 0; i < width; i++) {

            float f     = (float) (min + i*(max-min)/(width -1));

            for (int j = 0; j < height ; j++) {
               pix[i][j] = f;

            }

        }
        setMinLevelPixel(0);
        setMaxLevelPixel(width);
        setMaxLevel(max);
        setMinLevel(min);
        setImageProcessor( new FloatProcessor (pix));
        image           =   getImageProcessor().createImage();
        repaint();

    }



    private static void createAndShowGUI() {
        //Disable boldface controls.
        UIManager.put("swing.boldMetal", Boolean.FALSE);

        //Create and set up the window.
        JFrame frame = new JFrame("FID Binary Viewer");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        //Create and set up the content pane.
         JCalibrationBar  newContentPane = new  JCalibrationBar ();
        // FidViewer newContentPane = new FidViewer ( new File("test.fid"));
        newContentPane.setOpaque(true); //content panes must be opaque

        frame.setContentPane(newContentPane);

        //Display the window.
        frame.pack();
        frame.setVisible(true);

    }
    public static void main(String[] args) {

        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                createAndShowGUI();
            }
        });

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel canvas;
    private javax.swing.JPanel labelPane;
    private javax.swing.JPanel slderPane;
    // End of variables declaration//GEN-END:variables

    public FloatProcessor getImageProcessor () {
        return imageProcessor;
    }
    public void setImageProcessor ( FloatProcessor imageProcessor ) {
        this.imageProcessor = imageProcessor;
    }

    public javax.swing.JPanel getXCalibration () {
        return labelPane;
    }
    public javax.swing.JPanel getSlderPane () {
        return slderPane;
    }
    public javax.swing.JPanel getCanvas () {
        return canvas;
    }

    public double   getMaxLevel () {
        return maxLevel;
    }
    public void     setMaxLevel ( double maxLevel ) {
        this.maxLevel = maxLevel;
    }
    public double   getMinLevel () {
        return minLevel;
    }
    public void     setMinLevel ( double minLevel ) {
        this.minLevel = minLevel;
    }
    public int      getMinLevelPixel () {
        return minLevelPixel;
    }
    public void     setMinLevelPixel ( int minLevelPixel ) {
        this.minLevelPixel = minLevelPixel;
    }
    public int      getMaxLevelPixel () {
        return maxLevelPixel;
    }
    public void     setMaxLevelPixel ( int maxLevelPixel ) {
        this.maxLevelPixel = maxLevelPixel;
    }
    public int      getMidLevelPixel () {
        return midLevelPixel;
    }
    public void     setMidLevelPixel ( int midLevelPixel ) {
        this.midLevelPixel = midLevelPixel;
    }
  

    static String getDisplayNumber(double in){
         String out                     =    ""+ in;
         String simpleFormat            =   "%1."+ ImageViewerPreferences.getImageContrastBarLabelPresision() + "f";

         try{
            out                     =   String.format(simpleFormat,in);
         }
         catch (Exception e){
            e.printStackTrace();
         }
         finally{
            return out;
         }

    }
   


      class Canvas extends JPanel{

         @Override
         public  void paintComponent(Graphics g){
           if (image == null) { return;}

          Graphics2D g2d        = (Graphics2D)g;
          int width             =   getCanvas ().getWidth();
          int height            =   getCanvas ().getHeight();
          double maxVal         =   getImageProcessor ().getMax();
          double minVal         =   getImageProcessor ().getMin();
          String max            =   getDisplayNumber(maxVal) ;
          String min            =   getDisplayNumber(minVal) ;
          Font  font            =   g.getFont();
          FontMetrics fm        =   g.getFontMetrics();
         
          g.drawImage(image,0,0, null);
          g2d.setStroke(new BasicStroke(2f)  );

          g2d.setColor(lowColor);
          lowLevelLine   =   new Line2D.Double(getMinLevelPixel(),  0, getMinLevelPixel(), height);
          g2d.draw(lowLevelLine);

          g2d.setColor(highColor);
          highLevelLine   =   new Line2D.Double(getMaxLevelPixel(),  0, getMaxLevelPixel(), height);
          g2d.draw(highLevelLine);

             g.setFont(font.deriveFont(1));

           int offset = 2;
           Rectangle2D bounds =  fm.getStringBounds(min , g);
           g2d.setColor(Color.white);
           g2d.drawString(min,0 + offset,height-5);

           bounds =  fm.getStringBounds(max , g);
           g2d.setColor(Color.black);
           g2d.drawString(max, width  - offset - (int)(bounds.getWidth()),height-5);

             

         }
     
    }
      class LabelPane extends JPanel{

         @Override
         public  void paintComponent(Graphics g){
           super.paintComponent(g);
             if (image != null) {

            int height          =   getHeight();
            int width           =   getWidth();
          
            String minContrast  =   getDisplayNumber( getMinLevel ()) ;
            String maxContrast  =   getDisplayNumber( getMaxLevel ()) ;
            Font  font          =   g.getFont();
            g.setFont(font.deriveFont(1, 14f));


            FontMetrics fm      =   g.getFontMetrics();
           
            g.setColor(highColor);
            
             int maxWidth           =   fm.stringWidth (maxContrast );
             int maxPos             =   getMaxLevelPixel();
             if (maxPos + maxWidth   > width){
                 maxPos              =  width - maxWidth ;
             }
             g.drawString(maxContrast,maxPos,height - 5);



             g.setColor(lowColor);
             int minPos             =   getMinLevelPixel();
             int minWidth           =   fm.stringWidth(minContrast) ;
             if (minPos + minWidth > maxPos){
                 int tmp             =  minPos - minWidth;
                 if (tmp >= 0){
                    minPos           =  minPos - minWidth ;
                 }
                 
             }
             g.drawString(minContrast, minPos  ,height - 5);
          }
         }
      }
      class SliderPane extends JPanel{

         @Override
         public  void paintComponent(Graphics g){
             super.paintComponent(g);
            // if (image != null) {
            int height          =   getHeight();
            int width           =   getWidth();
            int pos             =   0;
            int side            =   16;
            
            g.setColor( new Color(240, 230, 250));
            g.drawLine( getMidLevelPixel()   - side/2, 0, getMidLevelPixel()   + side/2,0);
            g.drawLine( getMidLevelPixel()   - side/2, 1, getMidLevelPixel()   + side/2,1);

            g.setColor( new Color(210, 210, 210));
            side            =   12;
            g.drawLine( getMidLevelPixel()   - side/2, 2, getMidLevelPixel()   + side/2,2);

            side            =   10;
            
            g.drawLine( getMidLevelPixel()   - side/2, 3, getMidLevelPixel()   + side/2,3);
            g.drawLine( getMidLevelPixel()   - side/2, 4, getMidLevelPixel()   + side/2,4);

            g.setColor( new Color(230, 210, 250));
            side            =   8;
            g.drawLine( getMidLevelPixel()   - side/2, 5, getMidLevelPixel()   + side/2,5);
            side            =   6;
            g.drawLine( getMidLevelPixel()   - side/2, 6, getMidLevelPixel()   + side/2,6);
            //g.fillRect(  midLevelPixel   - side/2, 0,side,height);
            //g.setColor(Color.black);
          //  g.drawRect(width/2 - side, height/2 - side,2*side,2*side);
         // }
         }
      }
}
