/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Ascii2FidImageDialog.java
 *
 * Created on Mar 23, 2009, 10:41:11 AM
 */

package load.gui;
import bayes.DirectoryManager;
import load.*;
import fid.*;
import java.awt.*;
import utilities.*;
import javax.swing.*;
import java.io.File;
import java.util.regex.*;
import java.util.*;
import java.util.List;
/**
 *
 * @author apple
 */
public class Ascii2FidImageDialog extends javax.swing.JDialog {
    private static  Ascii2FidImageDialog   instance       =   null;
    private boolean canceled                              =   false;
    private boolean arrayed                               =   false;
    protected int numberOfArrayed                         =   0;
    private  Ascii2FidImageConverter converter            =   new Ascii2FidImageConverter ();

    private Ascii2FidImageDialog (java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    private static Ascii2FidImageDialog  getInstance( ) {
      if(instance == null) {
         instance = new Ascii2FidImageDialog (null, true);
      }

      return instance;
   }
    /*
    public static  Ascii2FidImageDialog  showDialog(Ascii2FidImageConverter converter  ){
       Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
       int x                =    screenSize.width/2- 200;
       int y                =    screenSize.height/2- 200;

       return showDialog(converter, x,y);

    }*/
    public static  Ascii2FidImageDialog  showDialog(Ascii2FidImageConverter converter ){
        //update settings

         // be default values are not active unless "set" button is pressed
         getInstance().setCanceled(true);


         // assign converter
         getInstance().setConverter(converter);

         // reset parameters
         getInstance().setNumberOfArrayed(0);
         getInstance().setArrayed(false);
         getInstance().setEstimateNumberOfLines();

         int numLines       = converter.getNumberOfLinesInFile();
         getInstance().getNumberOfLinesInFileTextField ().setValue(numLines);


         getInstance().setArrayedGUI();
         getInstance(). checkArrayDimensions();
         
          Dimension screenSize =    Toolkit.getDefaultToolkit().getScreenSize();
          Dimension winSize    =    getInstance( ).getPreferredSize();
          int x                =    screenSize.width/2 - winSize.width/2;
          int y                =    screenSize.height/2- winSize.height/2;;

         // show Preferences
        getInstance( ).setLocation(new java.awt.Point(x,y));
        getInstance( ).setVisible(true);
       return instance;
    }
    public         Ascii2FidImageDialog  hideDialog( ){
                    setVisible(false);
       return instance;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        parsingOrderButtonGroup = new javax.swing.ButtonGroup();
        generalParamsPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        nComplexPointInReadOutTextField = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        sfrqTextField = new javax.swing.JFormattedTextField();
        jLabel6 = new javax.swing.JLabel();
        estimNLinesInFileTextField = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        nLinesInTheFileTextField = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        readoutLengthTextField = new javax.swing.JFormattedTextField();
        jLabel8 = new javax.swing.JLabel();
        phaseEncodeLengthTextField = new javax.swing.JFormattedTextField();
        jLabel9 = new javax.swing.JLabel();
        sliceLengthTextField = new javax.swing.JFormattedTextField();
        jLabel10 = new javax.swing.JLabel();
        nComplexPointInPhaseEncodeTextField = new javax.swing.JFormattedTextField();
        jLabel11 = new javax.swing.JLabel();
        numberOfSlicesTextField = new javax.swing.JFormattedTextField();
        jLabel12 = new javax.swing.JLabel();
        numberOfElementsTextField = new javax.swing.JFormattedTextField();
        arrayParamsPanel = new javax.swing.JPanel();
        arrayDimLabel = new javax.swing.JLabel();
        arrayDimTextField = new javax.swing.JFormattedTextField();
        loadArrayedParamsButton = new javax.swing.JButton();
        arrayParam1Label = new javax.swing.JLabel();
        arrayParam1TextField = new javax.swing.JTextField();
        arrayParam2Label = new javax.swing.JLabel();
        arrayParam2TextField = new javax.swing.JTextField();
        arrayParam3Label = new javax.swing.JLabel();
        arrayParam3TextField = new javax.swing.JTextField();
        arrayedParamsLabel = new javax.swing.JLabel();
        arrayParamsTextField = new javax.swing.JFormattedTextField();
        fileStructurePanel = new javax.swing.JPanel();
        loopSlicesFirstRadioButton = new javax.swing.JRadioButton();
        loppElementsFirstRadioButton = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        setButton = new javax.swing.JButton();

        FormListener formListener = new FormListener();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        generalParamsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "General Parameters"));
        generalParamsPanel.setName("generalParamsPanel"); // NOI18N
        generalParamsPanel.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("Number of complex data points in readout ( np/2 )");
        jLabel3.setName("jLabel3"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        generalParamsPanel.add(jLabel3, gridBagConstraints);

        nComplexPointInReadOutTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0"))));
        nComplexPointInReadOutTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        nComplexPointInReadOutTextField.setToolTipText("<html>Number of complex data points  along readout direction.<br>\nIt is equivalent to procpar parameter  \"np\" value divided by 2.</html>"); // NOI18N
        nComplexPointInReadOutTextField.setInputVerifier(new utilities.PositiveIntegerInputVerifier());
        nComplexPointInReadOutTextField.setName("nComplexPointInReadOutTextField"); // NOI18N
        nComplexPointInReadOutTextField.setValue(new Integer(1));
        nComplexPointInReadOutTextField.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 5.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        generalParamsPanel.add(nComplexPointInReadOutTextField, gridBagConstraints);

        jLabel5.setText("Spectrometer frequency in MHz ( sfrq )");
        jLabel5.setName("jLabel5"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        generalParamsPanel.add(jLabel5, gridBagConstraints);

        sfrqTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        sfrqTextField.setToolTipText("<html>Spectrometer frequency in megahertz.<br> Equivalent to procpar parameter \"sfrq\".</html>"); // NOI18N
        sfrqTextField.setInputVerifier(new utilities.PositiveFloatInputVerifier());
        sfrqTextField.setName("sfrqTextField"); // NOI18N
        sfrqTextField.setValue(new Integer(1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        generalParamsPanel.add(sfrqTextField, gridBagConstraints);

        jLabel6.setText("Number of lines in the file");
        jLabel6.setName("jLabel6"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        generalParamsPanel.add(jLabel6, gridBagConstraints);

        estimNLinesInFileTextField.setEditable(false);
        estimNLinesInFileTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0"))));
        estimNLinesInFileTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        estimNLinesInFileTextField.setToolTipText("<html>Estimated number of lines in the image text file.</html>"); // NOI18N
        estimNLinesInFileTextField.setName("estimNLinesInFileTextField"); // NOI18N
        estimNLinesInFileTextField.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        generalParamsPanel.add(estimNLinesInFileTextField, gridBagConstraints);

        jLabel7.setText("Estimated number of lines in the file");
        jLabel7.setName("jLabel7"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        generalParamsPanel.add(jLabel7, gridBagConstraints);

        nLinesInTheFileTextField.setEditable(false);
        nLinesInTheFileTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.###"))));
        nLinesInTheFileTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        nLinesInTheFileTextField.setToolTipText("<html>Number of lines in the image text file.</html>"); // NOI18N
        nLinesInTheFileTextField.setName("nLinesInTheFileTextField"); // NOI18N
        nLinesInTheFileTextField.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        generalParamsPanel.add(nLinesInTheFileTextField, gridBagConstraints);

        jLabel4.setText("Phase encode length in cm  ( lpe )");
        jLabel4.setName("jLabel4"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        generalParamsPanel.add(jLabel4, gridBagConstraints);

        readoutLengthTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        readoutLengthTextField.setToolTipText("<html>Readout length in centimeters.<br>\nIt is equivalent to procpar parameter  \"lro\".</html>"); // NOI18N
        readoutLengthTextField.setInputVerifier(new utilities.PositiveFloatInputVerifier());
        readoutLengthTextField.setName("readoutLengthTextField"); // NOI18N
        readoutLengthTextField.setValue(new Integer(1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        generalParamsPanel.add(readoutLengthTextField, gridBagConstraints);

        jLabel8.setText("Readout length in cm ( lro )");
        jLabel8.setName("jLabel8"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        generalParamsPanel.add(jLabel8, gridBagConstraints);

        phaseEncodeLengthTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        phaseEncodeLengthTextField.setToolTipText("<html>Phase encode length in centimeters.<br>\n Equivalent to procpar parameter \"lpe\".</html>"); // NOI18N
        phaseEncodeLengthTextField.setInputVerifier(new utilities.PositiveFloatInputVerifier());
        phaseEncodeLengthTextField.setName("phaseEncodeLengthTextField"); // NOI18N
        phaseEncodeLengthTextField.setValue(new Integer(1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        generalParamsPanel.add(phaseEncodeLengthTextField, gridBagConstraints);

        jLabel9.setText("Slice thickness in mm ( thk )");
        jLabel9.setName("jLabel9"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        generalParamsPanel.add(jLabel9, gridBagConstraints);

        sliceLengthTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        sliceLengthTextField.setToolTipText("<html>Slice thickness in millimeters.<br>\n Equivalent to procpar parameter \"thk\".</html>"); // NOI18N
        sliceLengthTextField.setInputVerifier(new utilities.PositiveFloatInputVerifier());
        sliceLengthTextField.setName("sliceLengthTextField"); // NOI18N
        sliceLengthTextField.setValue(new Integer(1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        generalParamsPanel.add(sliceLengthTextField, gridBagConstraints);

        jLabel10.setText("Number of complex data points in phase encode ( nv )");
        jLabel10.setName("jLabel10"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        generalParamsPanel.add(jLabel10, gridBagConstraints);

        nComplexPointInPhaseEncodeTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0"))));
        nComplexPointInPhaseEncodeTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        nComplexPointInPhaseEncodeTextField.setToolTipText("<html>Number of complex data points  along readout direction.<br>\nIt is equivalent to procpar parameter  \"nv\".</html>"); // NOI18N
        nComplexPointInPhaseEncodeTextField.setInputVerifier(new utilities.PositiveIntegerInputVerifier());
        nComplexPointInPhaseEncodeTextField.setName("nComplexPointInPhaseEncodeTextField"); // NOI18N
        nComplexPointInPhaseEncodeTextField.setValue(new Integer(1));
        nComplexPointInPhaseEncodeTextField.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        generalParamsPanel.add(nComplexPointInPhaseEncodeTextField, gridBagConstraints);

        jLabel11.setText("Number of slices ( ns )");
        jLabel11.setName("jLabel11"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        generalParamsPanel.add(jLabel11, gridBagConstraints);

        numberOfSlicesTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0"))));
        numberOfSlicesTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        numberOfSlicesTextField.setToolTipText("<html>Number of slices.<br>\nIt is equivalent to procpar parameter  \"ns\".</html>"); // NOI18N
        numberOfSlicesTextField.setInputVerifier(new utilities.PositiveIntegerInputVerifier());
        numberOfSlicesTextField.setName("numberOfSlicesTextField"); // NOI18N
        numberOfSlicesTextField.setValue(new Integer(1));
        numberOfSlicesTextField.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        generalParamsPanel.add(numberOfSlicesTextField, gridBagConstraints);

        jLabel12.setText("Number of  elements");
        jLabel12.setName("jLabel12"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        generalParamsPanel.add(jLabel12, gridBagConstraints);

        numberOfElementsTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0"))));
        numberOfElementsTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        numberOfElementsTextField.setToolTipText("<html>Number of elements.<br>\n</html>"); // NOI18N
        numberOfElementsTextField.setInputVerifier(new utilities.PositiveIntegerInputVerifier());
        numberOfElementsTextField.setName("numberOfElementsTextField"); // NOI18N
        numberOfElementsTextField.setValue(new Integer(1));
        numberOfElementsTextField.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        generalParamsPanel.add(numberOfElementsTextField, gridBagConstraints);

        arrayParamsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Array Parameters"));
        arrayParamsPanel.setName("arrayParamsPanel"); // NOI18N
        arrayParamsPanel.setLayout(new java.awt.GridBagLayout());

        arrayDimLabel.setText("Array Dimension                                                      ");
        arrayDimLabel.setName("arrayDimLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        arrayParamsPanel.add(arrayDimLabel, gridBagConstraints);

        arrayDimTextField.setEditable(false);
        arrayDimTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        arrayDimTextField.setToolTipText("Array dimension. Equivalent to procpar parameter \"araydim\"."); // NOI18N
        arrayDimTextField.setInputVerifier(new utilities.PositiveIntegerInputVerifier());
        arrayDimTextField.setName("arrayDimTextField"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 5.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        arrayParamsPanel.add(arrayDimTextField, gridBagConstraints);

        loadArrayedParamsButton.setText("Load Arrayed Values");
        loadArrayedParamsButton.setToolTipText("Load text file with values for arrayed parameters."); // NOI18N
        loadArrayedParamsButton.setName("loadArrayedParamsButton"); // NOI18N
        loadArrayedParamsButton.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        arrayParamsPanel.add(loadArrayedParamsButton, gridBagConstraints);

        arrayParam1Label.setText("Arrayed Parameter 1");
        arrayParam1Label.setName("arrayParam1Label"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        arrayParamsPanel.add(arrayParam1Label, gridBagConstraints);

        arrayParam1TextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        arrayParam1TextField.setToolTipText("First arrayed parameter."); // NOI18N
        arrayParam1TextField.setName("arrayParam1TextField"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        arrayParamsPanel.add(arrayParam1TextField, gridBagConstraints);

        arrayParam2Label.setText("Arrayed Parameter 2");
        arrayParam2Label.setName("arrayParam2Label"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        arrayParamsPanel.add(arrayParam2Label, gridBagConstraints);

        arrayParam2TextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        arrayParam2TextField.setToolTipText("Second arrayed parameter."); // NOI18N
        arrayParam2TextField.setName("arrayParam2TextField"); // NOI18N
        arrayParam2TextField.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        arrayParamsPanel.add(arrayParam2TextField, gridBagConstraints);

        arrayParam3Label.setText("Arrayed Parameter 3");
        arrayParam3Label.setName("arrayParam3Label"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        arrayParamsPanel.add(arrayParam3Label, gridBagConstraints);

        arrayParam3TextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        arrayParam3TextField.setToolTipText("Third arrayed parameter."); // NOI18N
        arrayParam3TextField.setName("arrayParam3TextField"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        arrayParamsPanel.add(arrayParam3TextField, gridBagConstraints);

        arrayedParamsLabel.setText("Number of arrayed parameters");
        arrayedParamsLabel.setName("arrayedParamsLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        arrayParamsPanel.add(arrayedParamsLabel, gridBagConstraints);

        arrayParamsTextField.setEditable(false);
        arrayParamsTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        arrayParamsTextField.setToolTipText("Number of arrayed parameters."); // NOI18N
        arrayParamsTextField.setInputVerifier(new utilities.PositiveIntegerInputVerifier());
        arrayParamsTextField.setName("arrayParamsTextField"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        arrayParamsPanel.add(arrayParamsTextField, gridBagConstraints);

        fileStructurePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, null), "Text File Parsing Parameters"));
        fileStructurePanel.setName("fileStructurePanel"); // NOI18N

        parsingOrderButtonGroup.add(loopSlicesFirstRadioButton);
        loopSlicesFirstRadioButton.setText("The most outer loop corresponds to slice dimension");
        loopSlicesFirstRadioButton.setToolTipText("<html>The most outer loop corresponds to slice dimension<br>\nNext loop corresponds to element dimension.<br>\nNext loop corresponds to phase-encode dimension.<br>\nLast loop corresponds to readout dimension.\n</html>"); // NOI18N
        loopSlicesFirstRadioButton.setName("loopSlicesFirstRadioButton"); // NOI18N
        loopSlicesFirstRadioButton.addActionListener(formListener);

        parsingOrderButtonGroup.add(loppElementsFirstRadioButton);
        loppElementsFirstRadioButton.setSelected(true);
        loppElementsFirstRadioButton.setText("The most outer loop corresponds to element dimension");
        loppElementsFirstRadioButton.setToolTipText("<html>The most outer loop corresponds to element dimension<br>\nNext loop corresponds to slice dimension.<br>\nNext loop corresponds to phase-encode dimension.<br>\nLast loop corresponds to readout dimension.\n</html>"); // NOI18N
        loppElementsFirstRadioButton.setName("loppElementsFirstRadioButton"); // NOI18N
        loppElementsFirstRadioButton.addActionListener(formListener);

        org.jdesktop.layout.GroupLayout fileStructurePanelLayout = new org.jdesktop.layout.GroupLayout(fileStructurePanel);
        fileStructurePanel.setLayout(fileStructurePanelLayout);
        fileStructurePanelLayout.setHorizontalGroup(
            fileStructurePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(fileStructurePanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(fileStructurePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, loopSlicesFirstRadioButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, loppElementsFirstRadioButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(124, Short.MAX_VALUE))
        );
        fileStructurePanelLayout.setVerticalGroup(
            fileStructurePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(fileStructurePanelLayout.createSequentialGroup()
                .add(loppElementsFirstRadioButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(loopSlicesFirstRadioButton)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setName("jPanel1"); // NOI18N

        cancelButton.setText("CANCEL");
        cancelButton.setName("cancelButton"); // NOI18N
        cancelButton.setOpaque(true);
        cancelButton.addActionListener(formListener);

        setButton.setText("LOAD");
        setButton.setName("setButton"); // NOI18N
        setButton.setOpaque(true);
        setButton.addActionListener(formListener);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(291, Short.MAX_VALUE)
                .add(cancelButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 111, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(setButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 111, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(setButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cancelButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(55, 55, 55))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, arrayParamsPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 536, Short.MAX_VALUE)
                    .add(generalParamsPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 536, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, fileStructurePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(generalParamsPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 357, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(arrayParamsPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 229, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(fileStructurePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 63, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.beans.PropertyChangeListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == loadArrayedParamsButton) {
                Ascii2FidImageDialog.this.loadArrayedParamsButtonActionPerformed(evt);
            }
            else if (evt.getSource() == arrayParam2TextField) {
                Ascii2FidImageDialog.this.arrayParam2TextFieldActionPerformed(evt);
            }
            else if (evt.getSource() == cancelButton) {
                Ascii2FidImageDialog.this.cancelButtonActionPerformed(evt);
            }
            else if (evt.getSource() == setButton) {
                Ascii2FidImageDialog.this.setButtonActionPerformed(evt);
            }
            else if (evt.getSource() == loopSlicesFirstRadioButton) {
                Ascii2FidImageDialog.this.loopSlicesFirstRadioButtonActionPerformed(evt);
            }
            else if (evt.getSource() == loppElementsFirstRadioButton) {
                Ascii2FidImageDialog.this.loppElementsFirstRadioButtonActionPerformed(evt);
            }
        }

        public void propertyChange(java.beans.PropertyChangeEvent evt) {
            if (evt.getSource() == nComplexPointInReadOutTextField) {
                Ascii2FidImageDialog.this.estimatedArrayPropertyChanged(evt);
            }
            else if (evt.getSource() == estimNLinesInFileTextField) {
                Ascii2FidImageDialog.this.estimNLinesInFileTextFieldprocparPropertyChangeEvent(evt);
            }
            else if (evt.getSource() == nLinesInTheFileTextField) {
                Ascii2FidImageDialog.this.nLinesInTheFileTextFieldprocparPropertyChangeEvent(evt);
            }
            else if (evt.getSource() == nComplexPointInPhaseEncodeTextField) {
                Ascii2FidImageDialog.this.estimatedArrayPropertyChanged(evt);
            }
            else if (evt.getSource() == numberOfSlicesTextField) {
                Ascii2FidImageDialog.this.estimatedArrayPropertyChanged(evt);
            }
            else if (evt.getSource() == numberOfElementsTextField) {
                Ascii2FidImageDialog.this.estimatedArrayPropertyChanged(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private void estimNLinesInFileTextFieldprocparPropertyChangeEvent (java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_estimNLinesInFileTextFieldprocparPropertyChangeEvent
        // TODO add your handling code here:
}//GEN-LAST:event_estimNLinesInFileTextFieldprocparPropertyChangeEvent
    private void nLinesInTheFileTextFieldprocparPropertyChangeEvent (java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_nLinesInTheFileTextFieldprocparPropertyChangeEvent
        // TODO add your handling code here:
}//GEN-LAST:event_nLinesInTheFileTextFieldprocparPropertyChangeEvent
    private void loadArrayedParamsButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadArrayedParamsButtonActionPerformed
        loadArrayedParameters ();
}//GEN-LAST:event_loadArrayedParamsButtonActionPerformed
    private void arrayParam2TextFieldActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arrayParam2TextFieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_arrayParam2TextFieldActionPerformed
    private void cancelButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        hideDialog ( );
}//GEN-LAST:event_cancelButtonActionPerformed
    private void setButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setButtonActionPerformed
        boolean isDone = isReady ();

        if (isDone){
            hideDialog ( );
        }
    }//GEN-LAST:event_setButtonActionPerformed
    private void estimatedArrayPropertyChanged (java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_estimatedArrayPropertyChanged
       if (evt.getPropertyName().equalsIgnoreCase("value") == false){return;}
         setEstimateNumberOfLines();
    }//GEN-LAST:event_estimatedArrayPropertyChanged
    private void loopSlicesFirstRadioButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loopSlicesFirstRadioButtonActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_loopSlicesFirstRadioButtonActionPerformed
    private void loppElementsFirstRadioButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loppElementsFirstRadioButtonActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_loppElementsFirstRadioButtonActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Ascii2FidImageDialog dialog = new Ascii2FidImageDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }


    public void loadArrayedParameters(){

        JFileChooser fc             = new JFileChooser ();
        fc.setMultiSelectionEnabled (false);
        fc.setFileSelectionMode (JFileChooser.FILES_ONLY);
        fc.setCurrentDirectory(DirectoryManager.startDir);
        fc.setDialogTitle("Choose Arrayed Parameters Text File");
        int returnVal               =   fc.showOpenDialog (fc);
        if (returnVal              !=   JFileChooser.APPROVE_OPTION) { return;}
        DirectoryManager.startDir   =   fc.getCurrentDirectory();
        File src                    =   fc.getSelectedFile ();
        String  content             =   IO.readFileToString(src);
        Pattern p                   =   Pattern.compile("\\s+");
        String regex                =   p.pattern();

        int linecount               =   IO.countNumberOfLines(content);
        int parametercount          =   1;
        Scanner scanner             =    new Scanner(content);

        if(scanner.hasNextLine() == false) {return;}
        String  line                =    scanner.nextLine().trim();
        String [] tmp               =    line.split( regex);
        scanner.close();

        if (tmp == null)  {return;}

        parametercount              =   tmp.length;
        String [][] arrayValues     =   new String [ parametercount ][linecount] ;

        /* populate arrays */
        scanner             =    new Scanner(content);

        int coutnLine           =   0;
        String errMessage       =   null;

        while(scanner.hasNextLine()){
            line                =    scanner.nextLine().trim();
            coutnLine           =    coutnLine + 1;
            tmp                 =    line.split( regex);
            if (tmp.length == 0 ){
                errMessage = String.format("Error when parsing abscissa file.\n"
                                           +"Line number %d is not valid.\n"
                                           +"No space separated strings are found.\n"
                                           +"Line content is \n"
                                           + "\" %s \"",  coutnLine, line );
                break;
            }
            if (tmp.length != parametercount ){
                errMessage = String.format("Error when parsing abscissa file.\n"
                                           +"Line number %d is not valid.\n"
                                           +"Number of space separated strings is larger than %d.\n"
                                           +"Line content is \n"
                                           + "\" %s \"",  coutnLine, parametercount, line );
                break;
            }

            int curCol          =    coutnLine - 1;
            for (int curParam = 0; curParam < parametercount ; curParam++) {
                arrayValues[curParam][curCol] =   tmp[curParam];
            }


        }

        if(errMessage != null){

            DisplayText.popupMessage(errMessage);
            return;
        }


       setArrayed(true);
       setArraydimFromAbscissa(linecount);
       getConverter().setAbscissaValues(arrayValues);
       setNumberOfArrayed( parametercount);
       setArrayedGUI();
    }

    public boolean isReady(){
        boolean  isSuccess  =   recalculate();
        if(isSuccess == false) {
            setCanceled(true);
        }
        else{
            setCanceled(false);
        }

        return isSuccess;


    }

    public boolean  recalculate(){
        String errorMessage         =   "";
        Number number               =   null;
        int ncomplex                =   0;
        int nv                      =   0;
        int ns                      =   0;
        int nElements               =   0;
        float sfrq                  =   0;
        float lro                   =   1;
        float lpe                   =   1;
        float thk                   =   1;
        List <String>  arrayedNames =   new  ArrayList <String>() ;



        // make sure np has been set
         number           =  (Number)getNComplexInReadOutTextField ().getValue();
        if (number == null){
            errorMessage = "Error - Parameter \"np\" was not set.\nExiting...";
            DisplayText.popupErrorMessage(errorMessage);
            return false;

        }
        else{ ncomplex  =  number.intValue(); }


         // make sure nv has been set
         number           =  (Number) getNComplexPointInPhaseEncodeTextField ().getValue();
        if (number == null){
            errorMessage = "Error - Parameter \"nv\" was not set.\nExiting...";
            DisplayText.popupErrorMessage(errorMessage);
            return false;

        }
        else{ nv =  number.intValue(); }


         // make sure ns has been set
         number           =  (Number) getNumberOfSlicesTextField ().getValue();
        if (number == null){
            errorMessage = "Error - Parameter \"ns\" was not set.\nExiting...";
            DisplayText.popupErrorMessage(errorMessage);
            return false;

        }
        else{ ns =  number.intValue(); }


         // make sure nElement has been set
         number           =  (Number) getNumberOfElementsTextField ().getValue();
        if (number == null){
            errorMessage = "Error - Number of elements  were not set.\nExiting...";
            DisplayText.popupMessage(errorMessage);
            return false;

        }
        else{ nElements  =  number.intValue(); }



        // make sure lro has been set
         number           =  (Number)  getReadoutLengthTextField ().getValue();
        if (number == null){
            errorMessage = "Error - Parameter \"lro\" was not set.\nExiting...";
            DisplayText.popupErrorMessage(errorMessage);
            return false;

        }
        else{ lro  =  number.floatValue(); }


         // make sure lpe has been set
         number           =  (Number)   getPhaseEncodeLengthTextField ().getValue();
        if (number == null){
            errorMessage = "Error - Parameter \"lpe\" was not set.\nExiting...";
            DisplayText.popupErrorMessage(errorMessage);
            return false;

        }
        else{ lpe  =  number.floatValue(); }


       // make sure thk has been set
         number           =  (Number)   getSliceLengthTextField ().getValue();
        if (number == null){
            errorMessage = "Error - Parameter \"thk\" was not set.\nExiting...";
            DisplayText.popupMessage(errorMessage);
            return false;

        }
        else{ thk  =  number.floatValue(); }

        // make sure sfrq has been set
        number           =  (Number)getSfrqTextField ().getValue();
        if (number == null){
            errorMessage = "Error - Parameter \"sfrq\" was not set.\nExiting...";
            DisplayText.popupMessage(errorMessage);
            return false;
        }
        else {sfrq  =  number.floatValue();}


         // make sure that number of lines in the file is equal to estimated value
        int nLines          =    getConverter().getNumberOfLinesInFile();
        number              =    (Number)getEstimatedNumberOfLinesInFileTextField().getValue();
        int estNLines       =     number.intValue();
        if (nLines != estNLines){
            errorMessage = String.format("Number of lines in the file %d\n" +
                                         "is not equal to estimated value of %d.\n" +
                                          "Exiting...",
                                          nLines,estNLines ) ;
            DisplayText.popupErrorMessage(errorMessage);
            return false;

        }



        if ( nElements > 1 && isArrayed() == false){
            errorMessage = String.format( "Image is arrayed\n" +
                                          "( array dimension = %d),\n" +
                                          "but abscissa is not loaded.\n" +
                                          "Exiting...",
                                          nElements) ;
            DisplayText.popupErrorMessage(errorMessage);
            return false;

        }


        if (isArrayed()){

            // make sure that arrayeParameters names were typed and are valid
            arrayedNames =  getArrayedParamsNames();

            boolean validNames  =   checkParametersName(arrayedNames );
            if (validNames == false){return false;}


            // make sure that abscissa dimension and number of traces in fid
            // are identical
            int arraydimFromAbscissa    =    getArraydimFromAbscissa();
            if ( nElements - arraydimFromAbscissa != 0){
                errorMessage = String.format(   "Number of lines in abscissa file %d\n" +
                                                "is different from estimated array dim %d\n" +
                                                "Exiting...",
                                                arraydimFromAbscissa ,
                                                nElements) ;
                DisplayText.popupErrorMessage(errorMessage);
                return false;

            }
        }
        boolean isSlicesFirst =         getLoopSlicesFirstRadioButton ().isSelected();
        getConverter().setSclicesFirst(isSlicesFirst);

        double gamma          =         26752.0;
        double tpe            =         0.001;
        float at              =         0.001f;
        int np                =         ncomplex*2;
        double dwellTime      =         2*at/np;
        double gpe            =         1/lpe/(2*Math.PI*gamma)/tpe;
        double gro            =         1/lro/(2*Math.PI*gamma)/dwellTime;
        double rfp            =         -0.5/ dwellTime;
        double rfp1           =         -0.5/ tpe  ;
        double rfl            =         0;
        double rfl1           =         0;

        double sw             =         1.0/ dwellTime;
        double sw1            =         1.0/tpe;
        float lp              =         0f;
        float fpmult          =         1.0f;
        int cf                =         1;
        int fn                =         MathFunctions.getPaddedLength(np);
        int fn1               =         MathFunctions.getPaddedLength(2*nv);
        int ni                =         nv;
        int nf                =         ns;
        int arraydim          =         nElements*nv;

        getProcpar().setNp(np);
        getProcpar().setNv(nv);
        getProcpar().setNs(ns);
        getProcpar().setLro(lro);
        getProcpar().setLpe(lpe);
        getProcpar().setThk(thk);
        getProcpar().setFn(fn);
        getProcpar().setFn1(fn1);

        getProcpar().setNi(nv);
        getProcpar().setAt(at);
        getProcpar().setLp(lp);
        getProcpar().setCf(cf);

        getProcpar().setNf(nf);
        getProcpar().setNi(ni);

        getProcpar().setTpe((float) tpe);
        getProcpar().setGpe((float) gpe);
        getProcpar().setGro((float) gro);
      
        getProcpar().setFpmult(fpmult);

        getProcpar().setSw((float)sw);
        getProcpar().setSw1((float)sw1 );
       
        getProcpar().setSfrq(sfrq);

        getProcpar().setRp(0);

        getProcpar().setRfp((float)rfp  );
        getProcpar().setRfp1((float)rfp1   );
        getProcpar().setRfl((float)rfl);
        getProcpar().setRfl1((float)rfl1);
        getProcpar().setNvActive(true);

        if (isArrayed() == false){
              getProcpar().setArrayValues(null);
              getProcpar().getArray().clear();
              getProcpar().setArraydim(arraydim);
        }
        else {
             getProcpar().setArraydim(arraydim);
             getProcpar().setArray( arrayedNames);
             getProcpar().setArrayValues(getConverter().getAbscissaValues());
             getProcpar().setDataSize(getConverter().getAbscissaValues()[0].length);
        }
        return true;
    }





    public boolean   checkParametersName(List <String > names){
        boolean isValid =   false;
          for (int i = 0; i < names.size(); i++) {
            String name             =   names.get(i);

            // check for spaces and so in the names
            isValid                 =   isContainsNonWordCharacter(name);
            if (isValid == false)    {
                int guiIndex    =   i+ 1;
                String message = String.format("Arrayed parameter number %d has invalid name.\n" +
                        "Parameter name must not contain non-word character.",guiIndex );
                DisplayText.popupMessage(message);
                return false;
            }


            // check that the parameter is a not a string parameter in procpar
            // and is not the one that being overwritten by this  appliaction
            isValid                 = isNotAllowedParameterName(name);
            if (isValid == false)    {
                String message = String.format("Procpar parameter %s\n can not be arrayed.",name );
                DisplayText.popupMessage(message);
                return false;
            }
        }


       return true;
    }
    public boolean   isContainsNonWordCharacter(String name){
        if (name == null || name.length() == 0) {return false;}
        Pattern p                   =   Pattern.compile("\\W");
        Matcher matcher             =   p.matcher(name);
        if(matcher.find() == true) {return false;}

        return true;
    }
    public boolean   isNotAllowedParameterName(String name){
        ProcparFileWriterForImages  writer = new    ProcparFileWriterForImages  ();
        boolean isStringparameter          = writer.isStringParameterInProcpar(name);
        if(isStringparameter ) {return false;}
        return true;
    }

    private List<String> getArrayedParamsNames(){
        java.util.List<String> names    =   new ArrayList<String>();
        int n                           =   getNumberOfArrayed();
        switch (n){
            case 1  :  names.add( getArrayParam1TextField().getText().trim());break;
            case 2  :  names.add( getArrayParam2TextField().getText().trim());break;
            case 3  :  names.add( getArrayParam3TextField().getText().trim());break;
            default :  break;
        }
    
        return names ;
    }


    public int getArraydimFromAbscissa(){
        Number n = (Number) getArrayDimTextField ().getValue();
        return n.intValue();
    }
    public void  setArraydimFromAbscissa(int val){
        getArrayDimTextField ().setValue(val);
    }

    public int  getEstimatedNumberOfLines(){
        Number n = (Number)getNumberOfLinesInFileTextField().getValue();
        return n.intValue();
    }
    public void   setEstimateNumberOfLines(){
        Number number       =   null;
        int estimNLines     =   1;

        number              =   (Number)getNComplexInReadOutTextField().getValue();
        if(number==null){ 
            getEstimatedNumberOfLinesInFileTextField().setText("");
            return;
        }
        int nReadout        =   number.intValue();


        number              =   (Number)getNComplexPointInPhaseEncodeTextField().getValue();
        if(number==null){ 
            getEstimatedNumberOfLinesInFileTextField().setText("");
            return;
        }
        int nPhaseEncode    =   number.intValue();


        number              =   (Number)getNumberOfSlicesTextField().getValue();
        if(number==null){ 
            getEstimatedNumberOfLinesInFileTextField().setText("");
            return;
        }
        int nSlices         =   number.intValue();


        number              =   (Number)getNumberOfElementsTextField().getValue();
        if(number==null){
            getEstimatedNumberOfLinesInFileTextField().setText("");
            return;
        }
        int nElements       =   number.intValue();


        
        estimNLines         =   nReadout* nPhaseEncode*nSlices*nElements;

        getEstimatedNumberOfLinesInFileTextField().setValue(estimNLines);
        if (estimNLines != getConverter().getNumberOfLinesInFile()){

            getEstimatedNumberOfLinesInFileTextField().setForeground(Color.RED);
        }
        else
        {
            getEstimatedNumberOfLinesInFileTextField().setForeground(Color.BLACK);
        }

         checkArrayDimensions();
    }

    public int getNumberOfElements(){
        Number n = (Number)this.getNumberOfElementsTextField().getValue();
        return n.intValue();
    }


    public void checkArrayDimensions(){

        try{
             Number n                   =   (Number) getArrayDimTextField ().getValue();
             if (n == null){  throw new NullPointerException();}
               // throw new IllegalArgumentException();}

             int abscissaArrayDim       =       n.intValue();
             int numElements            =       getNumberOfElements();

             if ( numElements - abscissaArrayDim  != 0){
                 throw new IllegalArgumentException();
             }

              getArrayDimTextField ().setForeground(Color.BLACK);
        }
         catch(NullPointerException exp){
              getArrayDimTextField ().setForeground(Color.BLACK);

         }
         catch( IllegalArgumentException exp){
              getArrayDimTextField ().setForeground(Color.RED);

         }
    }

    public void setArrayedGUI(){
        getArrayParamsTextField ().setValue(  getNumberOfArrayed());

        if(this.isArrayed() == false){
            settArrayedGUIActive(false);
            getArrayParamsTextField ().setText("");
        }
        else{
            settArrayedGUIActive(true);
            checkArrayDimensions();

            if (getNumberOfArrayed() == 1){
                getArrayParam2Label ().setEnabled(false);
                getArrayParam2TextField ().setEnabled(false);

                getArrayParam3Label () .setEnabled(false);
                getArrayParam3TextField () .setEnabled(false);
            }
            else if  (this.getNumberOfArrayed() == 2){
                getArrayParam3Label () .setEnabled(false);
                getArrayParam3TextField () .setEnabled(false);
            }
            else if  (this.getNumberOfArrayed() == 3){
            }
        }

    }
    private void settArrayedGUIActive(boolean enabled){

            getArrayDimLabel ().setEnabled(enabled);
            getArrayDimTextField ().setEnabled(enabled);

            getArrayParamsTextField () .setEnabled(enabled);
            getArrayedParamsLabel ().setEnabled(enabled);

            getArrayParam1Label ().setEnabled(enabled);
            getArrayParam1TextField ().setEnabled(enabled);

            getArrayParam2Label ().setEnabled(enabled);
            getArrayParam2TextField ().setEnabled(enabled);

            getArrayParam3Label () .setEnabled(enabled);
            getArrayParam3TextField () .setEnabled(enabled);

            if (enabled == false){
                clearArrayedGUI();
            }
    }
    private void clearArrayedGUI(){
            getArrayDimTextField ().setText("");
            getArrayParamsTextField () .setText("");
            getArrayParam1TextField ().setText("");
            getArrayParam2TextField ().setText("");
            getArrayParam3TextField ().setText("");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel arrayDimLabel;
    private javax.swing.JFormattedTextField arrayDimTextField;
    private javax.swing.JLabel arrayParam1Label;
    private javax.swing.JTextField arrayParam1TextField;
    private javax.swing.JLabel arrayParam2Label;
    private javax.swing.JTextField arrayParam2TextField;
    private javax.swing.JLabel arrayParam3Label;
    private javax.swing.JTextField arrayParam3TextField;
    private javax.swing.JPanel arrayParamsPanel;
    private javax.swing.JFormattedTextField arrayParamsTextField;
    private javax.swing.JLabel arrayedParamsLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JFormattedTextField estimNLinesInFileTextField;
    private javax.swing.JPanel fileStructurePanel;
    private javax.swing.JPanel generalParamsPanel;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton loadArrayedParamsButton;
    private javax.swing.JRadioButton loopSlicesFirstRadioButton;
    private javax.swing.JRadioButton loppElementsFirstRadioButton;
    private javax.swing.JFormattedTextField nComplexPointInPhaseEncodeTextField;
    private javax.swing.JFormattedTextField nComplexPointInReadOutTextField;
    private javax.swing.JFormattedTextField nLinesInTheFileTextField;
    private javax.swing.JFormattedTextField numberOfElementsTextField;
    private javax.swing.JFormattedTextField numberOfSlicesTextField;
    private javax.swing.ButtonGroup parsingOrderButtonGroup;
    private javax.swing.JFormattedTextField phaseEncodeLengthTextField;
    private javax.swing.JFormattedTextField readoutLengthTextField;
    private javax.swing.JButton setButton;
    private javax.swing.JFormattedTextField sfrqTextField;
    private javax.swing.JFormattedTextField sliceLengthTextField;
    // End of variables declaration//GEN-END:variables
  
    public javax.swing.JFormattedTextField getNComplexInReadOutTextField () {
        return nComplexPointInReadOutTextField;
    }
    public javax.swing.JFormattedTextField getNComplexPointInPhaseEncodeTextField () {
        return nComplexPointInPhaseEncodeTextField;
    }
    public javax.swing.JFormattedTextField getSfrqTextField () {
        return sfrqTextField;
    }

    public javax.swing.JLabel getArrayDimLabel () {
        return arrayDimLabel;
    }
    public javax.swing.JFormattedTextField getArrayDimTextField () {
        return arrayDimTextField;
    }
    public javax.swing.JLabel getArrayParam1Label () {
        return arrayParam1Label;
    }
    public javax.swing.JTextField getArrayParam1TextField () {
        return arrayParam1TextField;
    }
    public javax.swing.JTextField getArrayParam2TextField () {
        return arrayParam2TextField;
    }
    public javax.swing.JLabel getArrayParam3Label () {
        return arrayParam3Label;
    }
    public javax.swing.JLabel getArrayParam2Label () {
        return arrayParam2Label;
    }
    public javax.swing.JTextField getArrayParam3TextField () {
        return arrayParam3TextField;
    }
    public javax.swing.JFormattedTextField getArrayParamsTextField () {
        return arrayParamsTextField;
    }
    public javax.swing.JLabel getArrayedParamsLabel () {
        return arrayedParamsLabel;
    }
    public javax.swing.JFormattedTextField getNumberOfLinesInFileTextField () {
        return nLinesInTheFileTextField;
    }
    public javax.swing.JFormattedTextField getEstimatedNumberOfLinesInFileTextField () {
        return estimNLinesInFileTextField;
    }
    public javax.swing.JFormattedTextField getPhaseEncodeLengthTextField () {
        return phaseEncodeLengthTextField;
    }
    public javax.swing.JFormattedTextField getReadoutLengthTextField () {
        return readoutLengthTextField;
    }
    public javax.swing.JFormattedTextField getSliceLengthTextField () {
        return sliceLengthTextField;
    }
    public javax.swing.JFormattedTextField getNumberOfSlicesTextField () {
        return numberOfSlicesTextField;
    }
    public javax.swing.JFormattedTextField getNumberOfElementsTextField () {
        return numberOfElementsTextField;
    }
  
    public javax.swing.JRadioButton getLoopSlicesFirstRadioButton () {
        return loopSlicesFirstRadioButton;
    }
    public javax.swing.JRadioButton getLoppElementsFirstRadioButton () {
        return loppElementsFirstRadioButton;
    }

    public boolean isCanceled () {
        return canceled;
    }
    public void setCanceled ( boolean canceled ) {
        this.canceled = canceled;
    }


    public boolean isArrayed () {
        return arrayed;
    }
    public void setArrayed ( boolean arrayed ) {
        this.arrayed = arrayed;
    }

    public int getNumberOfArrayed () {
        return numberOfArrayed;
    }
    public void setNumberOfArrayed ( int numberOfArrayed ) {
        this.numberOfArrayed = numberOfArrayed;
    }

    public static boolean isDialogCanceled () {
        return getInstance().isCanceled();
    }

    public Ascii2FidImageConverter getConverter () {
        return converter;
    }
    public void setConverter (Ascii2FidImageConverter converter ) {
        this.converter = converter;
    }


    public Procpar getProcpar(){
        return this.getConverter().getProcpar();
    }

   

 

  

  

   

  

   
}
