/*
 * JRemoteFileChooser.java
 *
 * Created on September 15, 2008, 3:51 PM
 */

package load.gui;
import java.io.*;
import java.net.*;
import java.util.*;
import javax.swing.*;
import bayes.DoCGI;
/**
 *
 * @author  apple
 */
public class JRemoteFileChooser extends javax.swing.JDialog implements bayes.ApplicationConstants{

 

    
   public static enum FILTER  {
       MODEL,
       METABOLITE,
       RESONANCE,
       SAMPLE_ASCII,
       FID;
   }

     public static List <String> getFilteredFiles(List <String> filenames, FILTER filter){
        Vector <String> names = new Vector <String>();
         switch (filter){
             case MODEL:
                         for (String name : filenames) {
                             if (name.endsWith(".f")) {names.add(name);}
                             if (name.endsWith(".c")) {names.add(name);}
                        }
                        break;


             case METABOLITE:
                         for (String name : filenames) {
                             if (name.endsWith(".ISO")) {names.add(name);}
                        }
                        break;

             case RESONANCE:
                         for (String name : filenames) {
                             if (name.endsWith(".RES")) {names.add(name);}
                        }
                        break;

             case SAMPLE_ASCII:
                         for (String name : filenames) {
                             if (name.endsWith(".dat")) {names.add(name);}
                             if (name.endsWith(".data")) {names.add(name);}
                        }
                        break;
             case FID:
                         for (String name : filenames) {
                             if (name.endsWith("fid")) {names.add(name);}
                        }
                        break;



        }
         return names;
    }



   
    public  static String  filename                =    null;
    public  static JFrame parent ;
    private static JRemoteFileChooser  instance    =    null;
    public  static  boolean  showFullUrl           =    false;






    public static JRemoteFileChooser  getInstance () {
        if ( instance == null ) {
            instance = new JRemoteFileChooser(parent, true);
            
        }
        return instance;
    }
    public static void reset () {
         if (instance == null) {return;}
         
         instance. close();
         instance = null;
    }
    
    /** Creates new form JRemoteFileChooser */
    private JRemoteFileChooser(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane = new javax.swing.JScrollPane();
        file_list = new javax.swing.JList();
        server_lbl = new javax.swing.JLabel();
        cancel_btn = new javax.swing.JButton();
        ok_btn = new javax.swing.JButton();

        FormListener formListener = new FormListener();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("CHOOSE FILE ON REMOTE SERVER"); // NOI18N
        setLocationByPlatform(true);

        jScrollPane.setName("jScrollPane"); // NOI18N
        jScrollPane.addComponentListener(formListener);

        file_list.setFont(new java.awt.Font("Lucida Grande", 0, 14));
        file_list.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        file_list.setDragEnabled(true);
        file_list.setLayoutOrientation(javax.swing.JList.VERTICAL_WRAP);
        file_list.setName("file_list"); // NOI18N
        file_list.setVisibleRowCount(10);
        file_list.addMouseListener(formListener);
        jScrollPane.setViewportView(file_list);

        server_lbl.setFont(new java.awt.Font("Academy Engraved LET", 1, 18));
        server_lbl.setName("server_lbl"); // NOI18N

        cancel_btn.setText("CANCEL");
        cancel_btn.setName("cancel_btn"); // NOI18N
        cancel_btn.addActionListener(formListener);

        ok_btn.setText("OK");
        ok_btn.setName("ok_btn"); // NOI18N
        ok_btn.addActionListener(formListener);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(20, 20, 20)
                        .add(server_lbl, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE)
                            .add(layout.createSequentialGroup()
                                .add(cancel_btn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 91, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(ok_btn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 87, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(server_lbl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cancel_btn)
                    .add(ok_btn))
                .add(17, 17, 17))
        );

        layout.linkSize(new java.awt.Component[] {cancel_btn, ok_btn}, org.jdesktop.layout.GroupLayout.VERTICAL);

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.ComponentListener, java.awt.event.MouseListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == cancel_btn) {
                JRemoteFileChooser.this.cancel_btnActionPerformed(evt);
            }
            else if (evt.getSource() == ok_btn) {
                JRemoteFileChooser.this.ok_btnActionPerformed(evt);
            }
        }

        public void componentHidden(java.awt.event.ComponentEvent evt) {
        }

        public void componentMoved(java.awt.event.ComponentEvent evt) {
        }

        public void componentResized(java.awt.event.ComponentEvent evt) {
            if (evt.getSource() == jScrollPane) {
                JRemoteFileChooser.this.jScrollPaneComponentResized(evt);
            }
        }

        public void componentShown(java.awt.event.ComponentEvent evt) {
        }

        public void mouseClicked(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == file_list) {
                JRemoteFileChooser.this.file_listMouseClicked(evt);
            }
        }

        public void mouseEntered(java.awt.event.MouseEvent evt) {
        }

        public void mouseExited(java.awt.event.MouseEvent evt) {
        }

        public void mousePressed(java.awt.event.MouseEvent evt) {
        }

        public void mouseReleased(java.awt.event.MouseEvent evt) {
        }
    }// </editor-fold>//GEN-END:initComponents

private void ok_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ok_btnActionPerformed
    filename = findSelectedFile();
    close();
}//GEN-LAST:event_ok_btnActionPerformed

private void cancel_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel_btnActionPerformed
    close();
}//GEN-LAST:event_cancel_btnActionPerformed

private void file_listMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_file_listMouseClicked
    if (evt.getClickCount()> 1){
        filename = findSelectedFile();
        close();
    }
}//GEN-LAST:event_file_listMouseClicked

private void jScrollPaneComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jScrollPaneComponentResized
    if (getFileList()!= null){
     double cellHeight      = getFileList().getCellBounds(0,0).height;
     double cellWidth       = getFileList().getCellBounds(0,0).width;
     double listHeight      = getJScrollPane().getSize().height;
     double listWidth       = getJScrollPane().getSize().width;
     
     int numCol             = (int)Math.ceil(listWidth/cellWidth);
     int numRow             = (int)Math.ceil(listHeight/cellHeight);
     
    
        getFileList().setVisibleRowCount(numRow-1);
    }
}//GEN-LAST:event_jScrollPaneComponentResized

    private String findSelectedFile(){
        filename = null;
        boolean isNothingSelected = getFileList().isSelectionEmpty();
        if ( isNothingSelected == true) {
                // JOptionPane.showMessageDialog(new JFrame(),
               //  "No file was selected", "Message", JOptionPane.WARNING_MESSAGE);
                return null;
        }
        else {

            filename  = (String)getFileList().getSelectedValue();
        }
         return filename;
    }   
    public static boolean downloadFile (  String remoteFile, File localFile)throws SocketTimeoutException, FileNotFoundException{
      boolean isDownloaded          =   false;
      URL  url;
      OutputStream out              =   null;
      URLConnection conn            =   null;
      InputStream  in               =   null;
        System.out.println("Downloading remote file " + remoteFile);
      try {
            url                     =   new URL(remoteFile);
            out                     =   new BufferedOutputStream(new FileOutputStream(localFile));
            conn                    =   url.openConnection();

            conn.setConnectTimeout(1000);
            conn.setReadTimeout(1000*5);

            in                      =   conn.getInputStream();

           

            byte[] buffer           =   new byte[4096];
            
            int numRead;
            long numWritten     = 0;
            while ((numRead     = in.read(buffer)) != -1) {
                    out.write(buffer, 0, numRead);
                    numWritten += numRead;
            }
            isDownloaded = true;
            }
            catch (SocketTimeoutException exception) {
                 exception.printStackTrace();
                 throw new SocketTimeoutException( exception.getMessage());
            }
            catch (FileNotFoundException exception) {
                 exception.printStackTrace();
                 throw new FileNotFoundException( exception.getMessage());
	    } catch (Exception exception) {
                isDownloaded = false;
                exception.printStackTrace();

			
            } finally {
                try {
                    if (in != null) {in.close(); }
                    if (out != null) {out.close();}
                } catch (IOException ioe) {}
            }
            
            
       return isDownloaded ;
     }





   
   
    public static  JRemoteFileChooser callRemoteFileChooser(String url, String dir , String user, String password,FILTER filter) throws FileNotFoundException{
             filename                       =   null;


             List<String> names             =  DoCGI.getFileListing(url, dir, user, password);
             
             // error accessing files occurs
             if (names == null)        {
                  filename                    =   null;
                 return getInstance();
             }

             names                      =  getFilteredFiles(names, filter);


             if (parent == null) {parent  = new JFrame();}
             JRemoteFileChooser dialog = JRemoteFileChooser.getInstance ();
            
             String text = "URL "+ url+  dir;

             dialog.getFileList().setListData(  (Vector<String>)names);
             dialog.getServerLabel().setText(text);
             dialog.setVisible(true);
             return dialog;
    }
    public static  JRemoteFileChooser callRemoteFileChooserSysModel(String url,  String pathToDir, String user, String password)
                                            throws FileNotFoundException{
        return callRemoteFileChooser(url,pathToDir, user, password, FILTER.MODEL );
    }
    public static  JRemoteFileChooser callRemoteFileChooserResonances(String url, String pathToDir,String user, String password)
                                            throws FileNotFoundException{
        return callRemoteFileChooser(url, pathToDir  , user, password, FILTER.RESONANCE );
    }
    public static  JRemoteFileChooser callRemoteFileChooserMetabolites(String url, String pathToDir, String user, String password)
                                            throws FileNotFoundException{
        return callRemoteFileChooser(url,pathToDir   , user, password, FILTER.METABOLITE );
    }


    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        /*
        try {
            callRemoteFileChooserMetabolites("http://bayes.wustl.edu:8080/", null, null);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(JRemoteFileChooser.class.getName()).log(Level.SEVERE, null, ex);
        }
         * \
         */
    }
    public void close(){
       setVisible(false);
       dispose();
      parent.dispose();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancel_btn;
    private javax.swing.JList file_list;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JButton ok_btn;
    private javax.swing.JLabel server_lbl;
    // End of variables declaration//GEN-END:variables
    public javax.swing.JButton  getCancelButton () {
        return cancel_btn;
    }
    public javax.swing.JList    getFileList () {
        return file_list;
    }
    public javax.swing.JButton  getOkButton () {
        return ok_btn;
    }
    public javax.swing.JLabel   getServerLabel () {
        return server_lbl;
    }
    public javax.swing.JScrollPane getJScrollPane () {
        return jScrollPane;
    }


  

 
    public void setLocation(String location){
        getServerLabel().setText(location);
    }
}
