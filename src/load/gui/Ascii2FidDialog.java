/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JFIDandProcparWriter.java
 *
 * Created on Mar 12, 2009, 11:01:20 AM
 */

package load.gui;
import bayes.DirectoryManager;
import load.*;
import fid.*;
import java.awt.*;
import utilities.*;
import javax.swing.*;
import java.io.File;
import java.util.regex.*;
import java.util.*;
import java.util.List;
/**
/**
 *
 * @author apple
 */
public class Ascii2FidDialog extends javax.swing.JDialog {
    private static   Ascii2FidDialog   instance           =   null;
    private boolean canceled                              =   false;
    private boolean arrayed                               =   false;
    protected int numberOfArrayed                         =   0;
    private  Ascii2FidConverter converter                 =   new Ascii2FidConverter ();

    private  Ascii2FidDialog (java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    private static  Ascii2FidDialog  getInstance( ) {
      if(instance == null) {
         instance = new Ascii2FidDialog (null, true);
      }

      return instance;
   }
    public static   Ascii2FidDialog  showDialog(Ascii2FidConverter converter  ){
       Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
       int x                =    screenSize.width/2- 200;
       int y                =    screenSize.height/2- 200;

       return showDialog(converter, x,y);

    }
    public static   Ascii2FidDialog  showDialog(Ascii2FidConverter converter, int x, int y ){
        //update settings

         // be default values are not active unless "set" button is pressed
         getInstance().setCanceled(true);


         // assign converter
         getInstance().setConverter(converter);

         // reset parameters
          getInstance().setNumberOfArrayed(0);
          getInstance().setArrayed(false);

         int numLines       = converter.getNumberOfLinesInFile();
         getInstance().getLineInFileTextField().setValue(numLines);

         getInstance(). setEstimatedArraydim();

         getInstance().setArrayedGUI();


         // show Preferences
        getInstance( ).setLocation(new java.awt.Point(x,y));
        getInstance( ).setVisible(true);

       return instance;
    }
    public          Ascii2FidDialog  hideDialog( ){
                    setVisible(false);
       return instance;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        atTextField = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        nComplexTextField = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        sfrqTextField = new javax.swing.JFormattedTextField();
        jLabel6 = new javax.swing.JLabel();
        lineInFileTextField = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        estimatedArrayDimTextField = new javax.swing.JFormattedTextField();
        cancelButton = new javax.swing.JButton();
        setButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        arrayDimLabel = new javax.swing.JLabel();
        arrayDimTextField = new javax.swing.JFormattedTextField();
        loadArrayedParamsButton = new javax.swing.JButton();
        arrayParam1Label = new javax.swing.JLabel();
        arrayParam1TextField = new javax.swing.JTextField();
        arrayParam2Label = new javax.swing.JLabel();
        arrayParam2TextField = new javax.swing.JTextField();
        arrayParam3Label = new javax.swing.JLabel();
        arrayParam3TextField = new javax.swing.JTextField();
        arrayedParamsLabel = new javax.swing.JLabel();
        arrayParamsTextField = new javax.swing.JFormattedTextField();

        FormListener formListener = new FormListener();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("FID Parameters"); // NOI18N
        setModal(true);
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.lightGray, null), "General Parameters"));
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(new java.awt.GridBagLayout());

        atTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.###############"))));
        atTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        atTextField.setToolTipText("<html>Acquisition time in seconds.<br>\n Equivalent to procpar parameter \"at\".</html>"); // NOI18N
        atTextField.setInputVerifier(new utilities.PositiveFloatInputVerifier());
        atTextField.setName("atTextField"); // NOI18N
        atTextField.setValue(new Integer(1));
        atTextField.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(atTextField, gridBagConstraints);

        jLabel2.setText("Acquisition time in seconds (at)");
        jLabel2.setName("jLabel2"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Number of complex data points (np/2)");
        jLabel3.setName("jLabel3"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jLabel3, gridBagConstraints);

        nComplexTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0"))));
        nComplexTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        nComplexTextField.setToolTipText("<html>Number of complex data points in the fid trace.<br>\nIt is equivalent to procpar parameter  \"np\" value divided by 2.</html>"); // NOI18N
        nComplexTextField.setInputVerifier(new utilities.PositiveIntegerInputVerifier());
        nComplexTextField.setName("nComplexTextField"); // NOI18N
        nComplexTextField.setValue(new Integer(1));
        nComplexTextField.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(nComplexTextField, gridBagConstraints);

        jLabel5.setText("Spectrometer frequency in MHz (sfrq)");
        jLabel5.setName("jLabel5"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jLabel5, gridBagConstraints);

        sfrqTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.###############"))));
        sfrqTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        sfrqTextField.setToolTipText("<html>Spectrometer frequency in megahertz.<br> Equivalent to procpar parameter \"sfrq\".</html>"); // NOI18N
        sfrqTextField.setInputVerifier(new utilities.PositiveFloatInputVerifier());
        sfrqTextField.setName("sfrqTextField"); // NOI18N
        sfrqTextField.setValue(new Integer(1));
        sfrqTextField.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(sfrqTextField, gridBagConstraints);

        jLabel6.setText("Number of lines in the file");
        jLabel6.setName("jLabel6"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jLabel6, gridBagConstraints);

        lineInFileTextField.setEditable(false);
        lineInFileTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0"))));
        lineInFileTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        lineInFileTextField.setToolTipText("Number of lines in the file."); // NOI18N
        lineInFileTextField.setName("lineInFileTextField"); // NOI18N
        lineInFileTextField.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(lineInFileTextField, gridBagConstraints);

        jLabel7.setText("Estimated Array Dimension");
        jLabel7.setName("jLabel7"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jLabel7, gridBagConstraints);

        estimatedArrayDimTextField.setEditable(false);
        estimatedArrayDimTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.###"))));
        estimatedArrayDimTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        estimatedArrayDimTextField.setToolTipText("<html>Estimated array dimension based <br>on number of lines in the file <br>and number of complex data points.</html>"); // NOI18N
        estimatedArrayDimTextField.setName("estimatedArrayDimTextField"); // NOI18N
        estimatedArrayDimTextField.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(estimatedArrayDimTextField, gridBagConstraints);

        cancelButton.setText("CANCEL");
        cancelButton.setName("cancelButton"); // NOI18N
        cancelButton.setOpaque(true);
        cancelButton.addActionListener(formListener);

        setButton.setText("LOAD");
        setButton.setName("setButton"); // NOI18N
        setButton.setOpaque(true);
        setButton.addActionListener(formListener);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.lightGray, null), "Array Parameters"));
        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setLayout(new java.awt.GridBagLayout());

        arrayDimLabel.setText("Array Dimension");
        arrayDimLabel.setName("arrayDimLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(arrayDimLabel, gridBagConstraints);

        arrayDimTextField.setEditable(false);
        arrayDimTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        arrayDimTextField.setToolTipText("Array dimension. Equivalent to procpar parameter \"araydim\"."); // NOI18N
        arrayDimTextField.setInputVerifier(new utilities.PositiveIntegerInputVerifier());
        arrayDimTextField.setName("arrayDimTextField"); // NOI18N
        arrayDimTextField.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(arrayDimTextField, gridBagConstraints);

        loadArrayedParamsButton.setText("Load Arrayed Values");
        loadArrayedParamsButton.setToolTipText("Load text file with values for arrayed parameters."); // NOI18N
        loadArrayedParamsButton.setName("loadArrayedParamsButton"); // NOI18N
        loadArrayedParamsButton.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(loadArrayedParamsButton, gridBagConstraints);

        arrayParam1Label.setText("Arrayed Parameter 1");
        arrayParam1Label.setName("arrayParam1Label"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(arrayParam1Label, gridBagConstraints);

        arrayParam1TextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        arrayParam1TextField.setToolTipText("First arrayed parameter."); // NOI18N
        arrayParam1TextField.setName("arrayParam1TextField"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(arrayParam1TextField, gridBagConstraints);

        arrayParam2Label.setText("Arrayed Parameter 2");
        arrayParam2Label.setName("arrayParam2Label"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(arrayParam2Label, gridBagConstraints);

        arrayParam2TextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        arrayParam2TextField.setToolTipText("Second arrayed parameter."); // NOI18N
        arrayParam2TextField.setName("arrayParam2TextField"); // NOI18N
        arrayParam2TextField.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(arrayParam2TextField, gridBagConstraints);

        arrayParam3Label.setText("Arrayed Parameter 3");
        arrayParam3Label.setName("arrayParam3Label"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(arrayParam3Label, gridBagConstraints);

        arrayParam3TextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        arrayParam3TextField.setToolTipText("Third arrayed parameter."); // NOI18N
        arrayParam3TextField.setName("arrayParam3TextField"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(arrayParam3TextField, gridBagConstraints);

        arrayedParamsLabel.setText("Number of arrayed parameters");
        arrayedParamsLabel.setName("arrayedParamsLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(arrayedParamsLabel, gridBagConstraints);

        arrayParamsTextField.setEditable(false);
        arrayParamsTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        arrayParamsTextField.setToolTipText("Number of arrayed parameters."); // NOI18N
        arrayParamsTextField.setInputVerifier(new utilities.PositiveIntegerInputVerifier());
        arrayParamsTextField.setName("arrayParamsTextField"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(arrayParamsTextField, gridBagConstraints);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .addContainerGap(245, Short.MAX_VALUE)
                        .add(cancelButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 111, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(setButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 111, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 196, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(setButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cancelButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.beans.PropertyChangeListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == cancelButton) {
                Ascii2FidDialog.this.cancelButtonActionPerformed(evt);
            }
            else if (evt.getSource() == setButton) {
                Ascii2FidDialog.this.setButtonActionPerformed(evt);
            }
            else if (evt.getSource() == arrayDimTextField) {
                Ascii2FidDialog.this.arrayDimTextFieldActionPerformed(evt);
            }
            else if (evt.getSource() == loadArrayedParamsButton) {
                Ascii2FidDialog.this.loadArrayedParamsButtonActionPerformed(evt);
            }
            else if (evt.getSource() == arrayParam2TextField) {
                Ascii2FidDialog.this.arrayParam2TextFieldActionPerformed(evt);
            }
        }

        public void propertyChange(java.beans.PropertyChangeEvent evt) {
            if (evt.getSource() == atTextField) {
                Ascii2FidDialog.this.procparPropertyChangeEvent(evt);
            }
            else if (evt.getSource() == nComplexTextField) {
                Ascii2FidDialog.this.nComplexTextFieldPropertyChange(evt);
            }
            else if (evt.getSource() == sfrqTextField) {
                Ascii2FidDialog.this.procparPropertyChangeEvent(evt);
            }
            else if (evt.getSource() == lineInFileTextField) {
                Ascii2FidDialog.this.lineInFileTextFieldprocparPropertyChangeEvent(evt);
            }
            else if (evt.getSource() == estimatedArrayDimTextField) {
                Ascii2FidDialog.this.estimatedArrayDimTextFieldprocparPropertyChangeEvent(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        hideDialog ( );
}//GEN-LAST:event_cancelButtonActionPerformed
    private void setButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setButtonActionPerformed
        boolean isDone = writeFiles();

        if (isDone){
             hideDialog ( );
        }
       
}//GEN-LAST:event_setButtonActionPerformed
    private void arrayParam2TextFieldActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arrayParam2TextFieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_arrayParam2TextFieldActionPerformed
    private void arrayDimTextFieldActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arrayDimTextFieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_arrayDimTextFieldActionPerformed
    private void loadArrayedParamsButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadArrayedParamsButtonActionPerformed
       loadArrayedParameters();
}//GEN-LAST:event_loadArrayedParamsButtonActionPerformed
    private void procparPropertyChangeEvent (java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_procparPropertyChangeEvent
        if (evt.getPropertyName().equalsIgnoreCase("value") == false ){return;}
          
    }//GEN-LAST:event_procparPropertyChangeEvent
    private void lineInFileTextFieldprocparPropertyChangeEvent (java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_lineInFileTextFieldprocparPropertyChangeEvent
        // TODO add your handling code here:
}//GEN-LAST:event_lineInFileTextFieldprocparPropertyChangeEvent
    private void estimatedArrayDimTextFieldprocparPropertyChangeEvent (java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_estimatedArrayDimTextFieldprocparPropertyChangeEvent
        // TODO add your handling code here:
}//GEN-LAST:event_estimatedArrayDimTextFieldprocparPropertyChangeEvent
    private void nComplexTextFieldPropertyChange (java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_nComplexTextFieldPropertyChange
       setEstimatedArraydim();
    }//GEN-LAST:event_nComplexTextFieldPropertyChange

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Ascii2FidDialog dialog = showDialog( new  Ascii2FidConverter()  );
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }


    public void loadArrayedParameters(){

        JFileChooser fc             = new JFileChooser ();
        fc.setMultiSelectionEnabled (false);
        fc.setFileSelectionMode (JFileChooser.FILES_ONLY);
        fc.setCurrentDirectory(DirectoryManager.startDir);
        fc.setDialogTitle("Choose Arrayed Parameters Text File");
        int returnVal               =   fc.showOpenDialog (fc);
        if (returnVal              !=   JFileChooser.APPROVE_OPTION) { return;}
        DirectoryManager.startDir   =   fc.getCurrentDirectory();
        File src                    =   fc.getSelectedFile ();
        String  content             =   IO.readFileToString(src);
        Pattern p                   =   Pattern.compile("\\s+");
        String regex                =   p.pattern();

        int linecount               =   IO.countNumberOfLines(content);
        int parametercount          =   1;
        Scanner scanner             =    new Scanner(content);

        if(scanner.hasNextLine() == false) {return;}
        String  line                =    scanner.nextLine().trim();
        String [] tmp               =    line.split( regex);
        scanner.close();

        if (tmp == null)  {return;}

        parametercount              =   tmp.length;
        String [][] arrayValues     =   new String [ parametercount ][linecount] ;

        /* populate arrays */
        scanner             =    new Scanner(content);
        
        int coutnLine           =   0;
        String errMessage       =   null;

        while(scanner.hasNextLine()){
            line                =    scanner.nextLine();
            coutnLine           =    coutnLine + 1;
            tmp                 =    line.trim().split( regex);
            if (tmp.length == 0 ||tmp.length != parametercount ){
                errMessage = String.format("Error when parsing abscissa file.\n"
                                           +"Line number %d is not valid.\n"
                                           +"Line content is \n"
                                           + "\" %s \"",  coutnLine, line );
                break;
            }

            int curCol          =    coutnLine - 1;
            for (int curParam = 0; curParam < parametercount ; curParam++) {
                arrayValues[curParam][curCol] =   tmp[curParam];
            }

          
        }

        if(errMessage != null){

            DisplayText.popupMessage(errMessage);
            return;
        }
       
        
       setArrayed(true);
       setArraydimFromAbscissa(linecount);
       getConverter().setAbscissaValues(arrayValues);
       setNumberOfArrayed( parametercount);
       setArrayedGUI();
    }

    public boolean writeFiles(){
        boolean  isSuccess  =   recalculate();
        if(isSuccess == false) {
            setCanceled(true);
        }
        else{
            setCanceled(false);
        }

        return isSuccess;

       
    }

    public boolean  recalculate(){
        String errorMessage         =   "";
        Number number               =   null;
        int ncomplex                =   0;
        float at                    =   0;
        float sfrq                  =   0;
        List <String>  arrayedNames =   new  ArrayList <String>() ;



        // make sure np has been set
         number           =  (Number)getNComplexTextField ().getValue();
        if (number == null){
            errorMessage = "Error - Parameter \"np\" was not set.\nExiting...";
            DisplayText.popupMessage(errorMessage);
            return false;

        }
        else{ ncomplex  =  number.intValue(); }
            
        // make sure at has been set
        number           =  (Number)getAtTextField ().getValue();
        if (number == null){
            errorMessage = "Error - Parameter \"at\" was not set.\nExiting...";
            DisplayText.popupMessage(errorMessage);
            return false;

        }
        else { at =  number.floatValue(); }
            
        // make sure sfrq has been set
        number           =  (Number)getSfrqTextField ().getValue();
        if (number == null){
            errorMessage = "Error - Parameter \"sfrq\" was not set.\nExiting...";
            DisplayText.popupMessage(errorMessage);
            return false;
        }
        else {sfrq  =  number.floatValue();}
             
        
        // make sure that arraydim is integer
        double estArraydim          =    getEstimatedArraydim();
        if (Math.floor(estArraydim) != estArraydim){
            errorMessage = String.format("Estimated array dimension %f\n" +
                                         "is not an integer number.\n" +
                                          "Exiting...",
                                          estArraydim) ;
            DisplayText.popupMessage(errorMessage);
            return false;

        }

        if (getEstimatedArraydim() > 1 && isArrayed() == false){
            errorMessage = String.format(   "Data is arrayed\n" +
                                            "(estimated arraydim = %f)\n" +
                                            "but abscissa is not loaded.\n" +
                                            "Exiting...",
                                          estArraydim) ;
            DisplayText.popupMessage(errorMessage);
            return false;

        }

       
        if (isArrayed()){

            // make sure that arrayeParameters names were typed and are valid
            arrayedNames =  getArrayedParamsNames();

            boolean validNames  =   checkParametersName(arrayedNames );
            if (validNames == false){return false;}


            // make sure that abscissa dimension and number of traces in fid
            // are identical
            int arraydimFromAbscissa    =    getArraydimFromAbscissa();
            estArraydim                 =    getEstimatedArraydim();
            if ( estArraydim - arraydimFromAbscissa != 0){
                errorMessage = String.format("Number of lines in abscissa file %d\n" +
                                             "is different from estimated array dim %f\n" +
                                              "Exiting...",
                                              arraydimFromAbscissa ,
                                              estArraydim) ;
                DisplayText.popupMessage(errorMessage);
                return false;

            }
        }

        getProcpar().updateProcpar(at, sfrq, 2*ncomplex);
       

        if (isArrayed() == false){
              getProcpar().setArrayValues(null);
              getProcpar().getArray().clear();
        }
        else {
             getProcpar().setArraydim( (int)getEstimatedArraydim());
             getProcpar().setArray( arrayedNames);
             getProcpar().setArrayValues(getConverter().getAbscissaValues());
        }
        return true;
    }


    public boolean  checkParametersName(List<String> names){
        boolean isValid =   false;

          for (int i = 0; i < names.size(); i++) {
            String name             =  names.get(i);

            // check for spaces and so in the names
            isValid                 =   isContainsNonWordCharacter(name);
            if (isValid == false)    {
                int guiIndex        =   i+ 1;
                String message = String.format("Arrayed parameter number %d has invalid name.\n" +
                        "Parameter name must not contain non-word character.",guiIndex );
                DisplayText.popupMessage(message);
                return false;
            }


            // check that the parameter is a not a string parameter in procpar
            // and is not the one that being overwritten by this  appliaction
            isValid                 = isNotAllowedParameterName(name);
            if (isValid == false)    {
                String message = String.format("Procpar parameter %s \n can not be arrayed.",name );
                DisplayText.popupMessage(message);
                return false;
            }
        }


       return true;
    }
    public boolean   isContainsNonWordCharacter(String name){
        if (name == null || name.length() == 0) {return false;}
        Pattern p                   =   Pattern.compile("\\W");
        Matcher matcher             =   p.matcher(name);
        if(matcher.find() == true) {return false;}

        return true;
    }
    public boolean   isNotAllowedParameterName(String name){
        ProcparFileWriterForFid  writer         = new    ProcparFileWriterForFid ();
        boolean isStringparameter           = writer.isStringParameterInProcpar(name);
        if(isStringparameter ) {return false;}
        return true;
    }

    private  List <String> getArrayedParamsNames(){
        java.util.List<String> names = new ArrayList<String>();
        int n                           =   getNumberOfArrayed();
        switch (n){
            case 1  :  names.add( getArrayParam1TextField().getText().trim());break;
            case 2  :  names.add( getArrayParam2TextField().getText().trim());break;
            case 3  :  names.add( getArrayParam3TextField().getText().trim());break;
            default :  break;
        }

        return names ;

    }


    public int getArraydimFromAbscissa(){
        Number n = (Number) getArrayDimTextField ().getValue();
        return n.intValue();
    }
    public void  setArraydimFromAbscissa(int val){
        getArrayDimTextField ().setValue(val);
    }

    public double getEstimatedArraydim(){
        Number n = (Number)getEstimatedArrayDimTextField().getValue();
        return n.doubleValue();
    }
    public void   setEstimatedArraydim(){
        int nLines          =   getConverter().getNumberOfLinesInFile();
        double nComplex     =   ((Number)getNComplexTextField ().getValue()).doubleValue();
        double aDim         =   nLines/nComplex;
        getEstimatedArrayDimTextField().setValue(aDim);
    }

    public void setArrayedGUI(){
        getArrayParamsTextField ().setValue(  getNumberOfArrayed());

        if(this.isArrayed() == false){
            settArrayedGUIActive(false);
            getArrayParamsTextField ().setText("");
        }
        else{
            settArrayedGUIActive(true);
            int abscissaArraydim        =    getArraydimFromAbscissa();
            double estArraydim          =    getEstimatedArraydim();

            if ( estArraydim - abscissaArraydim != 0){
                     getArrayDimTextField ().setForeground(Color.RED);
            }
            else{
                    getArrayDimTextField ().setForeground(Color.BLACK);
            }



            if (getNumberOfArrayed() == 1){
                getArrayParam2Label ().setEnabled(false);
                getArrayParam2TextField ().setEnabled(false);

                getArrayParam3Label () .setEnabled(false);
                getArrayParam3TextField () .setEnabled(false);
            }
            else if  (this.getNumberOfArrayed() == 2){
                getArrayParam3Label () .setEnabled(false);
                getArrayParam3TextField () .setEnabled(false);
            }
            else if  (this.getNumberOfArrayed() == 3){
            }
        }

    }
    private void settArrayedGUIActive(boolean enabled){

            getArrayDimLabel ().setEnabled(enabled);
            getArrayDimTextField ().setEnabled(enabled);

            getArrayParamsTextField () .setEnabled(enabled);
            getArrayedParamsLabel ().setEnabled(enabled);

            getArrayParam1Label ().setEnabled(enabled);
            getArrayParam1TextField ().setEnabled(enabled);

            getArrayParam2Label ().setEnabled(enabled);
            getArrayParam2TextField ().setEnabled(enabled);

            getArrayParam3Label () .setEnabled(enabled);
            getArrayParam3TextField () .setEnabled(enabled);

            if (enabled == false){
                clearArrayedGUI();
            }
    }
    private void clearArrayedGUI(){
            getArrayDimTextField ().setText("");
            getArrayParamsTextField () .setText("");
            getArrayParam1TextField ().setText("");
            getArrayParam2TextField ().setText("");
            getArrayParam3TextField ().setText("");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel arrayDimLabel;
    private javax.swing.JFormattedTextField arrayDimTextField;
    private javax.swing.JLabel arrayParam1Label;
    private javax.swing.JTextField arrayParam1TextField;
    private javax.swing.JLabel arrayParam2Label;
    private javax.swing.JTextField arrayParam2TextField;
    private javax.swing.JLabel arrayParam3Label;
    private javax.swing.JTextField arrayParam3TextField;
    private javax.swing.JFormattedTextField arrayParamsTextField;
    private javax.swing.JLabel arrayedParamsLabel;
    private javax.swing.JFormattedTextField atTextField;
    private javax.swing.JButton cancelButton;
    private javax.swing.JFormattedTextField estimatedArrayDimTextField;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JFormattedTextField lineInFileTextField;
    private javax.swing.JButton loadArrayedParamsButton;
    private javax.swing.JFormattedTextField nComplexTextField;
    private javax.swing.JButton setButton;
    private javax.swing.JFormattedTextField sfrqTextField;
    // End of variables declaration//GEN-END:variables
    public javax.swing.JFormattedTextField getAtTextField () {
        return atTextField;
    }
    public javax.swing.JFormattedTextField getNComplexTextField () {
        return nComplexTextField;
    }
    public javax.swing.JFormattedTextField getSfrqTextField () {
        return sfrqTextField;
    }

    public javax.swing.JLabel getArrayDimLabel () {
        return arrayDimLabel;
    }
    public javax.swing.JFormattedTextField getArrayDimTextField () {
        return arrayDimTextField;
    }
    public javax.swing.JLabel getArrayParam1Label () {
        return arrayParam1Label;
    }
    public javax.swing.JTextField getArrayParam1TextField () {
        return arrayParam1TextField;
    }
    public javax.swing.JTextField getArrayParam2TextField () {
        return arrayParam2TextField;
    }
    public javax.swing.JLabel getArrayParam3Label () {
        return arrayParam3Label;
    }
    public javax.swing.JLabel getArrayParam2Label () {
        return arrayParam2Label;
    }
    public javax.swing.JTextField getArrayParam3TextField () {
        return arrayParam3TextField;
    }
    public javax.swing.JFormattedTextField getArrayParamsTextField () {
        return arrayParamsTextField;
    }
    public javax.swing.JLabel getArrayedParamsLabel () {
        return arrayedParamsLabel;
    }
    public javax.swing.JFormattedTextField getEstimatedArrayDimTextField () {
        return estimatedArrayDimTextField;
    }
    public javax.swing.JFormattedTextField getLineInFileTextField () {
        return lineInFileTextField;
    }


    public boolean isCanceled () {
        return canceled;
    }
    public void setCanceled ( boolean canceled ) {
        this.canceled = canceled;
    }


    public boolean isArrayed () {
        return arrayed;
    }
    public void setArrayed ( boolean arrayed ) {
        this.arrayed = arrayed;
    }

    public int getNumberOfArrayed () {
        return numberOfArrayed;
    }
    public void setNumberOfArrayed ( int numberOfArrayed ) {
        this.numberOfArrayed = numberOfArrayed;
    }

    public static boolean isDialogCanceled () {
        return getInstance().isCanceled();
    }

    public Ascii2FidConverter getConverter () {
        return converter;
    }
    public void setConverter ( Ascii2FidConverter converter ) {
        this.converter = converter;
    }


    public Procpar getProcpar(){
        return this.getConverter().getProcpar();
    }
  
   /*
    * Note
    *
    * Set FN to 2^N from np
    * lp = 0;
    * rp = 0;
    * sw = np/2/at
    * rfl = 0
    * rfp = 0
    *
    *fpmult=1
    * arraydim = size of abscissa // not editable
    *
    * array 2 2 256 0 0 2 1 1!!!!!! 0!!!!! 64  - make sure that ths bit is set correctly
    *
    */



        class IntToBoolean1  extends org.jdesktop.beansbinding.Converter < Integer, Boolean >{
        public Boolean convertForward(Integer value) {
             if( value >= 1){return true;}
             else {return false;}

        }
        public Integer convertReverse(Boolean bool) {
           return 0;
        }
     }
        class IntToBoolean2  extends org.jdesktop.beansbinding.Converter < Integer, Boolean >{
        public Boolean convertForward(Integer value) {
             if( value >= 2){return true;}
             else {return false;}

        }
        public Integer convertReverse(Boolean bool) {
           return 0;
        }
     }
        class IntToBoolean3  extends org.jdesktop.beansbinding.Converter < Integer, Boolean >{
        public Boolean convertForward(Integer value) {
             if( value >= 3){return true;}
             else {return false;}

        }
        public Integer convertReverse(Boolean bool) {
           return 0;
        }
     }
}
