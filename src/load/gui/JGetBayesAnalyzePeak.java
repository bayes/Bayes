/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JGetBayesAnalyzePeak.java
 *
 * Created on Feb 4, 2009, 10:05:00 AM
 */

package load.gui;
import java.awt.MouseInfo;
import interfacebeans.AllViewers;
import java.io.File;
import ascii.*;
import javax.swing.*;
import java.util.List;
import fid.FidViewer;
import bayes.DirectoryManager;
import bayes.BayesManager;
import bayes.PackageManager;
import fid.Resonance;
import fid.Procpar;
import applications.model.Model;
import fid.BayesParamsReader;
import java.util.ArrayList;
import fid.AsciiDataFileWriter;
import utilities.DisplayText;
import utilities.IO;
/**
 *
 * @author apple
 */
public class JGetBayesAnalyzePeak extends javax.swing.JDialog {
   private static JGetBayesAnalyzePeak instance ;


    public  static  JGetBayesAnalyzePeak getInstance(){
        if (instance == null){
            instance =  new JGetBayesAnalyzePeak(null, true);
        }
        return instance;

    };
    private JGetBayesAnalyzePeak( java.awt.Frame parent,boolean modal) {
        super(parent, modal);
        initComponents();
    }


    public static JGetBayesAnalyzePeak showDialog(){
        AllViewers.showFidViewer();
        FidViewer viewer =  FidViewer.getInstance();
        
        boolean canproceed   =viewer.isLoaded(); 
        
        try{
             if(canproceed == false ){
                // attempts to load defautl fif
                // viewer.loadDefaultFid();
                 viewer.loadOnEDT();
                 canproceed   =viewer.isLoaded(); 
            } 
        }catch(Exception e){
            e.printStackTrace();
        }
       
        
        if ( canproceed  == false){
            String error    =   "No spectral fid is currently loaded. Exit...";
            DisplayText.popupMessage(error);
            return null;

        }



         JGetBayesAnalyzePeak.getInstance().setLocation(MouseInfo.getPointerInfo().getLocation());
         instance.updateJBayesAnalyze();
         instance.setVisible(true);
        return instance;
    }
    /** Creates new form JGetBayesAnalyzePeak */

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loadFromModel_ScrollPane = new javax.swing.JScrollPane();
        getPeak_TextPane1 = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        peak1_lbl = new javax.swing.JLabel();
        SpinnerModel model = new SpinnerNumberModel(1, 1,  1 ,1);
        peak1_spinner = new JSpinner(model);
        peak2_lbl = new javax.swing.JLabel();
        peak2_spinner = new JSpinner(model);
        close_btn1 = new javax.swing.JButton();
        getPeaks_btn = new javax.swing.JButton();

        FormListener formListener = new FormListener();

        loadFromModel_ScrollPane.setName("loadFromModel_ScrollPane"); // NOI18N

        getPeak_TextPane1.setBackground(new java.awt.Color(245, 244, 244));
        getPeak_TextPane1.setEditable(false);
        getPeak_TextPane1.setFont(new java.awt.Font("Lucida Grande", 1, 18));
        getPeak_TextPane1.setText("To extract Bayes Analyze amplitudes, set the \"First Peak\" number to the amplitudes you wish to extract.\n\nWhen the \"Second Peak\" widget is active, set the peak number of the second peak to extract.\n\nFinally, hit the \"Extract Resonance\" button to extract the amplitudes and plot the resulting files."); // NOI18N
        getPeak_TextPane1.setCaretPosition(0);
        getPeak_TextPane1.setMargin(new java.awt.Insets(10, 10, 10, 10));
        getPeak_TextPane1.setName("getPeak_TextPane1"); // NOI18N
        loadFromModel_ScrollPane.setViewportView(getPeak_TextPane1);

        jLabel1.setFont(new java.awt.Font("Academy Engraved LET", 0, 24));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Loading Data From Bayes Analyze Files");
        jLabel1.setAlignmentX(0.5F);
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jLabel1.setName("jLabel1"); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Load data from Bayes Analyse files"); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Choose Peak"));
        jPanel1.setName("jPanel1"); // NOI18N

        peak1_lbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        peak1_lbl.setText("First Peak");
        peak1_lbl.setName("peak1_lbl"); // NOI18N

        peak1_spinner.setFont(new java.awt.Font("Lucida Grande", 0, 16));
        peak1_spinner.setName("peak1_spinner"); // NOI18N

        peak2_lbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        peak2_lbl.setText("Second Peak");
        peak2_lbl.setName("peak2_lbl"); // NOI18N

        peak2_spinner.setFont(new java.awt.Font("Lucida Grande", 0, 16));
        peak2_spinner.setName("peak2_spinner"); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(peak1_lbl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 112, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(peak2_lbl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 121, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(peak1_spinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 62, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(peak2_spinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 62, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(peak1_lbl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(peak2_lbl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(peak1_spinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(peak2_spinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        close_btn1.setText("Close");
        close_btn1.setName("close_btn1"); // NOI18N
        close_btn1.addActionListener(formListener);

        getPeaks_btn.setText("Extract Resonances");
        getPeaks_btn.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nTo extract Bayes Analyze amplitudes, <br>\nset the \\\"First Peak\\\" number to the amplitudes<br>\nyou wish to extract.<br>\n<br>\nWhen the \\\"Second Peak\\\" <br>\nwidget is active, set the peak number of the second <br>\npeak to extract.<br>\n<br>\nFinally, hit the \\\"Extract Resonances\\\"<br> \nbutton to extract the amplitudes and plot the resulting files.\n\n</font></p><html>\n"); // NOI18N
        getPeaks_btn.setName("getPeaks_btn"); // NOI18N
        getPeaks_btn.addActionListener(formListener);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(close_btn1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(getPeaks_btn, 0, 0, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(8, 8, 8)
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(close_btn1)
                    .add(getPeaks_btn)))
        );

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == close_btn1) {
                JGetBayesAnalyzePeak.this.close_btn1ActionPerformed(evt);
            }
            else if (evt.getSource() == getPeaks_btn) {
                JGetBayesAnalyzePeak.this.getPeaks_btnActionPerformed(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private void close_btn1ActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_close_btn1ActionPerformed
        close ();
}//GEN-LAST:event_close_btn1ActionPerformed
    private void getPeaks_btnActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getPeaks_btnActionPerformed
       FidViewer viewer = FidViewer.getInstance ();
        
        
        boolean isLoaded = viewer.isLoadBayesAnalyze ();
        if (isLoaded ==  false){ return;}

        boolean isJoint  = viewer.isJointAnalysis();
        if (isJoint){
             writeFileAndShowData ();
        }
                
        else if(viewer.isNotJointButAllBy1Analysis() && PackageManager.isMultipleDataColumnsModel() == false) {
             writeNonJointFileAndShowData(    );
        }

        else{
            String error    =   String.format(  "Peaks can only be extracted for\n" +
                                                "data that was analyzed jointly.\n"+
                                                "The current analysis was set as:\n"+
                                                "%s"+
                                                "Abort load.", viewer.getNotJointMessage());
            DisplayText.popupErrorMessage(error );
        }
        

        close ();
}//GEN-LAST:event_getPeaks_btnActionPerformed


    public void updateJBayesAnalyze(){
         FidViewer viewer        = FidViewer.getInstance();

         if (viewer.isLoaded() == false){
            getPeak2Spinner().setEnabled(false);
            peak2_lbl.setEnabled(false);
            peak1_spinner.setEnabled(false);
            peak1_lbl.setEnabled(false);
            return;
         }


        int n                    =  viewer.getParamsReader().getResonances().size();
        if (n > 1){
            SpinnerModel smodel1  = new SpinnerNumberModel(1, 1, n, 1);
            SpinnerModel smodel2  = new SpinnerNumberModel(1, 1, n, 1);
            peak1_spinner.setModel(smodel1);
            getPeak2Spinner().setModel(smodel2);
        }

        Model model                         = PackageManager.getCurrentApplication();
        boolean isMultipleDataColumnsModel  = PackageManager.isMultipleDataColumnsModel();

        if(model == null){
            getPeak2Spinner().setEnabled(false);
            peak2_lbl.setEnabled(false);
            peak1_spinner.setEnabled(false);
            peak1_lbl.setEnabled(false);
        }
        else if ( isMultipleDataColumnsModel == false ) {
            peak1_spinner.setEnabled(true);
            peak1_lbl.setEnabled(true);
            getPeak2Spinner().setEnabled(false);
            peak2_lbl.setEnabled(false);
        }
        else if (isMultipleDataColumnsModel == true){
            peak1_spinner.setEnabled(true);
            peak1_lbl.setEnabled(true);
            getPeak2Spinner().setEnabled(true);
            peak2_lbl.setEnabled(true);
        }

    }
    public  void writeFileAndShowData(    ){
        File file               = DirectoryManager.getNewAsciiFile();
        FidViewer viewer        = FidViewer.getInstance();
        Procpar   procpar       = viewer.getProcpar();
        String [][] abscissa    = procpar.getArrayValues();
        

        int peakA               = getPeakA() - 1 ;
        int peakB               = getPeakB() - 1;
        int numElem             = procpar.getNumberOfElements();
        int nAbs                = abscissa.length;
        boolean isMultipleAbs   = (nAbs >1);
        boolean isMultiplePeaks = PackageManager.isMultipleDataColumnsModel();

        List<Resonance> resonances =  viewer.getParamsReader().getResonances();
        List<Double> data1      =  resonances.get(peakA).getAmplitudes();
        List<Double> data2      =  new ArrayList<Double>();

       
       


       if (isMultiplePeaks == true){   data2 = resonances.get(peakB).getAmplitudes();}
      
        
       


        String content =  AsciiDataFileWriter. getContent (abscissa, data1, data2, isMultiplePeaks,isMultipleAbs  );
        IO.writeFileFromString(content, file);


        StringBuilder sb = new StringBuilder();
        if (isMultiplePeaks){
                sb.append("resonance #"+   getPeakA()+", ");
                sb.append("Resonance #"+ getPeakB()+ BayesManager.EOL);

        }
        else {
            sb.append("Resonance #"+   getPeakA()+ BayesManager.EOL);
        }


        int numOfColumns  = IO.getNumberOfColumns(content);
        writeAsciiDescriptor(  file,numOfColumns,numElem, procpar.getFileSource(), sb.toString());
        AllViewers.showAsciiViewer();
}
    public  void writeNonJointFileAndShowData(    ){
        File file               = DirectoryManager.getNewAsciiFile();
        FidViewer viewer        = FidViewer.getInstance();
        Procpar   procpar       = viewer.getProcpar();
        String [][] abscissa    = procpar.getArrayValues();
        int maxFreq             = viewer.getParamsReader().getMaxFreqs();

        if (maxFreq!= 0){
            String error        = String.format("For non-joint analysis to extract a resonance\n" +
                                                "amplitude data, analysis must be run by marking\n" +
                                                "a single resonance and setting number of maximum\n" +
                                                "resonances to 0" );

            DisplayText.popupErrorMessage(error);
            return;
        }

        int numElem             = procpar.getNumberOfElements();



        String content                 = null;
        content                        =  AsciiDataFileWriter.writeNonJointData(abscissa );
        


        if (content == null){return;}
        
        IO.writeFileFromString(content, file);
        StringBuilder sb = new StringBuilder();



        sb.append("Resonance #"+   getPeakA()+ BayesManager.EOL);
        int numOfColumns            = IO.getNumberOfColumns(content);
        writeAsciiDescriptor(  file,numOfColumns,numElem, procpar.getFileSource(), sb.toString());
        AllViewers.showAsciiViewer();
}

    public  void writeFileAndShowDataForAllTRaces(    ){
        File dir                = DirectoryManager.getBayesOtherAnalysisDir();
        File file               = DirectoryManager.getNewAsciiFile(dir);
        FidViewer viewer        = FidViewer.getInstance();
        Procpar   procpar       = viewer.getProcpar();
        float [][] abscissa     = procpar.getAbscissa();

        int peakA               = getPeakA() - 1 ;
        int peakB               = getPeakB() - 1;
        int numElem             = procpar.getNumberOfElements();
        int numOfTraces         = viewer.getNumberOfTraces();
        int nAbs                = abscissa.length;
        boolean isMultipleAbs   = (nAbs >1);
        boolean isMultiplePeaks = PackageManager.isMultipleDataColumnsModel();


        List<Resonance> resonances =  viewer.getParamsReader().getResonances();
        List<Double> data1      =  resonances.get(peakA).getAmplitudes();
        List<Double> data2      =  new ArrayList<Double>();

       
        StringBuilder sb        = new StringBuilder();
        String space            = " ";
        String frmt             = "%.7E";
        String intF             = "%8d";


        for (int curTrace = 0; curTrace <  numOfTraces; curTrace++) {
            int modelIndex                  =   curTrace + 1;
            String abs                      =   "";
            String data                     =   "";
            String eol                      =   BayesManager.EOL;
            
            File curModelFile               =   DirectoryManager.getIndexedModelFile(modelIndex) ;
            resonances                      =   new BayesParamsReader(curModelFile) .getResonances();

            if (resonances.isEmpty() || resonances.size() < peakA){continue;}

            for (int curAbs = 0; curAbs < abscissa.length; curAbs++) {
                 abs     =  String.format(space + frmt,abscissa [curAbs][curTrace]);

             }


            Resonance curRes            =   resonances.get(peakA) ;
            double value                =   curRes.getAmplitudesAsArray()[0];
            data                        =   String.format(space+ frmt,value);

            if (isMultiplePeaks == true){
                value       =   resonances.get(peakB).getAmplitudesAsArray()[0];
                data        +=  String.format(space+ frmt,value);
               
            }
            
            
            if ( isMultipleAbs == true){
                String i    = String.format(intF, curTrace) + space;
                sb.append( i + data + abs  + eol);
            }
            else {
                sb.append( abs + data +eol);
            }

        }






        String content = sb.toString();
        IO.writeFileFromString(content, file);


        sb = new StringBuilder();
        if (isMultiplePeaks){
                sb.append("resonance #"+   getPeakA()+", ");
                sb.append("Resonance #"+ getPeakB()+ BayesManager.EOL);

        }
        else {
            sb.append("Resonance #"+   getPeakA()+ BayesManager.EOL);
        }


        int numOfColumns  = IO.getNumberOfColumns(content);
        writeAsciiDescriptor(  file,numOfColumns,numElem, procpar.getFileSource(), sb.toString());
        AllViewers.showAsciiViewer();

}



    public  void writeAsciiDescriptor(  File asciifile,
                                        int numOfColumns,
                                        int numOfRows,
                                        String source,
                                        String extraInfo
                                        ){

        File   afh                  =   DirectoryManager.getAfhFileForData( asciifile);
        AsciiDescriptor ad          =   new AsciiDescriptor();

        ad.setDataSource( AsciiDescriptor.SOURCE_TYPE.PEAK_PICK.getInfo() );
        ad.setNumberOfColumns(numOfColumns);
        ad.setNumberOfRows(numOfRows);
        ad.setSourceFileName(source);
        ad.setExtraInfo(extraInfo);
        AsciiIO.storeToDisk(ad, afh );


}
    private static void close(){
        instance.setVisible(false);
        instance.dispose();
        instance = null;
    }
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JGetBayesAnalyzePeak dialog = new JGetBayesAnalyzePeak(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton close_btn1;
    private javax.swing.JTextPane getPeak_TextPane1;
    private javax.swing.JButton getPeaks_btn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane loadFromModel_ScrollPane;
    private javax.swing.JLabel peak1_lbl;
    private javax.swing.JSpinner peak1_spinner;
    private javax.swing.JLabel peak2_lbl;
    private javax.swing.JSpinner peak2_spinner;
    // End of variables declaration//GEN-END:variables
    public javax.swing.JSpinner getPeak2Spinner () {
        return peak2_spinner;
    }
    public int getPeakA(){
        int n       =  (Integer)peak1_spinner.getValue();
        return n;
    }
    public int getPeakB(){
        int n       =  (Integer)getPeak2Spinner().getValue();
        return n;
    }


}
