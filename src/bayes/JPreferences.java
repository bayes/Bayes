/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JPreferences.java
 *
 * Created on Dec 1, 2010, 11:09:31 AM
 */

package bayes;

import fid.FidViewer;
import fid.FidViewerPreferences;
import image.ImageViewer;
import image.ImageViewerPreferences;
import interfacebeans.TextViewer;
import interfacebeans.TextViewerPreferences;
import java.awt.Color;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UIManager.LookAndFeelInfo;
import org.jdesktop.application.Application;
import org.jdesktop.application.SingleFrameApplication;
import utilities.DisplayText;
import utilities.Screenshot;


/**
 *
 * @author apple
 */
public class JPreferences extends javax.swing.JDialog{
    private static JPreferences instance  = null;

    public static JPreferences getInstance(){
        if (instance  == null){
            instance  = new JPreferences(null, false);
        }

        return instance;

    }
    /** Creates new form JPreferences */
    private JPreferences(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        printPreferencePathes();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lookAndFeelBG = new javax.swing.ButtonGroup();
        mainPane = new javax.swing.JPanel();
        windowButtonPane = new javax.swing.JPanel();
        closeButton = new javax.swing.JButton();
        configurationPane = new javax.swing.JTabbedPane();
        generalPrefsPane = new javax.swing.JPanel();
        jPanel0 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        homeDirTF = new javax.swing.JFormattedTextField();
        setHomeDirButton = new javax.swing.JButton();
        resetAllPropertiesToDefault = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        showTooltipsCheckBox = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        toolTipDisplayTimeSpinner = new javax.swing.JSpinner();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        buildModelTimeoutSpinner = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        connecitonTimeoutSpinner = new javax.swing.JSpinner();
        jLabel10 = new javax.swing.JLabel();
        readTimeoutSpinner = new javax.swing.JSpinner();
        jLabel11 = new javax.swing.JLabel();
        fileUploadBufferSizeMbSpinner = new javax.swing.JSpinner();
        fileDownloadBufferSizeMbSpinner = new javax.swing.JSpinner();
        jLabel14 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        nimbusRadioButton = new javax.swing.JRadioButton();
        NativeLookAndFeelRadioButton = new javax.swing.JRadioButton();
        MetalLookAndFeelRadioButton = new javax.swing.JRadioButton();
        jPanel6 = new javax.swing.JPanel();
        redirectJavaStreamCheckBox = new javax.swing.JCheckBox();
        monitorSubmmitedJobsCheckBox = new javax.swing.JCheckBox();
        screenShotFormatComboBox = new javax.swing.JComboBox();
        jLabel21 = new javax.swing.JLabel();
        filler = new javax.swing.JPanel();
        imageViewerPane = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        thresholdImagePixCheckBox = new javax.swing.JCheckBox();
        autoContrastNewImageCheckBox = new javax.swing.JCheckBox();
        ImagePixelValuePrecisionSpinner = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        contrastBarPrecisionSpinner = new javax.swing.JSpinner();
        jPanel4 = new javax.swing.JPanel();
        imageListFontNameComboBox = new javax.swing.JComboBox(getFonts());
        jLabel13 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        imageListFontSizeSpinner = new javax.swing.JSpinner();
        imageFontBoldCheckBox = new javax.swing.JCheckBox();
        filler1 = new javax.swing.JPanel();
        fidViewerPane = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        fidCursorPrecisionSpinner = new javax.swing.JSpinner();
        jPanel8 = new javax.swing.JPanel();
        cursorColorLabel = new javax.swing.JLabel();
        tarce1ColorLabel = new javax.swing.JLabel();
        tarce2ColorLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        filler2 = new javax.swing.JPanel();
        TextViewerPane = new javax.swing.JPanel();
        textFonPane = new javax.swing.JPanel();
        textFontNameComboBox = new javax.swing.JComboBox(getFonts());
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        textViewerTextFontSizeSpinner = new javax.swing.JSpinner();
        textFontBoldCheckBox = new javax.swing.JCheckBox();
        swtDefaultFontInTextViewer = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        foregroundColorLabel = new javax.swing.JLabel();
        backgroundColorLabel = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        textFonPane1 = new javax.swing.JPanel();
        printFontSizeLabel = new javax.swing.JLabel();
        printFontSizeSpinner = new javax.swing.JSpinner();
        jPanel10 = new javax.swing.JPanel();
        debuggingPane = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        deleteSubmittedJobFromClientCheckBox = new javax.swing.JCheckBox();
        deleteCompletedJobFromServerCheckBox = new javax.swing.JCheckBox();
        jLabel20 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Application Preferences"); // NOI18N

        mainPane.setName("mainPane"); // NOI18N
        mainPane.setLayout(new java.awt.BorderLayout());

        windowButtonPane.setName("windowButtonPane"); // NOI18N

        closeButton.setText("Close");
        closeButton.setName("closeButton"); // NOI18N
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout windowButtonPaneLayout = new org.jdesktop.layout.GroupLayout(windowButtonPane);
        windowButtonPane.setLayout(windowButtonPaneLayout);
        windowButtonPaneLayout.setHorizontalGroup(
            windowButtonPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, windowButtonPaneLayout.createSequentialGroup()
                .addContainerGap(582, Short.MAX_VALUE)
                .add(closeButton)
                .addContainerGap())
        );
        windowButtonPaneLayout.setVerticalGroup(
            windowButtonPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(windowButtonPaneLayout.createSequentialGroup()
                .add(9, 9, 9)
                .add(closeButton)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainPane.add(windowButtonPane, java.awt.BorderLayout.SOUTH);

        configurationPane.setName("configurationPane"); // NOI18N

        generalPrefsPane.setName("generalPrefsPane"); // NOI18N
        generalPrefsPane.setLayout(new java.awt.GridBagLayout());

        jPanel0.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Application Settings", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N
        jPanel0.setName("jPanel0"); // NOI18N

        jLabel15.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        jLabel15.setForeground(new java.awt.Color(153, 0, 0));
        jLabel15.setText("Home Dir");
        jLabel15.setName("jLabel15"); // NOI18N

        homeDirTF.setEditable(false);
        homeDirTF.setText(ApplicationPreferences.getBayesHomeDir().getPath());
        homeDirTF.setName("homeDirTF"); // NOI18N

        setHomeDirButton.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        setHomeDirButton.setForeground(new java.awt.Color(153, 0, 0));
        setHomeDirButton.setText("Set");
        setHomeDirButton.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n \nThis change will require application to quit.<br>\nUpon relaunch, previously set working directories<br>\nwill not be automatically exported. <br>\nUser will still be able to export (load) old working<br>\ndirectories in a standard fasion.<br>\n<br>\n\nWe strongly advice against changing <br>\napplication home directory, unless<br>\ndeemed absolutely necessary<br>\n\n\n        \n\n</font></p><html>"); // NOI18N
        setHomeDirButton.setName("setHomeDirButton"); // NOI18N
        setHomeDirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setHomeDirButtonActionPerformed(evt);
            }
        });

        resetAllPropertiesToDefault.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        resetAllPropertiesToDefault.setForeground(new java.awt.Color(153, 0, 0));
        resetAllPropertiesToDefault.setText("UNINSTALL");
        resetAllPropertiesToDefault.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n \nThis will delete all resource files created by applications.<br> \nUpon execution, application will quit.<br>\nWhen application is run next time, all previous  <br>\nsettings will be lost and reset to default values.<br>\n\n</font></p><html>"); // NOI18N
        resetAllPropertiesToDefault.setName("resetAllPropertiesToDefault"); // NOI18N
        resetAllPropertiesToDefault.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetAllPropertiesToDefaultActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel0Layout = new org.jdesktop.layout.GroupLayout(jPanel0);
        jPanel0.setLayout(jPanel0Layout);
        jPanel0Layout.setHorizontalGroup(
            jPanel0Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel0Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel0Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel0Layout.createSequentialGroup()
                        .add(jLabel15)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(homeDirTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 360, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(setHomeDirButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 49, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(resetAllPropertiesToDefault, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 192, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(114, Short.MAX_VALUE))
        );
        jPanel0Layout.setVerticalGroup(
            jPanel0Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel0Layout.createSequentialGroup()
                .add(jPanel0Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(homeDirTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel15)
                    .add(setHomeDirButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(resetAllPropertiesToDefault))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        generalPrefsPane.add(jPanel0, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tooltips", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N
        jPanel2.setName("jPanel2"); // NOI18N

        showTooltipsCheckBox.setSelected(ApplicationPreferences.isTooltipsEnabled());
        showTooltipsCheckBox.setText("Show Tooltips");
        showTooltipsCheckBox.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nThis controls over the entire application<br>\nwhether to show or not to show tooltips.\n\n</font></p><html>"); // NOI18N
        showTooltipsCheckBox.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        showTooltipsCheckBox.setName("showTooltipsCheckBox"); // NOI18N
        showTooltipsCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                showTooltipsCheckBoxItemStateChanged(evt);
            }
        });

        jLabel7.setText("Display Time (s)");
        jLabel7.setName("jLabel7"); // NOI18N

        toolTipDisplayTimeSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 100, 1));
        toolTipDisplayTimeSpinner.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nThis controls over the entire application<br>\nthe time in seconds that tooltips are displayed.\n\n</font></p><html>"); // NOI18N
        toolTipDisplayTimeSpinner.setName("toolTipDisplayTimeSpinner"); // NOI18N
        toolTipDisplayTimeSpinner.setValue(ApplicationPreferences.getTooltipUptimeInSeconds());
        toolTipDisplayTimeSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                toolTipDisplayTimeSpinnerStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(showTooltipsCheckBox)
                .add(38, 38, 38)
                .add(jLabel7)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(toolTipDisplayTimeSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 83, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(272, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(3, 3, 3)
                        .add(showTooltipsCheckBox))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(6, 6, 6)
                        .add(jLabel7))
                    .add(toolTipDisplayTimeSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        generalPrefsPane.add(jPanel2, gridBagConstraints);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Network/CGI", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N
        jPanel3.setName("jPanel3"); // NOI18N

        jLabel6.setText("Build Model Timeout (ms)");
        jLabel6.setName("jLabel6"); // NOI18N

        buildModelTimeoutSpinner.setModel(new javax.swing.SpinnerNumberModel(500, 250, 10000, 250));
        buildModelTimeoutSpinner.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nEnter Ascii Models, that are maded by user,<by>\nmust be build (compiled) on server prior to <br>\njob submission.<br>\nThis setting controls how frequently the result<br>\nof compile (\"build\" or \"not build\") is checked on server.\n</font></p><html>"); // NOI18N
        buildModelTimeoutSpinner.setName("buildModelTimeoutSpinner"); // NOI18N
        buildModelTimeoutSpinner.setValue(ApplicationPreferences.getBuildModelTimeOutMils());
        buildModelTimeoutSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                buildModelTimeoutSpinnerStateChanged(evt);
            }
        });

        jLabel9.setText("Connection Timeout (s)");
        jLabel9.setName("jLabel9"); // NOI18N

        connecitonTimeoutSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 0, 15, 1));
        connecitonTimeoutSpinner.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nConnection timeout in milliseconds <br>\nfor server connections.\nA timeout of zero is interpreted <br>\nas an infinite timeout.\n\n</font></p><html>"); // NOI18N
        connecitonTimeoutSpinner.setName("connecitonTimeoutSpinner"); // NOI18N
        connecitonTimeoutSpinner.setValue(ApplicationPreferences.getCGIConnectionTimeOutInSec());
        connecitonTimeoutSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                connecitonTimeoutSpinnerStateChanged(evt);
            }
        });

        jLabel10.setText("Read Timeout (s)");
        jLabel10.setName("jLabel10"); // NOI18N

        readTimeoutSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 0, 30, 1));
        readTimeoutSpinner.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nRead timeout in milliseconds <br>\nfor server connections.<br>\nA timeout of zero is interpreted <br>\nas an infinite timeout.\n\n</font></p><html>"); // NOI18N
        readTimeoutSpinner.setName("readTimeoutSpinner"); // NOI18N
        readTimeoutSpinner.setValue(ApplicationPreferences.getCGIReadTimeOutInSec());
        readTimeoutSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                readTimeoutSpinnerStateChanged(evt);
            }
        });

        jLabel11.setText("File Upload Buffer Size (MB)");
        jLabel11.setName("jLabel11"); // NOI18N

        fileUploadBufferSizeMbSpinner.setModel(new javax.swing.SpinnerNumberModel(16, 1, 256, 8));
        fileUploadBufferSizeMbSpinner.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nSets  buffer size for file (jobs) uploaded to server.<br>\nBuffer size can affect upload speed.\n\n</font></p><html>"); // NOI18N
        fileUploadBufferSizeMbSpinner.setName("fileUploadBufferSizeMbSpinner"); // NOI18N
        fileUploadBufferSizeMbSpinner.setValue(ApplicationPreferences.getSubmitJobBufferSizeMB());
        fileUploadBufferSizeMbSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fileUploadBufferSizeMbSpinnerStateChanged(evt);
            }
        });

        fileDownloadBufferSizeMbSpinner.setModel(new javax.swing.SpinnerNumberModel(16, 1, 256, 8));
        fileDownloadBufferSizeMbSpinner.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nSets  buffer size for file (jobs)  downloaded from server.<br>\nBuffer size can affect download speed.\n\n</font></p><html>"); // NOI18N
        fileDownloadBufferSizeMbSpinner.setName("fileDownloadBufferSizeMbSpinner"); // NOI18N
        fileDownloadBufferSizeMbSpinner.setValue(ApplicationPreferences.getDownloadJobBufferSizeMB());
        fileDownloadBufferSizeMbSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fileDownloadBufferSizeMbSpinnerStateChanged(evt);
            }
        });

        jLabel14.setText("File Download Buffer Size (MB)");
        jLabel14.setName("jLabel14"); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel9)
                    .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel10, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .add(10, 10, 10)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(buildModelTimeoutSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, Short.MAX_VALUE)
                    .add(readTimeoutSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(connecitonTimeoutSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel14)
                    .add(jLabel11))
                .add(18, 18, 18)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(fileUploadBufferSizeMbSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(fileDownloadBufferSizeMbSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(new java.awt.Component[] {jLabel10, jLabel6, jLabel9}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel3Layout.linkSize(new java.awt.Component[] {buildModelTimeoutSpinner, connecitonTimeoutSpinner, fileDownloadBufferSizeMbSpinner, fileUploadBufferSizeMbSpinner, readTimeoutSpinner}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel3Layout.linkSize(new java.awt.Component[] {jLabel11, jLabel14}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel11)
                            .add(fileUploadBufferSizeMbSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(fileDownloadBufferSizeMbSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jLabel9)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel10))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(connecitonTimeoutSpinner)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(readTimeoutSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(buildModelTimeoutSpinner)
                        .add(38, 38, 38))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jLabel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        jPanel3Layout.linkSize(new java.awt.Component[] {buildModelTimeoutSpinner, connecitonTimeoutSpinner, fileUploadBufferSizeMbSpinner, jLabel10, jLabel11, jLabel14, jLabel6, jLabel9, readTimeoutSpinner}, org.jdesktop.layout.GroupLayout.VERTICAL);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        generalPrefsPane.add(jPanel3, gridBagConstraints);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Look and Feel", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(new java.awt.GridBagLayout());

        lookAndFeelBG.add(nimbusRadioButton);
        nimbusRadioButton.setText("Nimbus");
        nimbusRadioButton.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nSets Look and Feel to java cross-platform<br>\nlook and feel -  \"Nimbus\".<br>\nThe interface is optimized to work with \"Nimbus\"<br>\nlook and feel (available from java 6 update 10)\n\n</font></p><html>"); // NOI18N
        nimbusRadioButton.setName("nimbusRadioButton"); // NOI18N
        nimbusRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                nimbusRadioButtonItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        jPanel1.add(nimbusRadioButton, gridBagConstraints);

        lookAndFeelBG.add(NativeLookAndFeelRadioButton);
        NativeLookAndFeelRadioButton.setText("Native");
        NativeLookAndFeelRadioButton.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nSets Look and Feel to OS native <br>\nlook and feel.<br>\nThe interface is optimized to work with \"Nimbus\"<br>\nlook and feel (available from java 6 update 10)\n\n</font></p><html>"); // NOI18N
        NativeLookAndFeelRadioButton.setName("NativeLookAndFeelRadioButton"); // NOI18N
        NativeLookAndFeelRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                NativeLookAndFeelRadioButtonItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(NativeLookAndFeelRadioButton, gridBagConstraints);

        lookAndFeelBG.add(MetalLookAndFeelRadioButton);
        MetalLookAndFeelRadioButton.setText("Metal");
        MetalLookAndFeelRadioButton.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nSets Look and Feel to java cross-platform<br>\nlook and feel -  \"Metal\".<br>\nThe interface is optimized to work with \"Nimbus\"<br>\nlook and feel (available from java 6 update 10)\n\n</font></p><html>"); // NOI18N
        MetalLookAndFeelRadioButton.setName("MetalLookAndFeelRadioButton"); // NOI18N
        MetalLookAndFeelRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                MetalLookAndFeelRadioButtonItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(MetalLookAndFeelRadioButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        generalPrefsPane.add(jPanel1, gridBagConstraints);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Application Settings", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N
        jPanel6.setName("jPanel6"); // NOI18N

        redirectJavaStreamCheckBox.setSelected(ApplicationPreferences.isTooltipsEnabled());
        redirectJavaStreamCheckBox.setText("Write Log Files");
        redirectJavaStreamCheckBox.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nBoolean, that controls whether <br>\njava standard input and output<br>\nstreams are redirected to files.<br>\nFiles are located in the root directory<br>\nfor Bayesian Analysis Interface and <br>\nare named as System.out.txt and <br>\nSystem.err.txt.\n\n</font></p><html>"); // NOI18N
        redirectJavaStreamCheckBox.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        redirectJavaStreamCheckBox.setName("redirectJavaStreamCheckBox"); // NOI18N
        redirectJavaStreamCheckBox.setSelected (ApplicationPreferences.isRedirectJavaStream());
        redirectJavaStreamCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                redirectJavaStreamCheckBoxStateChanged(evt);
            }
        });

        monitorSubmmitedJobsCheckBox.setSelected(ApplicationPreferences.isMonitorSubmittedJobsLive());
        monitorSubmmitedJobsCheckBox.setText("Monitor Submitted Jobs Live");
        monitorSubmmitedJobsCheckBox.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nBoolean, that controls whether job <br>\nmonitoring widget starts automatically<br>\nupon job submission.<br>\n\n\n</font></p><html>"); // NOI18N
        monitorSubmmitedJobsCheckBox.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        monitorSubmmitedJobsCheckBox.setName("monitorSubmmitedJobsCheckBox"); // NOI18N
        redirectJavaStreamCheckBox.setSelected (ApplicationPreferences.isRedirectJavaStream());
        monitorSubmmitedJobsCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                monitorSubmmitedJobsCheckBoxStateChanged(evt);
            }
        });

        screenShotFormatComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "jpg", "png", "gif" }));
        screenShotFormatComboBox.setSelectedItem( ApplicationPreferences.getScreenShotFormat());
        screenShotFormatComboBox.setName("screenShotFormatComboBox"); // NOI18N
        screenShotFormatComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                screenShotFormatComboBoxItemStateChanged(evt);
            }
        });
        screenShotFormatComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                screenShotFormatComboBoxActionPerformed(evt);
            }
        });

        jLabel21.setText("Screenshot format");
        jLabel21.setName("jLabel21"); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .add(redirectJavaStreamCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                .add(18, 18, 18)
                .add(monitorSubmmitedJobsCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 9, Short.MAX_VALUE)
                .add(jLabel21)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(screenShotFormatComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(37, 37, 37))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(redirectJavaStreamCheckBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(monitorSubmmitedJobsCheckBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(screenShotFormatComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel21))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        generalPrefsPane.add(jPanel6, gridBagConstraints);

        filler.setName("filler"); // NOI18N

        org.jdesktop.layout.GroupLayout fillerLayout = new org.jdesktop.layout.GroupLayout(filler);
        filler.setLayout(fillerLayout);
        fillerLayout.setHorizontalGroup(
            fillerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 657, Short.MAX_VALUE)
        );
        fillerLayout.setVerticalGroup(
            fillerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 30, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        generalPrefsPane.add(filler, gridBagConstraints);

        configurationPane.addTab("General ", generalPrefsPane);

        imageViewerPane.setName("imageViewerPane"); // NOI18N
        imageViewerPane.setLayout(new java.awt.GridBagLayout());

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "General", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N
        jPanel5.setName("jPanel5"); // NOI18N

        thresholdImagePixCheckBox.setSelected(ApplicationPreferences.isTooltipsEnabled());
        thresholdImagePixCheckBox.setText("Threshold Image Pixel");
        thresholdImagePixCheckBox.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nBoolean that controls whether threshold <br>\nmust be applied when image pixel<br>\nis extracted.\n\n\n</font></p><html>"); // NOI18N
        thresholdImagePixCheckBox.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        thresholdImagePixCheckBox.setName("thresholdImagePixCheckBox"); // NOI18N
        thresholdImagePixCheckBox.setSelected (ImageViewerPreferences.isThresholdImagePixelExtraction());
        thresholdImagePixCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                thresholdImagePixCheckBoxItemStateChanged(evt);
            }
        });

        autoContrastNewImageCheckBox.setSelected(ApplicationPreferences.isTooltipsEnabled());
        autoContrastNewImageCheckBox.setText("Auto Contrast Image");
        autoContrastNewImageCheckBox.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nBoolean that controls whether to recalculate  <br>\ncontrast when new imagei s displayed.<br>\n\n\n</font></p><html>"); // NOI18N
        autoContrastNewImageCheckBox.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        autoContrastNewImageCheckBox.setName("autoContrastNewImageCheckBox"); // NOI18N
        autoContrastNewImageCheckBox.setSelected (ImageViewerPreferences.isAutoContrastNewImage());
        autoContrastNewImageCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                autoContrastNewImageCheckBoxItemStateChanged(evt);
            }
        });

        ImagePixelValuePrecisionSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 10, 1));
        ImagePixelValuePrecisionSpinner.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nSets number of significant digits<br>\nin the pixel value display.\n\n</font></p><html>"); // NOI18N
        ImagePixelValuePrecisionSpinner.setName("ImagePixelValuePrecisionSpinner"); // NOI18N
        ImagePixelValuePrecisionSpinner.setValue(ImageViewerPreferences.getImagePixelValuePresision());
        ImagePixelValuePrecisionSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ImagePixelValuePrecisionSpinnerStateChanged(evt);
            }
        });

        jLabel2.setText("# Significant Digits In Pixel Value");
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel1.setText("# Significant Digits in Contrast Display");
        jLabel1.setName("jLabel1"); // NOI18N

        contrastBarPrecisionSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 10, 1));
        contrastBarPrecisionSpinner.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nSets number of significant digits in the<br>\nwidget that controls image contrast.\n\n</font></p><html>"); // NOI18N
        contrastBarPrecisionSpinner.setName("contrastBarPrecisionSpinner"); // NOI18N
        contrastBarPrecisionSpinner.setValue(ImageViewerPreferences.getImageContrastBarLabelPresision());
        contrastBarPrecisionSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                contrastBarPrecisionSpinnerStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(ImagePixelValuePrecisionSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(autoContrastNewImageCheckBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 181, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(contrastBarPrecisionSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(thresholdImagePixCheckBox)))
                .addContainerGap(105, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(ImagePixelValuePrecisionSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(autoContrastNewImageCheckBox)
                    .add(jLabel2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel1)
                    .add(contrastBarPrecisionSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(thresholdImagePixCheckBox))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5Layout.linkSize(new java.awt.Component[] {ImagePixelValuePrecisionSpinner, autoContrastNewImageCheckBox, contrastBarPrecisionSpinner, jLabel1, jLabel2, thresholdImagePixCheckBox}, org.jdesktop.layout.GroupLayout.VERTICAL);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        imageViewerPane.add(jPanel5, gridBagConstraints);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Image List Font", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N
        jPanel4.setName("jPanel4"); // NOI18N

        imageListFontNameComboBox .setSelectedItem(ImageViewerPreferences.getImageListFontName());
        imageListFontNameComboBox.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nFont name in the image list.\n\n</font></p><html>"); // NOI18N
        imageListFontNameComboBox.setName("imageListFontNameComboBox"); // NOI18N
        imageListFontNameComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                imageListFontNameComboBoxItemStateChanged(evt);
            }
        });

        jLabel13.setText("Font Name");
        jLabel13.setName("jLabel13"); // NOI18N

        jLabel12.setText("Size");
        jLabel12.setName("jLabel12"); // NOI18N

        imageListFontSizeSpinner.setModel(new javax.swing.SpinnerNumberModel(10, 8, 26, 1));
        imageListFontSizeSpinner.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nFont size in the image list.\n\n</font></p><html>"); // NOI18N
        imageListFontSizeSpinner.setName("imageListFontSizeSpinner"); // NOI18N
        imageListFontSizeSpinner.setValue(ImageViewerPreferences.getImageListFontSize());
        imageListFontSizeSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                imageListFontSizeSpinnerStateChanged(evt);
            }
        });

        imageFontBoldCheckBox.setSelected(ApplicationPreferences.isTooltipsEnabled());
        imageFontBoldCheckBox.setText("Bold");
        imageFontBoldCheckBox.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nMake font in the image list bold?\n\n</font></p><html>"); // NOI18N
        imageFontBoldCheckBox.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        imageFontBoldCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        imageFontBoldCheckBox.setName("imageFontBoldCheckBox"); // NOI18N
        imageFontBoldCheckBox.setSelected (ImageViewerPreferences.isImageFontBold());
        imageFontBoldCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                imageFontBoldCheckBoxItemStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel13)
                .add(18, 18, 18)
                .add(imageListFontNameComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 191, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(imageFontBoldCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel12)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(imageListFontSizeSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(169, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(imageListFontNameComboBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                        .add(imageFontBoldCheckBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel13))
                .add(38, 38, 38))
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel12, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .add(imageListFontSizeSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel4Layout.linkSize(new java.awt.Component[] {imageFontBoldCheckBox, imageListFontNameComboBox, imageListFontSizeSpinner, jLabel12, jLabel13}, org.jdesktop.layout.GroupLayout.VERTICAL);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        imageViewerPane.add(jPanel4, gridBagConstraints);

        filler1.setName("filler1"); // NOI18N

        org.jdesktop.layout.GroupLayout filler1Layout = new org.jdesktop.layout.GroupLayout(filler1);
        filler1.setLayout(filler1Layout);
        filler1Layout.setHorizontalGroup(
            filler1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 637, Short.MAX_VALUE)
        );
        filler1Layout.setVerticalGroup(
            filler1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 328, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        imageViewerPane.add(filler1, gridBagConstraints);

        configurationPane.addTab("Image Viewer", imageViewerPane);

        fidViewerPane.setName("fidViewerPane"); // NOI18N
        fidViewerPane.setLayout(new java.awt.GridBagLayout());

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Labels", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N
        jPanel7.setName("jPanel7"); // NOI18N

        jLabel3.setText("# Significant Digits in Cursor Displays");
        jLabel3.setName("jLabel3"); // NOI18N

        fidCursorPrecisionSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 10, 1));
        fidCursorPrecisionSpinner.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nSet number of significant digits<br>\nin the cursor value display.\n\n</font></p><html>"); // NOI18N
        fidCursorPrecisionSpinner.setName("fidCursorPrecisionSpinner"); // NOI18N
        fidCursorPrecisionSpinner.setValue(FidViewerPreferences.getFidCursorPresision());
        fidCursorPrecisionSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fidCursorPrecisionSpinnerStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel7Layout = new org.jdesktop.layout.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel3)
                .add(18, 18, 18)
                .add(fidCursorPrecisionSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(293, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(fidCursorPrecisionSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel3))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel7Layout.linkSize(new java.awt.Component[] {fidCursorPrecisionSpinner, jLabel3}, org.jdesktop.layout.GroupLayout.VERTICAL);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        fidViewerPane.add(jPanel7, gridBagConstraints);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Plot Colors", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N
        jPanel8.setName("jPanel8"); // NOI18N

        cursorColorLabel.setBackground( FidViewerPreferences.CURSOR_COLOR );
        cursorColorLabel.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nSet color of cursors.\n\n</font></p><html>"); // NOI18N
        cursorColorLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.darkGray, null));
        cursorColorLabel.setName("cursorColorLabel"); // NOI18N
        cursorColorLabel.setOpaque(true);
        cursorColorLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cursorColorLabelMousePressed(evt);
            }
        });

        tarce1ColorLabel.setBackground( FidViewerPreferences.TRACE_1_COLOR );
        tarce1ColorLabel.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nSet color for trace 1.\n\n</font></p><html>"); // NOI18N
        tarce1ColorLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.darkGray, null));
        tarce1ColorLabel.setName("tarce1ColorLabel"); // NOI18N
        tarce1ColorLabel.setOpaque(true);
        tarce1ColorLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tarce1ColorLabelMousePressed(evt);
            }
        });

        tarce2ColorLabel.setBackground(  FidViewerPreferences.TRACE_2_COLOR  );
        tarce2ColorLabel.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nSet color for trace 2.\n\n</font></p><html>"); // NOI18N
        tarce2ColorLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.darkGray, null));
        tarce2ColorLabel.setName("tarce2ColorLabel"); // NOI18N
        tarce2ColorLabel.setOpaque(true);
        tarce2ColorLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tarce2ColorLabelMouseClicked(evt);
            }
        });

        jLabel4.setText("Cursor Color");
        jLabel4.setName("jLabel4"); // NOI18N

        jLabel5.setText("Trace Color 1");
        jLabel5.setName("jLabel5"); // NOI18N

        jLabel8.setText("Trace Color 2");
        jLabel8.setName("jLabel8"); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel8Layout = new org.jdesktop.layout.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel8)
                    .add(jLabel5))
                .add(51, 51, 51)
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(tarce2ColorLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                    .add(tarce1ColorLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 119, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(26, 26, 26)
                .add(jLabel4)
                .add(49, 49, 49)
                .add(cursorColorLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 82, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(77, Short.MAX_VALUE))
        );

        jPanel8Layout.linkSize(new java.awt.Component[] {cursorColorLabel, tarce1ColorLabel, tarce2ColorLabel}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(cursorColorLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel8Layout.createSequentialGroup()
                        .add(tarce1ColorLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(tarce2ColorLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jLabel4)
                    .add(jPanel8Layout.createSequentialGroup()
                        .add(jLabel5)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel8)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel8Layout.linkSize(new java.awt.Component[] {cursorColorLabel, jLabel4, jLabel5, jLabel8, tarce1ColorLabel, tarce2ColorLabel}, org.jdesktop.layout.GroupLayout.VERTICAL);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        fidViewerPane.add(jPanel8, gridBagConstraints);

        filler2.setName("filler2"); // NOI18N

        org.jdesktop.layout.GroupLayout filler2Layout = new org.jdesktop.layout.GroupLayout(filler2);
        filler2.setLayout(filler2Layout);
        filler2Layout.setHorizontalGroup(
            filler2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 657, Short.MAX_VALUE)
        );
        filler2Layout.setVerticalGroup(
            filler2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 325, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        fidViewerPane.add(filler2, gridBagConstraints);

        configurationPane.addTab("Fid Viewer", fidViewerPane);

        TextViewerPane.setName("TextViewerPane"); // NOI18N
        TextViewerPane.setLayout(new java.awt.GridBagLayout());

        textFonPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Text Font", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N
        textFonPane.setName("textFonPane"); // NOI18N

        textFontNameComboBox .setSelectedItem(TextViewerPreferences.getTextFontName());
        textFontNameComboBox.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nFont name in the text viewer.<br>\nThe text outpus are frequently formatted such <br>\nto be best viewed with monospaced fonts.\n\n</font></p><html>"); // NOI18N
        textFontNameComboBox.setName("textFontNameComboBox"); // NOI18N
        textFontNameComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                textFontNameComboBoxItemStateChanged(evt);
            }
        });

        jLabel17.setText("Font Name");
        jLabel17.setName("jLabel17"); // NOI18N

        jLabel18.setText("Size");
        jLabel18.setName("jLabel18"); // NOI18N

        textViewerTextFontSizeSpinner.setModel(new javax.swing.SpinnerNumberModel(10, 8, 32, 1));
        textViewerTextFontSizeSpinner.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nFont size in the text viewer.\n\n</font></p><html>"); // NOI18N
        textViewerTextFontSizeSpinner.setName("textViewerTextFontSizeSpinner"); // NOI18N
        textViewerTextFontSizeSpinner.setValue(TextViewerPreferences.getTextFontSize());
        textViewerTextFontSizeSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                textViewerTextFontSizeSpinnerStateChanged(evt);
            }
        });

        textFontBoldCheckBox.setText("Bold");
        textFontBoldCheckBox.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nMake font in the text viewer bold?\n\n</font></p><html>"); // NOI18N
        textFontBoldCheckBox.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        textFontBoldCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        textFontBoldCheckBox.setName("textFontBoldCheckBox"); // NOI18N
        textFontBoldCheckBox.setSelected (TextViewerPreferences.isTextFontBold());
        textFontBoldCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                textFontBoldCheckBoxItemStateChanged(evt);
            }
        });

        swtDefaultFontInTextViewer.setText("Reset to Default");
        swtDefaultFontInTextViewer.setName("swtDefaultFontInTextViewer"); // NOI18N
        swtDefaultFontInTextViewer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                swtDefaultFontInTextViewerActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout textFonPaneLayout = new org.jdesktop.layout.GroupLayout(textFonPane);
        textFonPane.setLayout(textFonPaneLayout);
        textFonPaneLayout.setHorizontalGroup(
            textFonPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(textFonPaneLayout.createSequentialGroup()
                .addContainerGap()
                .add(textFonPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(textFonPaneLayout.createSequentialGroup()
                        .add(jLabel17)
                        .add(18, 18, 18)
                        .add(textFontNameComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 191, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(textFontBoldCheckBox)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel18)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(textViewerTextFontSizeSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 67, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(swtDefaultFontInTextViewer))
                .addContainerGap(155, Short.MAX_VALUE))
        );
        textFonPaneLayout.setVerticalGroup(
            textFonPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(textFonPaneLayout.createSequentialGroup()
                .add(textFonPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(textFonPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(textFontNameComboBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                        .add(textFontBoldCheckBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jLabel17))
                .add(9, 9, 9)
                .add(swtDefaultFontInTextViewer))
            .add(textFonPaneLayout.createSequentialGroup()
                .add(textFonPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel18, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .add(textViewerTextFontSizeSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(38, 38, 38))
        );

        textFonPaneLayout.linkSize(new java.awt.Component[] {jLabel17, jLabel18, textFontBoldCheckBox, textFontNameComboBox, textViewerTextFontSizeSpinner}, org.jdesktop.layout.GroupLayout.VERTICAL);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        TextViewerPane.add(textFonPane, gridBagConstraints);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Plot Colors", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N
        jPanel9.setName("jPanel9"); // NOI18N

        foregroundColorLabel.setBackground( TextViewerPreferences.FOREGROUND_COLOR );
        foregroundColorLabel.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nSet foregroud color in text viewer.\n\n</font></p><html>"); // NOI18N
        foregroundColorLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.darkGray, null));
        foregroundColorLabel.setName("foregroundColorLabel"); // NOI18N
        foregroundColorLabel.setOpaque(true);
        foregroundColorLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                foregroundColorLabelMousePressed(evt);
            }
        });

        backgroundColorLabel.setBackground(  TextViewerPreferences.BACKGROUND_COLOR );
        backgroundColorLabel.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nSet background color in text viewer.\n\n</font></p><html>"); // NOI18N
        backgroundColorLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.darkGray, null));
        backgroundColorLabel.setName("backgroundColorLabel"); // NOI18N
        backgroundColorLabel.setOpaque(true);
        backgroundColorLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backgroundColorLabelMouseClicked(evt);
            }
        });

        jLabel16.setText("Foregrund Color");
        jLabel16.setName("jLabel16"); // NOI18N

        jLabel19.setText("Background Color");
        jLabel19.setName("jLabel19"); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel9Layout = new org.jdesktop.layout.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel16)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(foregroundColorLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 119, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabel19)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(backgroundColorLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(107, Short.MAX_VALUE))
        );

        jPanel9Layout.linkSize(new java.awt.Component[] {jLabel16, jLabel19}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel9Layout.linkSize(new java.awt.Component[] {backgroundColorLabel, foregroundColorLabel}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel16)
                    .add(foregroundColorLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel19)
                    .add(backgroundColorLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel9Layout.linkSize(new java.awt.Component[] {backgroundColorLabel, foregroundColorLabel, jLabel16, jLabel19}, org.jdesktop.layout.GroupLayout.VERTICAL);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        TextViewerPane.add(jPanel9, gridBagConstraints);

        textFonPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Printing", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N
        textFonPane1.setName("textFonPane1"); // NOI18N

        printFontSizeLabel.setText("Font Size");
        printFontSizeLabel.setName("printFontSizeLabel"); // NOI18N

        printFontSizeSpinner.setModel(new javax.swing.SpinnerNumberModel(12, 8, 32, 1));
        printFontSizeSpinner.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nFont size in printed reports\n</font></p><html>"); // NOI18N
        printFontSizeSpinner.setName("printFontSizeSpinner"); // NOI18N
        printFontSizeSpinner.setValue(TextViewerPreferences.getPrintFontSize());
        printFontSizeSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                printFontSizeSpinnerStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout textFonPane1Layout = new org.jdesktop.layout.GroupLayout(textFonPane1);
        textFonPane1.setLayout(textFonPane1Layout);
        textFonPane1Layout.setHorizontalGroup(
            textFonPane1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(textFonPane1Layout.createSequentialGroup()
                .addContainerGap()
                .add(printFontSizeLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(printFontSizeSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 67, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(471, Short.MAX_VALUE))
        );
        textFonPane1Layout.setVerticalGroup(
            textFonPane1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(textFonPane1Layout.createSequentialGroup()
                .add(textFonPane1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(printFontSizeLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .add(printFontSizeSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(38, 38, 38))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        TextViewerPane.add(textFonPane1, gridBagConstraints);

        jPanel10.setName("jPanel10"); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel10Layout = new org.jdesktop.layout.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 657, Short.MAX_VALUE)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 269, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 5.0;
        TextViewerPane.add(jPanel10, gridBagConstraints);

        configurationPane.addTab("Text Viewer", TextViewerPane);

        debuggingPane.setName("debuggingPane"); // NOI18N

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Files", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N
        jPanel11.setName("jPanel11"); // NOI18N

        deleteSubmittedJobFromClientCheckBox.setSelected(ApplicationPreferences.isDeleteSubmittedJobFromCLient());
        deleteSubmittedJobFromClientCheckBox.setText("Delete submitted job from client");
        deleteSubmittedJobFromClientCheckBox.setName("deleteSubmittedJobFromClientCheckBox"); // NOI18N
        deleteSubmittedJobFromClientCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSubmittedJobFromClientCheckBoxActionPerformed(evt);
            }
        });

        deleteCompletedJobFromServerCheckBox.setSelected(ApplicationPreferences.isDeleteCompletedJobFromServer());
        deleteCompletedJobFromServerCheckBox.setText("Delete completed job from server");
        deleteCompletedJobFromServerCheckBox.setName("deleteCompletedJobFromServerCheckBox"); // NOI18N
        deleteCompletedJobFromServerCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                deleteCompletedJobFromServerCheckBoxItemStateChanged(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Lucida Grande", 1, 18));
        jLabel20.setForeground(new java.awt.Color(153, 0, 0));
        jLabel20.setText("<html> DO NOT CHANGE THE DEFAULT VALUES UNLESS <br>  INSTRUCTED BY BAYES SERVER ADMIN </html>"); // NOI18N
        jLabel20.setName("jLabel20"); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel11Layout = new org.jdesktop.layout.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel11Layout.createSequentialGroup()
                        .add(deleteCompletedJobFromServerCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                        .add(262, 262, 262))
                    .add(deleteSubmittedJobFromClientCheckBox)
                    .add(jLabel20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 504, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel11Layout.createSequentialGroup()
                .add(jLabel20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 7, Short.MAX_VALUE)
                .add(deleteCompletedJobFromServerCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(deleteSubmittedJobFromClientCheckBox)
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout debuggingPaneLayout = new org.jdesktop.layout.GroupLayout(debuggingPane);
        debuggingPane.setLayout(debuggingPaneLayout);
        debuggingPaneLayout.setHorizontalGroup(
            debuggingPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, debuggingPaneLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel11, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        debuggingPaneLayout.setVerticalGroup(
            debuggingPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(debuggingPaneLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(398, Short.MAX_VALUE))
        );

        configurationPane.addTab("Debugging", debuggingPane);

        mainPane.add(configurationPane, java.awt.BorderLayout.CENTER);

        getContentPane().add(mainPane, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    public static void persist(){
        ApplicationPreferences.persist();
        ImageViewerPreferences.persist();
        FidViewerPreferences.persist();
        TextViewerPreferences.persist();
    }
    public static void printPreferencePathes(){
    }


    private void contrastBarPrecisionSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_contrastBarPrecisionSpinnerStateChanged
      int val =  (Integer)contrastBarPrecisionSpinner.getValue();
      ImageViewerPreferences.setImageContrastBarLabelPresision(val);
      ImageViewer.getInstance().getCalibrationBar().repaint();
    }//GEN-LAST:event_contrastBarPrecisionSpinnerStateChanged
    private void ImagePixelValuePrecisionSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ImagePixelValuePrecisionSpinnerStateChanged
       int val =  (Integer) ImagePixelValuePrecisionSpinner.getValue();
       ImageViewerPreferences.setImagePixelValuePresision(val);
    }//GEN-LAST:event_ImagePixelValuePrecisionSpinnerStateChanged
    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed
    private void fidCursorPrecisionSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fidCursorPrecisionSpinnerStateChanged
        int val =  (Integer) fidCursorPrecisionSpinner.getValue();
        FidViewerPreferences.setFidCursorPresision(val);
        FidViewerPreferences.refreshCursorValueFormat();
      
    }//GEN-LAST:event_fidCursorPrecisionSpinnerStateChanged
    private void buildModelTimeoutSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_buildModelTimeoutSpinnerStateChanged
        int val =  (Integer) buildModelTimeoutSpinner.getValue();
        ApplicationPreferences.setBuildModelTimeOutMils(val);
    }//GEN-LAST:event_buildModelTimeoutSpinnerStateChanged
    private void showTooltipsCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_showTooltipsCheckBoxItemStateChanged
        boolean val = showTooltipsCheckBox.isSelected();
        ApplicationPreferences.setTooltipsEnabled(val);
        ApplicationPreferences.refreshEnableTooltips();
    }//GEN-LAST:event_showTooltipsCheckBoxItemStateChanged
    private void toolTipDisplayTimeSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_toolTipDisplayTimeSpinnerStateChanged
        int val =  (Integer) toolTipDisplayTimeSpinner.getValue();
        ApplicationPreferences.setTooltipUptimeInSeconds(val);
        ApplicationPreferences.refreshTooltipTime();
    }//GEN-LAST:event_toolTipDisplayTimeSpinnerStateChanged
    private void autoContrastNewImageCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_autoContrastNewImageCheckBoxItemStateChanged
        boolean val = autoContrastNewImageCheckBox.isSelected();
       ImageViewerPreferences.setAutoContrastNewImage(val);
    }//GEN-LAST:event_autoContrastNewImageCheckBoxItemStateChanged
    private void thresholdImagePixCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_thresholdImagePixCheckBoxItemStateChanged
        boolean val = thresholdImagePixCheckBox.isSelected();
        ImageViewerPreferences.setThresholdImagePixelExtraction(val);
    }//GEN-LAST:event_thresholdImagePixCheckBoxItemStateChanged

    private void nimbusRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_nimbusRadioButtonItemStateChanged
     if (nimbusRadioButton.isSelected()){
         try {

            // Set System L&F
            for (LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                   if (ApplicationPreferences.LOOK_AND_FEEL_NAME_NIMBUS.equals(info.getName())) {
                       UIManager.setLookAndFeel(info.getClassName());
                       String uiname    = ApplicationPreferences.LOOK_AND_FEEL_NAME_NIMBUS;
                       ApplicationPreferences.setLookAndFeel(uiname);
                   }

            }
          }
        catch (Exception e) {
            e.printStackTrace();
        }
        finally{
            SingleFrameApplication ap =      (SingleFrameApplication) Application.getInstance();
            SwingUtilities.updateComponentTreeUI( ap.getMainFrame());
            SwingUtilities.updateComponentTreeUI(this);
            ApplicationPreferences.setLookAndFeel(UIManager.getLookAndFeel().getName());

        }


        }
    }//GEN-LAST:event_nimbusRadioButtonItemStateChanged
    private void NativeLookAndFeelRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_NativeLookAndFeelRadioButtonItemStateChanged
      if (NativeLookAndFeelRadioButton.isSelected()){
         try {
            // Set System L&F
            String uiname =  UIManager.getSystemLookAndFeelClassName();
            UIManager.setLookAndFeel(uiname);
         }
          catch (Exception e) {
                e.printStackTrace();
            }
         finally{
            SingleFrameApplication ap =      (SingleFrameApplication) Application.getInstance();
            SwingUtilities.updateComponentTreeUI( ap.getMainFrame());
             SwingUtilities.updateComponentTreeUI(this);
            ApplicationPreferences.setLookAndFeel(UIManager.getLookAndFeel().getName());
         }
        }
    }//GEN-LAST:event_NativeLookAndFeelRadioButtonItemStateChanged
    private void MetalLookAndFeelRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_MetalLookAndFeelRadioButtonItemStateChanged
           if (MetalLookAndFeelRadioButton.isSelected()){
         try {
            // Set System L&F
            String uiname =   UIManager.getCrossPlatformLookAndFeelClassName();;
            UIManager.setLookAndFeel(uiname);
        }

        catch (Exception e) {
            e.printStackTrace();
        }
         finally{
                SingleFrameApplication ap =      (SingleFrameApplication) Application.getInstance();
                SwingUtilities.updateComponentTreeUI( ap.getMainFrame());
                SwingUtilities.updateComponentTreeUI(this);
                ApplicationPreferences.setLookAndFeel(UIManager.getLookAndFeel().getName());
        }
      }
    }//GEN-LAST:event_MetalLookAndFeelRadioButtonItemStateChanged

    private void connecitonTimeoutSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_connecitonTimeoutSpinnerStateChanged
        int val =  (Integer)connecitonTimeoutSpinner.getValue();
        ApplicationPreferences.setCGIConnectionTimeOutInSec(val);
    }//GEN-LAST:event_connecitonTimeoutSpinnerStateChanged
    private void readTimeoutSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_readTimeoutSpinnerStateChanged
        int val =  (Integer) readTimeoutSpinner.getValue();
        ApplicationPreferences.setCGIReadTimeOutInSec(val);
    }//GEN-LAST:event_readTimeoutSpinnerStateChanged
    private void fileUploadBufferSizeMbSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fileUploadBufferSizeMbSpinnerStateChanged
       int val =  (Integer)  fileUploadBufferSizeMbSpinner.getValue();
        ApplicationPreferences.setSubmitJobBufferSizeMB(val);
    }//GEN-LAST:event_fileUploadBufferSizeMbSpinnerStateChanged
    private void imageListFontSizeSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_imageListFontSizeSpinnerStateChanged
        int val =  (Integer)   imageListFontSizeSpinner.getValue();
        ImageViewerPreferences.setImageListFontSize(val);

         Font   font     =   ImageViewerPreferences.getImageListFont();
         ImageViewer.imageListfont = font;

         ImageViewer.getInstance(). getImageJList ().repaint();
    }//GEN-LAST:event_imageListFontSizeSpinnerStateChanged
    private void imageListFontNameComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_imageListFontNameComboBoxItemStateChanged
        String val =   imageListFontNameComboBox.getSelectedItem().toString();
        ImageViewerPreferences.setImageListFontName(val);

        Font   font     =   ImageViewerPreferences.getImageListFont();
        ImageViewer.imageListfont = font;
        ImageViewer.getInstance(). getImageJList ().repaint();
    }//GEN-LAST:event_imageListFontNameComboBoxItemStateChanged
    private void redirectJavaStreamCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_redirectJavaStreamCheckBoxStateChanged
       boolean redirect    = redirectJavaStreamCheckBox.isSelected();
       ApplicationPreferences.setRedirectJavaStream(redirect);

       if (redirect){
        try {
                File outFile    =   DirectoryManager.getSystemOutFile();
                File errFile    =   DirectoryManager.getSystemErrorFile ();
                PrintStream ps  =  null;

                 //ps = new PrintStream(new BufferedOutputStream(new FileOutputStream(outFile)));
                 ps = new PrintStream(new FileOutputStream(outFile ));
                 System.setOut(ps);

                 ps = new PrintStream(new FileOutputStream(errFile ));
                 System.setErr(ps);

                 TextViewer.addJavaRedirectOptions();
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();
            }
        }
        else{
                 System.setOut(System.out);
                 System.setErr(System.err);
                 TextViewer.removeJavaRedirectOptions();
        }
    }//GEN-LAST:event_redirectJavaStreamCheckBoxStateChanged
    private void imageFontBoldCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_imageFontBoldCheckBoxItemStateChanged
        boolean bold =   imageFontBoldCheckBox.isSelected();
        ImageViewerPreferences.setImageFontBold(bold);

         Font   font     =   ImageViewerPreferences.getImageListFont();
         ImageViewer.imageListfont = font;

         ImageViewer.getInstance(). getImageJList ().repaint();
    }//GEN-LAST:event_imageFontBoldCheckBoxItemStateChanged
    private void cursorColorLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cursorColorLabelMousePressed
       Color color              =  FidViewerPreferences.CURSOR_COLOR ;
       Color newcolor           = JColorChooser.showDialog(this,"Choose a color", color );
        if (newcolor != null){
            FidViewerPreferences.setFidCursorColor(newcolor.getRGB());
            FidViewer.getInstance().clearCursors();
            FidViewerPreferences.refreshCursorColor();
            this.cursorColorLabel.setBackground( newcolor);
        }
        
    }//GEN-LAST:event_cursorColorLabelMousePressed
    private void tarce1ColorLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tarce1ColorLabelMousePressed
        Color color              =  FidViewerPreferences.TRACE_1_COLOR ;
        Color newcolor           = JColorChooser.showDialog(this,"Choose a color", color );
        if (newcolor != null){
            FidViewerPreferences.setFidTraceColor1(newcolor.getRGB());
            FidViewerPreferences.refreshTraceColors();
            FidViewer.getInstance().setTraceColor(0,FidViewerPreferences.TRACE_1_COLOR);
            this.tarce1ColorLabel.setBackground( newcolor);
        }
        
    }//GEN-LAST:event_tarce1ColorLabelMousePressed
    private void tarce2ColorLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tarce2ColorLabelMouseClicked
        Color color              =  FidViewerPreferences.TRACE_2_COLOR ;
        Color newcolor           = JColorChooser.showDialog(this,"Choose a color", color );
        if (newcolor != null){
            FidViewerPreferences.setFidTraceColor2(newcolor.getRGB());
            FidViewerPreferences.refreshTraceColors();
            FidViewer.getInstance().setTraceColor(1,FidViewerPreferences.TRACE_2_COLOR);
            this.tarce2ColorLabel.setBackground( newcolor);
        }
        
    }//GEN-LAST:event_tarce2ColorLabelMouseClicked
    private void fileDownloadBufferSizeMbSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fileDownloadBufferSizeMbSpinnerStateChanged
         int val =  (Integer)  fileDownloadBufferSizeMbSpinner.getValue();
        ApplicationPreferences.setDownloadJobBufferSizeMB(val);
    }//GEN-LAST:event_fileDownloadBufferSizeMbSpinnerStateChanged
    private void textFontNameComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_textFontNameComboBoxItemStateChanged
        String val =   textFontNameComboBox.getSelectedItem().toString();
        TextViewerPreferences.setTextFontName(val);

        Font   font                 =   TextViewerPreferences.getTextFont();
        TextViewer.getInstance().updateFont(font);
        TextViewer.getInstance().repaint();
    }//GEN-LAST:event_textFontNameComboBoxItemStateChanged
    private void textViewerTextFontSizeSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_textViewerTextFontSizeSpinnerStateChanged
        int val =  (Integer)   textViewerTextFontSizeSpinner.getValue();
         TextViewerPreferences.setTextFontSize(val);
         
         Font   font                 =   TextViewerPreferences.getTextFont();
         TextViewer.getInstance().updateFont(font);
         TextViewer.getInstance().repaint();
    }//GEN-LAST:event_textViewerTextFontSizeSpinnerStateChanged
    private void textFontBoldCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_textFontBoldCheckBoxItemStateChanged
        boolean bold =   textFontBoldCheckBox.isSelected();
        TextViewerPreferences.setTextBold(bold);

        Font   font                 =   TextViewerPreferences.getTextFont();
        TextViewer.getInstance().updateFont(font);
        TextViewer.getInstance().repaint();
    }//GEN-LAST:event_textFontBoldCheckBoxItemStateChanged
    private void foregroundColorLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_foregroundColorLabelMousePressed
        Color color              =  TextViewerPreferences.FOREGROUND_COLOR ;
        Color newcolor           = JColorChooser.showDialog(this,"Choose a color", color );
        if (newcolor != null){
            TextViewerPreferences.setForegroundColor(newcolor.getRGB());
            TextViewerPreferences.refreshColors();
            TextViewer.getInstance().updateColors();
            foregroundColorLabel.setBackground( newcolor);
        }
    }//GEN-LAST:event_foregroundColorLabelMousePressed
    private void backgroundColorLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backgroundColorLabelMouseClicked
        Color color              =  TextViewerPreferences.BACKGROUND_COLOR ;
        Color newcolor           = JColorChooser.showDialog(this,"Choose a color", color );
        if (newcolor != null){
            TextViewerPreferences.setBackgroundColor(newcolor.getRGB());
            TextViewerPreferences.refreshColors();
            TextViewer.getInstance().updateColors();
            backgroundColorLabel.setBackground( newcolor);
        }
    }//GEN-LAST:event_backgroundColorLabelMouseClicked
    private void swtDefaultFontInTextViewerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_swtDefaultFontInTextViewerActionPerformed
        Font font  = TextViewerPreferences.resetToDefaultFont();
        textFontNameComboBox .setSelectedItem(TextViewerPreferences.getTextFontName());
        textFontBoldCheckBox.setSelected (TextViewerPreferences.isTextFontBold());
        textViewerTextFontSizeSpinner.setValue(TextViewerPreferences.getTextFontSize());


        //TextViewer.getInstance().updateFont(font);
        //TextViewer.getInstance().repaint();
    }//GEN-LAST:event_swtDefaultFontInTextViewerActionPerformed
    private void monitorSubmmitedJobsCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_monitorSubmmitedJobsCheckBoxStateChanged
         boolean val   = monitorSubmmitedJobsCheckBox.isSelected();
         ApplicationPreferences.setMonitorSubmittedJobsLive(val);
    }//GEN-LAST:event_monitorSubmmitedJobsCheckBoxStateChanged

    private void setHomeDirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setHomeDirButtonActionPerformed
       JFileChooser fc =  new JFileChooser();
       fc.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
       fc.setMultiSelectionEnabled(false);
       fc.setApproveButtonText("Set");
       fc.setDialogTitle("Set Bayesian Application Home Directory");

       int returnVal           =  fc.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
                // remember for future loads

                File  dir    =   fc.getSelectedFile ();
                if (dir.exists() && dir.isDirectory()){

                    StringBuilder sb = new StringBuilder();
                    sb.append("Are you sure you want to change bayesian application\n");
                    sb.append("home directory to "+ dir.getPath()+" ?\n");
                    sb.append("\n");
                    sb.append("This change will require application to quit.\n");
                    sb.append("Upon relaunch, previously set working directories\n");
                    sb.append("will not be automatically exported. \n");
                    sb.append("User will still be able to export (load) old working\n");
                    sb.append("directories in a standard fasion.\n");

                    sb.append("\n");
                    sb.append("We strongly advice against modifying application home directory.\n");
                    sb.append("Unless deemed absolutely necessary,stick with the default directory.\n");
                    sb.append("\n");


                    boolean proceedByDefault            =   false;
                    boolean proceed = DisplayText.popupYesNoDialog(sb.toString(), "Warning", proceedByDefault );


                    if (proceed){
                        ApplicationPreferences.setBayesHomeDir(dir);
                        ApplicationPreferences.getWorkDirs().clear();
                        ApplicationPreferences.resetCurrentWorkDir();

                        homeDirTF.setText(dir.getPath());

                        System.exit(0);
                    }
            }
        }
      
    }//GEN-LAST:event_setHomeDirButtonActionPerformed

    private void resetAllPropertiesToDefaultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetAllPropertiesToDefaultActionPerformed


            StringBuilder sb = new StringBuilder();
            sb.append("Are you sure you want to uninstall applications?\n");
            sb.append("\n");
            sb.append("This will delete all resource files created by applicstions.\n");
            sb.append("Upon execution, application will quit.\n");
            sb.append("When application is run next time, all previous\n");
            sb.append("settings will be lost and reset to defaults. \n");
            sb.append("\n");


            boolean proceedByDefault            =   false;
            boolean proceed = DisplayText.popupYesNoDialog(sb.toString(), "Warning", proceedByDefault );


            if (proceed){
                ApplicationPreferences.resetPreferences();
                ImageViewerPreferences.resetPreferences();
                FidViewerPreferences.resetPreferences();
                TextViewerPreferences.resetPreferences();
                System.exit(0);
            }




    }//GEN-LAST:event_resetAllPropertiesToDefaultActionPerformed

    private void deleteCompletedJobFromServerCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_deleteCompletedJobFromServerCheckBoxItemStateChanged
       boolean delete =  deleteCompletedJobFromServerCheckBox.isSelected();
       ApplicationPreferences.setDeleteCompletedJobFromServer(delete);
    }//GEN-LAST:event_deleteCompletedJobFromServerCheckBoxItemStateChanged

    private void deleteSubmittedJobFromClientCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSubmittedJobFromClientCheckBoxActionPerformed
       boolean delete = deleteSubmittedJobFromClientCheckBox.isSelected();
       ApplicationPreferences.setDeleteSubmittedJobFromClient(delete);
    }//GEN-LAST:event_deleteSubmittedJobFromClientCheckBoxActionPerformed

private void screenShotFormatComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_screenShotFormatComboBoxActionPerformed
     String selection = screenShotFormatComboBox.getSelectedItem().toString();
     ApplicationPreferences.setScreenShotFormat(selection);
     Screenshot.setDefaultType(selection);
     
}//GEN-LAST:event_screenShotFormatComboBoxActionPerformed

private void screenShotFormatComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_screenShotFormatComboBoxItemStateChanged
    
}//GEN-LAST:event_screenShotFormatComboBoxItemStateChanged

    private void printFontSizeSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_printFontSizeSpinnerStateChanged
         int val =  (Integer)   printFontSizeSpinner.getValue();
         TextViewerPreferences.setPrintFontSizeFontSize(val);
    }//GEN-LAST:event_printFontSizeSpinnerStateChanged


    public static JPreferences display(){
        JPreferences dialog =  JPreferences.getInstance();
        dialog.setVisible(true);
        return dialog ;
       
    }
    public  static void displayImagePreferences(){
       JPreferences prefs = display();
       prefs.setImagePreferenceTab();

    }
    public  static void displayFidViewerPreferences(){
       JPreferences prefs = display();
       prefs.setFidPreferenceTab();

    }
    public  static void displayTextViewerPreferences(){
       JPreferences prefs = display();
       prefs.setTextViewerPreferenceTab();

    }
    public void setImagePreferenceTab(){
        this.configurationPane.setSelectedComponent(imageViewerPane);
    }
    public void setFidPreferenceTab(){
        this.configurationPane.setSelectedComponent(fidViewerPane);
    }
    public void setGeneralPreferenceTab(){
        this.configurationPane.setSelectedComponent(generalPrefsPane);
    }
    public void setTextViewerPreferenceTab(){
        this.configurationPane.setSelectedComponent(TextViewerPane);
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JPreferences dialog =  JPreferences.display();
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner ImagePixelValuePrecisionSpinner;
    private javax.swing.JRadioButton MetalLookAndFeelRadioButton;
    private javax.swing.JRadioButton NativeLookAndFeelRadioButton;
    private javax.swing.JPanel TextViewerPane;
    private javax.swing.JCheckBox autoContrastNewImageCheckBox;
    private javax.swing.JLabel backgroundColorLabel;
    private javax.swing.JSpinner buildModelTimeoutSpinner;
    private javax.swing.JButton closeButton;
    private javax.swing.JTabbedPane configurationPane;
    private javax.swing.JSpinner connecitonTimeoutSpinner;
    private javax.swing.JSpinner contrastBarPrecisionSpinner;
    private javax.swing.JLabel cursorColorLabel;
    private javax.swing.JPanel debuggingPane;
    private javax.swing.JCheckBox deleteCompletedJobFromServerCheckBox;
    private javax.swing.JCheckBox deleteSubmittedJobFromClientCheckBox;
    private javax.swing.JSpinner fidCursorPrecisionSpinner;
    private javax.swing.JPanel fidViewerPane;
    private javax.swing.JSpinner fileDownloadBufferSizeMbSpinner;
    private javax.swing.JSpinner fileUploadBufferSizeMbSpinner;
    private javax.swing.JPanel filler;
    private javax.swing.JPanel filler1;
    private javax.swing.JPanel filler2;
    private javax.swing.JLabel foregroundColorLabel;
    private javax.swing.JPanel generalPrefsPane;
    private javax.swing.JFormattedTextField homeDirTF;
    private javax.swing.JCheckBox imageFontBoldCheckBox;
    private javax.swing.JComboBox imageListFontNameComboBox;
    private javax.swing.JSpinner imageListFontSizeSpinner;
    private javax.swing.JPanel imageViewerPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel0;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.ButtonGroup lookAndFeelBG;
    private javax.swing.JPanel mainPane;
    private javax.swing.JCheckBox monitorSubmmitedJobsCheckBox;
    private javax.swing.JRadioButton nimbusRadioButton;
    private javax.swing.JLabel printFontSizeLabel;
    private javax.swing.JSpinner printFontSizeSpinner;
    private javax.swing.JSpinner readTimeoutSpinner;
    private javax.swing.JCheckBox redirectJavaStreamCheckBox;
    private javax.swing.JButton resetAllPropertiesToDefault;
    private javax.swing.JComboBox screenShotFormatComboBox;
    private javax.swing.JButton setHomeDirButton;
    private javax.swing.JCheckBox showTooltipsCheckBox;
    private javax.swing.JButton swtDefaultFontInTextViewer;
    private javax.swing.JLabel tarce1ColorLabel;
    private javax.swing.JLabel tarce2ColorLabel;
    private javax.swing.JPanel textFonPane;
    private javax.swing.JPanel textFonPane1;
    private javax.swing.JCheckBox textFontBoldCheckBox;
    private javax.swing.JComboBox textFontNameComboBox;
    private javax.swing.JSpinner textViewerTextFontSizeSpinner;
    private javax.swing.JCheckBox thresholdImagePixCheckBox;
    private javax.swing.JSpinner toolTipDisplayTimeSpinner;
    private javax.swing.JPanel windowButtonPane;
    // End of variables declaration//GEN-END:variables


    public static  String [] getFonts() {
     GraphicsEnvironment ge =  GraphicsEnvironment.getLocalGraphicsEnvironment();
     String fontNames[]     = ge.getAvailableFontFamilyNames();

     return fontNames;
    }
}
