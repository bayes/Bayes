/*
 * BayesIntro.java
 *
 * Created on February 26, 2008, 2:36 PM
 */

package bayes;
import image.ImageIO;
import java.awt.*;
import utilities. ModelDescriptor;
import java.awt.image.BufferedImage;
import org.jdesktop.application.Application;
import org.jdesktop.application.ResourceMap;
import utilities.BrowserLaunch;

/**
 *
 * @author  apple
 */
public class BayesIntro extends javax.swing.JPanel {
     private ModelDescriptor modelDescriptor = null;
     public static String info  =
             "<html>"+
             "Bayesian Analysis Software developed by<br>"+
             "Larry Bretthorst, Ph.D.<br>"+
             "Research Associate Professor of Radiology<br>"+
             "Washington University St. Louis, MO<br>"+
              "gbretthorst@wustl.edu"+
              "<html>";


     /** Creates new form BayesIntro */
    public BayesIntro () {
        try{
             ModelDescriptor  md  = Serialize.getDeserializedModelDescriptor();
             if (md != null){this.setModelDescriptor(md);}

        }
        catch(Exception exp){exp.printStackTrace();}
       

        initComponents ();

      

    }
    private  BufferedImage getBackgroundImage() {
     BufferedImage  mImage        =   null;
     try{
      ResourceMap resourceMap = Application.
                       getInstance(bayes.BayesApp.class).
                                getContext().getResourceMap(BayesIntro.class); 
    
      String name;
        double random = Math.random();
        if (random < 0.33){
            name = "bt.gif";
        }
        else if ((random < 0.66)){
            name = "sum.gif";
        }
        else{
            name = "product.gif";
        }
       
       String filename              =   resourceMap.getResourcesDir() + name;
       background_url               =   resourceMap.getClassLoader().getResource(filename);
      
      
         // mImage                    = javax.imageio.ImageIO.read(background_url);
           mImage                =    ImageIO.url2BufferedImage(background_url);
       }
       catch (Exception e){
           e.printStackTrace();

       }
       finally{
         return mImage;
       }
      
    }
      public Image getTiledImage(Image tile, double width, double height){
        int tileWidth       =       tile.getWidth(this);
	int tileHeight      =       tile.getHeight(this);
        double w            =       Math.ceil(width / tileWidth);
        double h            =       Math.ceil(height / tileHeight );
        int NumberX         =       (int)w;
	int NumberY         =       (int)h;

        Image Buffer        =   createImage(NumberX * tileWidth, NumberY * tileHeight);
	Graphics BufferG    =   Buffer.getGraphics();

	for (int i = 0;i <= NumberY; i++){
            for (int j = 0;j <= NumberX; j++){

                    BufferG.drawImage(tile, j*tileWidth, i*tileHeight,
                    tileWidth, tileHeight, this);
            }
	}
        return Buffer;
    }
    /** This method is called from within the constructor to
     * getBackgroundImageURL the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextArea1 = new javax.swing.JTextArea();
        jTextArea2 = new javax.swing.JTextArea();
        title_pane = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        restore_btn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        IconLinkButton = new javax.swing.JButton();
        curWorkDirLabel = new javax.swing.JLabel();

        FormListener formListener = new FormListener();

        setBackground(new java.awt.Color(204, 204, 204));
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(bayes.BayesApp.class).getContext().getResourceMap(BayesIntro.class);
        setForeground(resourceMap.getColor("foreground")); // NOI18N

        jTextArea1.setBackground(new java.awt.Color(238, 238, 238));
        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jTextArea1.setForeground(new java.awt.Color(0, 0, 153));
        jTextArea1.setRows(5);
        jTextArea1.setTabSize(2);
        jTextArea1.setText("\t\n\tBayesian Analysis Software developed by\n \tLarry Bretthorst, Ph.D.\n  \tResearch Associate Professor of Radiology\n  \tWashington University St. Louis, MO\n  \tgbretthorst@wustl.edu"); // NOI18N
        jTextArea1.setBorder(null);

        jTextArea2.setBackground(new java.awt.Color(238, 238, 238));
        jTextArea2.setColumns(20);
        jTextArea2.setEditable(false);
        jTextArea2.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jTextArea2.setForeground(new java.awt.Color(0, 0, 153));
        jTextArea2.setRows(5);
        jTextArea2.setTabSize(2);
        jTextArea2.setText("\t\n\tJava Interface developed by\n \tKaren Marutyan, Ph.D. \n\tPlease direct all questions concerning the interface \n\tand the Bayesian Calculations to Larry Bretthorst.\n  \t"); // NOI18N
        jTextArea2.setBorder(null);
        jTextArea2.setOpaque(false);

        title_pane.setOpaque(false);
        title_pane.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 40));
        jLabel1.setForeground(new java.awt.Color(0, 0, 153));
        jLabel1.setText("Bayesian Analysis of Common NMR Problems");
        title_pane.add(jLabel1);

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 28));
        jLabel2.setForeground(new java.awt.Color(0, 0, 153));
        jLabel2.setText("Developed at Washington University in St. Louis");
        title_pane.add(jLabel2);

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 1, 28)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 153));
        jLabel4.setText("Mallinckrodt Institute of Radiology");
        title_pane.add(jLabel4);

        restore_btn.setFont(new java.awt.Font("Helvetica", 1, 20));
        restore_btn.setText("RESTORE ANALYSIS"); // NOI18N
        restore_btn.setToolTipText("<html>\n\n<font color=\"black\"><bold> \nRestore package that was previously<br>\nstored in the current working directory. \n</font></bold>  \n\n<html>\n\n"); // NOI18N
        restore_btn.setIconTextGap(10);
        restore_btn.addActionListener(formListener);

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Bookman Old Style", 0, 18));
        jLabel5.setText("<html>  To start new analysis select the package you wish to run under \n <font color=\"blue\" size = \"+1\"><bold>Package</font></bold> \n menu.  \n</html>"); // NOI18N

        IconLinkButton.setBackground(new java.awt.Color(255, 255, 255));
        IconLinkButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/Washington_University_Medical_School_Logo.png"))); // NOI18N
        IconLinkButton.addActionListener(formListener);

        curWorkDirLabel.setBackground(new java.awt.Color(255, 255, 255));
        curWorkDirLabel.setFont(new java.awt.Font("Bookman Old Style", 0, 18));
        curWorkDirLabel.setText( getDescriptorText());

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(48, 48, 48)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(title_pane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 949, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 734, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(curWorkDirLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 759, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(18, 18, 18)
                        .add(IconLinkButton))
                    .add(restore_btn)
                    .add(layout.createSequentialGroup()
                        .add(jTextArea1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 379, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jTextArea2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 429, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        layout.linkSize(new java.awt.Component[] {curWorkDirLabel, jLabel5}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(16, 16, 16)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(curWorkDirLabel))
                    .add(IconLinkButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 117, Short.MAX_VALUE)
                .add(restore_btn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(107, 107, 107)
                .add(title_pane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextArea1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jTextArea2))
                .add(640, 640, 640))
        );

        boolean canRestore = (getModelDescriptor() != null);

        restore_btn.setVisible(canRestore);
        curWorkDirLabel.setVisible(canRestore);
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == restore_btn) {
                BayesIntro.this.restore_btnActionPerformed(evt);
            }
            else if (evt.getSource() == IconLinkButton) {
                BayesIntro.this.IconLinkButtonActionPerformed(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private void restore_btnActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restore_btnActionPerformed
         BayesApp ba                =   (BayesApp)BayesApp.getInstance();
         BayesView bayesView        =   ba.bayesView;
         String dir                 =   DirectoryManager.getExperimentDirName();
         
        
        System.out.println("Start restoring package");
        if ( getModelDescriptor() == null){
            bayesView.doNoModelSelected("No experiment is previously saved in " + dir);
        }
         else {
            bayesView.checkSelectedPackage(getModelDescriptor());
         }
}//GEN-LAST:event_restore_btnActionPerformed
    private void IconLinkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IconLinkButtonActionPerformed
        BrowserLaunch.openURL("http://medschool.wustl.edu/");
    }//GEN-LAST:event_IconLinkButtonActionPerformed
    

    public String getRestoreText(){
        ModelDescriptor md =    getModelDescriptor();
        String text        =    "Restore Working Dir:";
        if (md != null){
            text           =    "<html>  "              +
                                "Restore Previously "   + "<br> " +
                                "Saved Analysis"        +
                                "<html>";
           
        }


        return text;
    }
    public String getDescriptorText(){
        ModelDescriptor md =    getModelDescriptor();
        String dir         =    DirectoryManager.getExperimentDirName();
        String text        =    "";
        if (md != null){
            text           =    "<html>  " +
                                //"<font color=\"blue\" size = \"+1\"><bold>"+
                                "To restore analysis "+
                                 "<font face=\"Bookman Old Style, Book Antiqua, Garamond\" color=\"red\" size = \"+1\"> "+
                                 md.getModelClass().getSimpleName()+
                                 "</font>"+
                                " saved in " +  
                                  "<font face=\"Bookman Old Style, Book Antiqua, Garamond\" color=\"red\" size = \"+1\" >  "+
                                 dir +
                                "</font>"+
                                ", press " +
                                "<font color=\"blue\" size = \"+1\"><bold>"+
                                "\"Restore Analysis\"" +
                                "</font></bold>"+
                                " button."+
                                "<html>";

        }


        return text;
    }
    public String getPackageText(){
        ModelDescriptor md =    getModelDescriptor();
        String text        =    "None";
        if (md != null){
            text           =     md.getModelTitle();
        }


        return text;
    }

    @Override
    public void paintComponent(Graphics g)
    {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D) g;
        bimage =  getBackgroundImage();
        try{
            if (bimage != null){
                //java.awt.geom.Rectangle2D tr = new   java.awt.geom.Rectangle2D.Double(0, 0, bimage .getWidth(), bimage.getHeight());
                //TexturePaint tp = new TexturePaint(bimage , tr);
                //g2.setPaint(tp);
                 //g2.setPaint(Color.BLUE);
                java.awt.geom.Rectangle2D  r =  (java.awt.geom.Rectangle2D)this.getBounds();
               // g2.fill(r);
                Image i                 = getTiledImage(bimage, r.getWidth(), r.getHeight());
                BufferedImage bg        =   ImageIO.toBufferedImage(i );
                g.drawImage( bg,0, 0, this);
            }
          
        } catch(Exception exp){
            exp.printStackTrace();
        }
        catch (Error r){r.printStackTrace();}
   
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton IconLinkButton;
    private javax.swing.JLabel curWorkDirLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JButton restore_btn;
    private javax.swing.JPanel title_pane;
    // End of variables declaration//GEN-END:variables
    
    java.net.URL background_url;
    BufferedImage bimage =  getBackgroundImage() ;

    public ModelDescriptor getModelDescriptor() {
        return modelDescriptor;
    }
    public void setModelDescriptor(ModelDescriptor modelDescriptor) {
        this.modelDescriptor = modelDescriptor;
    }



       public String getModelTitle ( Class modelClass ) {
        String title    = null;
/*
        if  (modelClass == BayesExponential.class){
            title  =
            setConstrArg(null);

        }

        else if (getModelClass( ) ==  BayesDiffTensor.class){
            setModelTitle("Diffusion Tensor Package");
            setConstrArg(null);

        }

        else if (getModelClass( ) ==   BayesMtZ.class){
            setModelTitle("Magnetization Transfer");
            setConstrArg(null);

        }
        else if (getModelClass( ) ==    BayesMtZKinetics.class){
            setModelTitle("Bayesian Magnetization Transfer Kinetics");
            setConstrArg(null);

        }
        else if (getModelClass( ) ==     BayesPolynomial.class){
            setModelTitle("Given and Unknown Number of Polinomials");
            setConstrArg(null);

        }
        else if (getModelClass( ) ==     BayesBF.class){
            setModelTitle("Behrens-Fisher Package");
            setConstrArg(null);

        }
        else if (getModelClass( ) ==      BayesErrInVarsGiven.class){
            setModelTitle("Error In Variations Given Package");
            setConstrArg(null);

        }
        else if (getModelClass( ) ==      BayesErrInVarsGiven.class){
            setModelTitle("Error In Variations Given Package");
            setConstrArg(null);

        }
        else if (getModelClass( ) ==     BayesEnterAscii.class){
            setModelTitle("Bayesian Build Your Own 1D Model");
            setConstrArg(null);

        }
        else if (getModelClass( ) ==     BayesEnterAsciiModel.class){
            setModelTitle("Bayes Ascii Model Selection");
            setConstrArg(null);

        }
        else if (getModelClass( ) ==      BayesDensityEstimation.class){
            setModelTitle("Bayes Density Function Estimation");
            setConstrArg(null);

        }
        else if (getModelClass( ) ==       BayesEnterAsciiPreloaded.class){
            setModelTitle("Bayes Density Function Estimation");
            setConstrArg(null);

        }


        md                      = new  ModelDescriptor();
        md.setModelClass( BayesEnterAsciiPreloaded.class);
        md.setModelTitle("Bayes Contact Time Model");
        md.setConstrArg("ContactTime.f");
        getModelDescrptorMap().put(        getContactTimeMenuItem(),md);




        md                      = new  ModelDescriptor();
        md.setModelClass(  BayesEnterAsciiPreloaded.class);
        md.setModelTitle("Bayes Magnitization Transfer With One Big Z Site");
        md.setConstrArg("MtZBig.f");
        getModelDescrptorMap().put(        getMtZBigMenuItem(),md);



        md                      = new  ModelDescriptor();
        md.setModelClass( BayesEnterAsciiPreloaded.class);
        md.setModelTitle("Bayes Redor Dipolor Coupling");
        md.setConstrArg("RedorDpC.f");
        getModelDescrptorMap().put(        getRedoDpCMenuItem(),md);


        md                      = new  ModelDescriptor();
        md.setModelClass(  BayesEnterAsciiPreloaded.class);
        md.setModelTitle("Bayesian Analysis of Inversion Recovery Data");
        md.setConstrArg("InvRec.f");
        getModelDescrptorMap().put(      getInversionRecoverylMenuItem(),md);


        md                      = new  ModelDescriptor();
        md.setModelClass(  BayesWater.class);
        md.setModelTitle("Bayes Water");
        md.setConstrArg(null);
        getModelDescrptorMap().put(       getBayesWaterMenuItem(),md);


        md                      = new  ModelDescriptor();
        md.setModelClass(  BayesMetabolite.class);
        md.setModelTitle("Bayes Metabolite");
        md.setConstrArg(null);
        getModelDescrptorMap().put(       getBayesMetaboliteMenuItem(),md);


        md                      = new  ModelDescriptor();
        md.setModelClass(   BayesAnalyze.class);
        md.setModelTitle("Bayes Analyze");
        md.setConstrArg(null);
        getModelDescrptorMap().put(       getBayesAnalyzeMenuItem(),md);


        md                      = new  ModelDescriptor();
        md.setModelClass(    BayesFindResonances.class);
        md.setModelTitle("Bayes Find Resonances");
        md.setConstrArg(null);
        getModelDescrptorMap().put(       getFindResMenuItem(),md);


        md                      = new  ModelDescriptor();
        md.setModelClass(    BayesPhase.class);
        md.setModelTitle("Bayes Phase Linear");
        md.setConstrArg(null);
        getModelDescrptorMap().put(       getBayesPhaseTestMenuItem(),md);

        md                      = new  ModelDescriptor();
        md.setModelClass(    BayesPhaseNonlinear.class);
        md.setModelTitle("Bayes Phase Nonlinear");
        md.setConstrArg(null);
        getModelDescrptorMap().put(       getBayesPhaseNonLinearMenuItem(),md);

        md                      = new  ModelDescriptor();
        md.setModelClass(   AnalyzeImagePixels.class);
        md.setModelTitle("Analyze Image Pixels");
        md.setConstrArg(null);
        getModelDescrptorMap().put(    getAnalyzeImagePixelMenuItem(),md );

        md                      = new  ModelDescriptor();
        md.setModelClass(  ImageModelSelection.class);
        md.setModelTitle("Bayes Image Model Selection");
        md.setConstrArg(null);
        getModelDescrptorMap().put(   getImageModelSelectionMenuItem(),md );
        */

        return null;
    }
}
