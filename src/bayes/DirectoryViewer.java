/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JEditViewWorkDir.java
 *
 * Created on Sep 2, 2009, 10:32:52 AM
 */

package bayes;
import interfacebeans.*;
import java.awt.MouseInfo;
import java.awt.Point;
import java.util.*;
import javax.swing.*;
import java.util.regex.*;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;
import load.SaveExperimentGUI;
import utilities.DisplayText;
/**
 *
 * @author apple
 */
public class DirectoryViewer extends javax.swing.JDialog  implements bayes.ApplicationConstants{
   private static final long serialVersionUID      = 7556472295622576147L;
   private String currenWorkingDir                 = null;
   private static JFrame parent ;
   private static  DirectoryViewer instance        =   null ;
   StyledDocument document;
   private boolean isSavedDirectory                 =   false;
   private static boolean showSavedDirectory        =   false;

     {
        StyleContext context    = new StyleContext();
        document                = new DefaultStyledDocument(context);

        Style style = context.getStyle(StyleContext.DEFAULT_STYLE);
        StyleConstants.setAlignment(style, StyleConstants.ALIGN_LEFT);


    }



    /** Creates new form JEditViewWorkDir */
   private DirectoryViewer(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
   private DirectoryViewer() {
        this(parent, true);
    }
   public static DirectoryViewer getInstance(){
       if (instance == null){
            instance = new DirectoryViewer();
       }
       return instance;
   }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList = new javax.swing.JList();
        addButton = new javax.swing.JButton();
        textField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        messagPane =  new AntiAliasedTextPane(document);
        changeDirButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        saveDirButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("View and Edit Working Directories");
        setModal(true);
        setName("Form"); // NOI18N

        jSplitPane1.setName("jSplitPane1"); // NOI18N

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jScrollPane1.setAutoscrolls(true);
        jScrollPane1.setFocusable(false);
        jScrollPane1.setName("jScrollPane1"); // NOI18N
        jScrollPane1.setPreferredSize(new java.awt.Dimension(262, 500));

        jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList.setName("jList"); // NOI18N
        jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jScrollPane1, gridBagConstraints);

        addButton.setText("New"); // NOI18N
        addButton.setToolTipText("<html>\n\nCreate new working directory.\n\n</html>"); // NOI18N
        addButton.setName("addButton"); // NOI18N
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        jPanel1.add(addButton, gridBagConstraints);

        textField.setName("textField"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 4.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(textField, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Academy Engraved LET", 0, 18));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("List of Working Directories");
        jLabel1.setName("jLabel1"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabel1, gridBagConstraints);

        jSplitPane1.setLeftComponent(jPanel1);

        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel3.setName("jPanel3"); // NOI18N
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel2.setFont(new java.awt.Font("Academy Engraved LET", 0, 18));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Working Directory Information and Content ");
        jLabel2.setName("jLabel2"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jLabel2, gridBagConstraints);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        messagPane.setFont(new java.awt.Font("Monospaced", 0, 14));
        messagPane.setName("messagPane"); // NOI18N
        messagPane.setOpaque(false);
        jScrollPane2.setViewportView(messagPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jScrollPane2, gridBagConstraints);

        changeDirButton.setText("Load Directory"); // NOI18N
        changeDirButton.setName("changeDirButton"); // NOI18N
        changeDirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeDirButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(changeDirButton, gridBagConstraints);

        removeButton.setText("Delete Directory"); // NOI18N
        removeButton.setName("removeButton"); // NOI18N
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(removeButton, gridBagConstraints);

        saveDirButton.setText("Save Directory"); // NOI18N
        saveDirButton.setName("saveDirButton"); // NOI18N
        saveDirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveDirButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(saveDirButton, gridBagConstraints);

        jSplitPane1.setRightComponent(jPanel3);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jPanel2.setName("jPanel2"); // NOI18N

        closeButton.setText("CLOSE"); // NOI18N
        closeButton.setName("closeButton"); // NOI18N
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(889, Short.MAX_VALUE)
                .add(closeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(10, 10, 10))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(closeButton)
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        String str = textField.getText().trim();
        if (str == null || str.length() ==0){return;}

        if (Pattern.matches(".*\\s+.*", str)) {
            JOptionPane.showMessageDialog(new JFrame(),
                    "Single word, please. No spaces are allowed.",
                    "Message",  JOptionPane.WARNING_MESSAGE);
            return;
        }

        boolean conflictingName =  ApplicationPreferences.isConflictingWorkDirName(str);
        if (conflictingName){
            JOptionPane.showMessageDialog(new JFrame(),
                "Directory \""+ str +"\" already exists.\n" +
                "Directory names are case-insensitive.\n" +
                "Please use different name.",
                "Message",  JOptionPane.WARNING_MESSAGE);
            return;
        }

       


        boolean isAdded = ApplicationPreferences.addToWorkDirList(str);
        updateExperimentList();
        getJDirList().setSelectedValue(str, true);

        repaint();
}//GEN-LAST:event_addButtonActionPerformed
    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        if (getJDirList().isSelectionEmpty()){return ;}

        String selectedDir      =   getJDirList().getSelectedValue().toString();


        DirectoryManager.deliteDirectory(selectedDir );
        updateExperimentList();

       repaint();
}//GEN-LAST:event_removeButtonActionPerformed
    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        close();
}//GEN-LAST:event_closeButtonActionPerformed
    private void jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListValueChanged
        if(  evt.getValueIsAdjusting() == true){return;}
       else if( getJDirList().isSelectionEmpty() == true){
            getMessagPane().setText("");
           return;
       }
       else{

            String dir = getJDirList().getSelectedValue().toString();
            updateDirInfo(dir);
       }

    }//GEN-LAST:event_jListValueChanged

    private void changeDirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeDirButtonActionPerformed
       if (this.getJDirList().isSelectionEmpty() == true){
            DisplayText.popupErrorMessage(  "Please, make sure that working directory\n" +
                                            "is selected in the working directory list." );
                                           
       }
       else {
            String cwd          = getJDirList().getSelectedValue().toString();


    

            setCurrenWorkingDir( cwd);
            close();
       }


    }//GEN-LAST:event_changeDirButtonActionPerformed

private void saveDirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveDirButtonActionPerformed
    SaveExperimentGUI.showDialog();
}//GEN-LAST:event_saveDirButtonActionPerformed
    public void close(){
               if (this.isModal()) {this.dispose();}
        else {  this.setVisible(false) ; }
    }
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DirectoryViewer dialog = new DirectoryViewer(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    public static  DirectoryViewer showDialog(List <String> aList, String curDir){
            Point p = MouseInfo.getPointerInfo().getLocation();
            return showDialog (aList, curDir,p.x, p.y);
    }
    public static  DirectoryViewer showDialog(List <String> aList, String curDir, int x, int y){
         DirectoryViewer  inst = getInstance();

         inst.updateDirectories( curDir);
         inst.setLocation(x, y);
         inst.setVisible(true);
         return inst;
    }



    public void updateDirectories(String curDir){
           setCurrenWorkingDir(curDir);

           // update gui
           updateExperimentList();
              
           getJDirList().setSelectedValue( curDir, true);

    }
    public void updateDirInfo( String curDir){
            String info    = bayes.DirectoryInfo.getWorkingDirInfo(curDir);
             getMessagPane().setText(info);
             getMessagPane().setCaretPosition(0);



    }
    public void updateExperimentList(){
        DefaultListModel dm         =   new DefaultListModel();
        List <String> dirs    =   ApplicationPreferences.getWorkDirs();
        for (String string : dirs) {
                         dm.addElement(string);
        }
       // Collections.sort(dirs, String.CASE_INSENSITIVE_ORDER);
        
        getJDirList().setModel( dm );
        getJDirList().revalidate();

    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton changeDirButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList jList;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextPane messagPane;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton saveDirButton;
    private javax.swing.JTextField textField;
    // End of variables declaration//GEN-END:variables
    public javax.swing.JList getJDirList() {
        return jList;
    }
    public javax.swing.JTextPane getMessagPane() {
        return messagPane;
    }

    public String       getCurrenWorkingDir() {
        return currenWorkingDir;
    }
    public void         setCurrenWorkingDir(String currenWorkingDir) {
        this.currenWorkingDir = currenWorkingDir;
    }

   

    public boolean isSavedDirectory() {
        return isSavedDirectory;
    }

    public void setSavedDirectory(boolean isSavedDirectory) {
        this.isSavedDirectory = isSavedDirectory;
    }

    public static boolean isShowSavedDirectory() {
        return showSavedDirectory;
    }

    public static void setShowSavedDirectory(boolean ashowSavedDirectory) {
        showSavedDirectory = ashowSavedDirectory;
    }


  



}
