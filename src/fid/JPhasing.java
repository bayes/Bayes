/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JPhase.java
 *
 * Created on Dec 14, 2010, 8:41:41 PM
 */

package fid;


import bayes.Enums.FID_DATA_TYPE;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.data.xy.XYSeries;
import javax.swing.JSpinner;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import java.awt.geom.Ellipse2D;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import java.awt.Color;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.Pannable;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.ChartPanel;
import org.jfree.data.xy.XYSeriesCollection;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JTextField;
import static java.lang.Math.*;

/**
 *
 * @author apple
 */
public class JPhasing extends javax.swing.JDialog {
    public static final int MAXIMUM_TIME_SLIDER             = 100;
    public static final int MAXIMUM_PHASE_SLIDER            = 180;
    public static final double MAX_VAL_FOR_TIME_TEXTFIELD   = 1;
    private final XYSeriesCollection  xydataset             =   new  XYSeriesCollection();
    private ChartPanel chartPanel                           =   null;
    public float delay                                      =   0;
    public float time0                                      =   0;
    private FidViewable viewer                              =   null;
    private static JPhasing  instance                         =   null;
    private FormListener formListener                       = null;

    private JPhasing(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    private  ChartPanel initializeChartPanel(){
        /*
        JFreeChart chart   = ChartFactory.createXYLineChart(
                                null, null, null,xydataset,PlotOrientation.VERTICAL,
                                false, false, false    );


        XYPlot plot         =   (XYPlot)chart .getPlot();
         *   NumberAxis rangeaxis = (NumberAxis)chart.getXYPlot().getRangeAxis();
        rangeaxis.setAutoRangeIncludesZero(false);
        */
      
       NumberAxis rangeaxis =  new NumberAxis();
       rangeaxis.setAutoRangeIncludesZero(false);
       
       NumberAxis doaminaxis =  new NumberAxis();
       doaminaxis.setInverted(true);


        final  XYItemRenderer renderer             = new XYLineAndShapeRenderer();
        XYPlot plot              =  new FastXYPlot(     xydataset,
                                                        doaminaxis,
                                                        rangeaxis,
                                                        renderer );
        JFreeChart chart           = new JFreeChart (plot) ;

        plot.setBackgroundPaint(Color.WHITE);
        plot.setRangeGridlinePaint(Color.BLACK  );
        plot.setDomainGridlinePaint(Color.BLACK );
        chart.getLegend().setVisible(false);

        setRenderrer(plot);

        ChartPanel achartPane   =  new ChartPanel(chart);
        achartPane.setMouseZoomable(true);
        achartPane.setMouseWheelEnabled(true);

        boolean isPannable = ( plot instanceof Pannable);
        if (isPannable ){
               plot.setDomainPannable(true);
                plot.setRangePannable(true);
         }
 // System.out.println(" Stop Initializing chart panel Ascii data viewer");
        return  achartPane;
   }
    private  void setRenderrer( XYPlot plot){

        XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot.getRenderer();
        renderer.setAutoPopulateSeriesStroke(false);
        renderer.setAutoPopulateSeriesShape(false);
        renderer.setBaseShape(new Ellipse2D.Double(-1.0, -1.0, 2.0, 2.0));
        renderer.setBaseStroke  (   new java.awt.BasicStroke(1), true);
        renderer.setBaseLinesVisible(true);
       // renderer.setBaseShape(new Ellipse2D.Double(-1.0, -1.0, 2.0, 2.0));

        renderer.setBaseShapesVisible(true);
        renderer.setBaseShapesFilled(false);

   }

    private static JPhasing getInstance( ) {
      if(instance == null) {
         instance = new JPhasing(null, true);

      }

      return instance;
   }


    public static  JPhasing showDialog(FidViewable aviewer ){
        getInstance().setViewer(aviewer);
        getInstance( ).setGuiFromViewer();
        getInstance( ).setVisible(true);

       return instance;
    }
    public static void hideDialog( ){

        getInstance( ).setVisible(false);

    }
   

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        mainPane = new javax.swing.JPanel();
        toolPane = new javax.swing.JPanel();
        prder0_label = new javax.swing.JLabel();
        phase_slider = new javax.swing.JSlider();
        phaseField = new javax.swing.JFormattedTextField();
        time_slider = new javax.swing.JSlider();
        timeField = new javax.swing.JFormattedTextField();
        order1_label = new javax.swing.JLabel();
        trace_lbl1 = new javax.swing.JLabel();
        track_spinner = new JSpinner();
        FID_DATA_TYPE [] types = new FID_DATA_TYPE []{FID_DATA_TYPE.SPECTRUM_REAL, FID_DATA_TYPE.SPECTRUM_IMAG, FID_DATA_TYPE.SPECTRUM_COMPLEX};
        data_type_cb = new javax.swing.JComboBox(types );
        invertDomainAxisCB = new javax.swing.JCheckBox();
        chartPanel = this.initializeChartPanel();
        chartPane = chartPanel;
        cancelClosePane = new javax.swing.JPanel();
        reset_ = new javax.swing.JButton();
        close_ = new javax.swing.JButton();
        applyPhaseToEntireFid = new javax.swing.JButton();

        FormListener formListener1 = new FormListener();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Preview and Phase Spectra"); // NOI18N

        mainPane.setName("mainPane"); // NOI18N
        mainPane.setLayout(new java.awt.BorderLayout());

        toolPane.setName("toolPane"); // NOI18N

        prder0_label.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        prder0_label.setText("0-order phase correction (degrees)");
        prder0_label.setName("prder0_label"); // NOI18N

        phase_slider.setBackground(new java.awt.Color(0, 0, 0));
        phase_slider.setForeground(new java.awt.Color(255, 255, 0));
        phase_slider.setMajorTickSpacing(180);
        phase_slider.setMaximum(MAXIMUM_PHASE_SLIDER);
        phase_slider.setMinimum(-MAXIMUM_PHASE_SLIDER);
        phase_slider.setMinorTickSpacing(1);
        phase_slider.setSnapToTicks(true);
        phase_slider.setValue(0);
        phase_slider.setName("phase_slider"); // NOI18N
        phase_slider.addChangeListener(formListener1);

        phaseField.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.darkGray, java.awt.Color.lightGray));
        phaseField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        phaseField.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        phaseField.setInputVerifier(new PhaseTetxFieldVerifier());
        phaseField.setMinimumSize(new java.awt.Dimension(4, 10));
        phaseField.setName("phaseField"); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, phase_slider, org.jdesktop.beansbinding.ELProperty.create("${value}"), phaseField, org.jdesktop.beansbinding.BeanProperty.create("value"));
        binding.setSourceNullValue(0);
        binding.setSourceUnreadableValue(0);
        bindingGroup.addBinding(binding);

        time_slider.setBackground(new java.awt.Color(0, 0, 0));
        time_slider.setMajorTickSpacing(MAXIMUM_TIME_SLIDER);
        time_slider.setMaximum(MAXIMUM_TIME_SLIDER);
        time_slider.setMinimum(-MAXIMUM_TIME_SLIDER);
        time_slider.setMinorTickSpacing(2);
        time_slider.setSnapToTicks(true);
        time_slider.setValue(0);
        time_slider.setName("time_slider"); // NOI18N
        time_slider.addChangeListener(formListener1);

        timeField.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.darkGray, java.awt.Color.lightGray));
        timeField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        timeField.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        timeField.setInputVerifier(new TimeDelayTetxFieldVerifier ());
        timeField.setMinimumSize(new java.awt.Dimension(4, 10));
        timeField.setName("timeField"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, time_slider, org.jdesktop.beansbinding.ELProperty.create("${value}"), timeField, org.jdesktop.beansbinding.BeanProperty.create("value"));
        binding.setSourceNullValue(0);
        binding.setSourceUnreadableValue(0);
        bindingGroup.addBinding(binding);

        timeField.addActionListener(formListener1);

        order1_label.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        order1_label.setText("1-order phase correction (relative units)");
        order1_label.setName("order1_label"); // NOI18N

        trace_lbl1.setBackground(new java.awt.Color(0, 0, 0));
        trace_lbl1.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        trace_lbl1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        trace_lbl1.setText("Trace");
        trace_lbl1.setName("trace_lbl1"); // NOI18N

        track_spinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 1, 0));
        track_spinner.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nChoose FID trace to display. \n\n\n</font></p><html>"); // NOI18N
        track_spinner.setMinimumSize(new java.awt.Dimension(30, 15));
        track_spinner.setName("track_spinner"); // NOI18N
        track_spinner.setOpaque(true);
        track_spinner.setPreferredSize(new java.awt.Dimension(31, 17));
        track_spinner.addChangeListener(formListener1);
        this.formListener  = formListener;

        data_type_cb.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        data_type_cb.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nChoose plot type to display.\n\n\n</font></p><html>"); // NOI18N
        data_type_cb.setMinimumSize(new java.awt.Dimension(80, 27));
        data_type_cb.setName("data_type_cb"); // NOI18N
        data_type_cb.setSelectedItem(FID_DATA_TYPE.SPECTRUM_REAL);
        data_type_cb.addActionListener(formListener1);

        invertDomainAxisCB.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        invertDomainAxisCB.setSelected(getDomainAxis().isInverted());
        invertDomainAxisCB.setText("Inverted frequency axis");
        invertDomainAxisCB.setName("invertDomainAxisCB"); // NOI18N
        invertDomainAxisCB.addChangeListener(formListener1);

        org.jdesktop.layout.GroupLayout toolPaneLayout = new org.jdesktop.layout.GroupLayout(toolPane);
        toolPane.setLayout(toolPaneLayout);
        toolPaneLayout.setHorizontalGroup(
            toolPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(toolPaneLayout.createSequentialGroup()
                .add(10, 10, 10)
                .add(toolPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(toolPaneLayout.createSequentialGroup()
                        .add(trace_lbl1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(track_spinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(data_type_cb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 205, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(invertDomainAxisCB))
                    .add(toolPaneLayout.createSequentialGroup()
                        .add(prder0_label)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(phaseField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 105, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(toolPaneLayout.createSequentialGroup()
                        .add(order1_label)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(timeField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 108, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(phase_slider, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 990, Short.MAX_VALUE)
                    .add(time_slider, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 990, Short.MAX_VALUE))
                .add(16, 16, 16))
        );

        toolPaneLayout.linkSize(new java.awt.Component[] {order1_label, prder0_label}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        toolPaneLayout.setVerticalGroup(
            toolPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(toolPaneLayout.createSequentialGroup()
                .add(toolPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(toolPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(data_type_cb, 0, 0, Short.MAX_VALUE)
                        .add(invertDomainAxisCB))
                    .add(toolPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(track_spinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(trace_lbl1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(toolPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(prder0_label)
                    .add(phaseField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(phase_slider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(13, 13, 13)
                .add(toolPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(order1_label, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(timeField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(time_slider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(9, Short.MAX_VALUE))
        );

        toolPaneLayout.linkSize(new java.awt.Component[] {data_type_cb, invertDomainAxisCB, trace_lbl1, track_spinner}, org.jdesktop.layout.GroupLayout.VERTICAL);

        toolPaneLayout.linkSize(new java.awt.Component[] {order1_label, phaseField, prder0_label, timeField}, org.jdesktop.layout.GroupLayout.VERTICAL);

        mainPane.add(toolPane, java.awt.BorderLayout.NORTH);

        chartPane.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153), java.awt.Color.white, new java.awt.Color(102, 102, 102)), "Phased Spectrum Preview", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP));
        chartPane.setName("chartPane"); // NOI18N

        org.jdesktop.layout.GroupLayout chartPaneLayout = new org.jdesktop.layout.GroupLayout(chartPane);
        chartPane.setLayout(chartPaneLayout);
        chartPaneLayout.setHorizontalGroup(
            chartPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 1002, Short.MAX_VALUE)
        );
        chartPaneLayout.setVerticalGroup(
            chartPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 309, Short.MAX_VALUE)
        );

        mainPane.add(chartPane, java.awt.BorderLayout.CENTER);

        getContentPane().add(mainPane, java.awt.BorderLayout.CENTER);

        cancelClosePane.setName("cancelClosePane"); // NOI18N

        reset_.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        reset_.setText("RESET");
        reset_.setName("reset_"); // NOI18N
        reset_.addActionListener(formListener1);

        close_.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        close_.setText("CLOSE");
        close_.setName("close_"); // NOI18N
        close_.addActionListener(formListener1);

        applyPhaseToEntireFid.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        applyPhaseToEntireFid.setText("PHASE FID");
        applyPhaseToEntireFid.setName("applyPhaseToEntireFid"); // NOI18N
        applyPhaseToEntireFid.addActionListener(formListener1);

        org.jdesktop.layout.GroupLayout cancelClosePaneLayout = new org.jdesktop.layout.GroupLayout(cancelClosePane);
        cancelClosePane.setLayout(cancelClosePaneLayout);
        cancelClosePaneLayout.setHorizontalGroup(
            cancelClosePaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, cancelClosePaneLayout.createSequentialGroup()
                .addContainerGap(662, Short.MAX_VALUE)
                .add(reset_, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 106, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(applyPhaseToEntireFid, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 106, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(close_))
        );

        cancelClosePaneLayout.linkSize(new java.awt.Component[] {applyPhaseToEntireFid, close_, reset_}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        cancelClosePaneLayout.setVerticalGroup(
            cancelClosePaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(cancelClosePaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(close_, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(reset_)
                .add(applyPhaseToEntireFid))
        );

        cancelClosePaneLayout.linkSize(new java.awt.Component[] {applyPhaseToEntireFid, close_, reset_}, org.jdesktop.layout.GroupLayout.VERTICAL);

        getContentPane().add(cancelClosePane, java.awt.BorderLayout.SOUTH);

        bindingGroup.bind();

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, javax.swing.event.ChangeListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == data_type_cb) {
                JPhasing.this.data_type_cbActionPerformed(evt);
            }
            else if (evt.getSource() == reset_) {
                JPhasing.this.reset_ActionPerformed(evt);
            }
            else if (evt.getSource() == close_) {
                JPhasing.this.close_ActionPerformed(evt);
            }
            else if (evt.getSource() == applyPhaseToEntireFid) {
                JPhasing.this.applyPhaseToEntireFidActionPerformed(evt);
            }
            else if (evt.getSource() == timeField) {
                JPhasing.this.timeFieldActionPerformed(evt);
            }
        }

        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            if (evt.getSource() == phase_slider) {
                JPhasing.this.phase_sliderslidersStateChange(evt);
            }
            else if (evt.getSource() == time_slider) {
                JPhasing.this.time_sliderslidersStateChange(evt);
            }
            else if (evt.getSource() == track_spinner) {
                JPhasing.this.track_spinnerStateChanged(evt);
            }
            else if (evt.getSource() == invertDomainAxisCB) {
                JPhasing.this.invertDomainAxisCBStateChanged(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private void phase_sliderslidersStateChange(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_phase_sliderslidersStateChange
       updatePlot();
}//GEN-LAST:event_phase_sliderslidersStateChange
    private void time_sliderslidersStateChange(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_time_sliderslidersStateChange
       updatePlot();
}//GEN-LAST:event_time_sliderslidersStateChange
    private void reset_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reset_ActionPerformed
        setPhaseFromViewer ();
        setTimeDelayFromViewer ();
        updatePlot();
}//GEN-LAST:event_reset_ActionPerformed
    private void close_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_close_ActionPerformed
        close();
}//GEN-LAST:event_close_ActionPerformed
    private void track_spinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_track_spinnerStateChanged
        updatePlot();
    }//GEN-LAST:event_track_spinnerStateChanged
    private void applyPhaseToEntireFidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyPhaseToEntireFidActionPerformed
        float phi                   =   getGuiPhase();
        float timeDelay             =   getGuiTimeDelay();
        phaseOriginalFid(timeDelay, phi);
        close();
    }//GEN-LAST:event_applyPhaseToEntireFidActionPerformed

    private void data_type_cbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_data_type_cbActionPerformed
         updatePlot();
    }//GEN-LAST:event_data_type_cbActionPerformed

    private void invertDomainAxisCBStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_invertDomainAxisCBStateChanged
       boolean invert = invertDomainAxisCB.isSelected();
       this.getDomainAxis().setInverted(invert);
    }//GEN-LAST:event_invertDomainAxisCBStateChanged

    private void timeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timeFieldActionPerformed
    public void updatePlot(){

        FidReader reader            =   viewer.getFidReader();
        int trace                   =   getGuiTraceNumber();
        float phi                   =   getGuiPhase();
        float timeDelay             =   getGuiTimeDelay();
        float [][] spectrum         =   reader.getProcparPhaseSpectrumSpectrum(trace);
        float[] freq                =   reader.getFrequencyInHertz ();
        FID_DATA_TYPE datatype      =   getGuiDataType();


        float[][] phasedSpec        =   FidReader.applyPhasing(spectrum, freq, phi, timeDelay);
        xydataset.removeAllSeries();

        switch (datatype){

            case  SPECTRUM_REAL :
                                    XYSeries realSer = generateSeries(phasedSpec, freq, 0, "Real Spectrum");
                                    xydataset.addSeries(realSer);
                                    getChartPanel().getChart().getLegend().setVisible(false);
                                    break;
            case  SPECTRUM_IMAG :
                                    XYSeries imagSer = generateSeries(phasedSpec, freq, 1, "Imaginary Spectrum");
                                    xydataset.addSeries(imagSer );
                                     getChartPanel().getChart().getLegend().setVisible(false);
                                    break;
            case  SPECTRUM_COMPLEX :
                                    XYSeries realSerComplx = generateSeries(phasedSpec, freq, 0, "Real Spectrum");
                                    XYSeries imagSerComplx = generateSeries(phasedSpec, freq, 1, "Imaginary Spectrum");
                                    xydataset.addSeries(realSerComplx );
                                    xydataset.addSeries(imagSerComplx);
                                     getChartPanel().getChart().getLegend().setVisible(true);
                                    break;
        }

   }
    private XYSeries generateSeries(float[][] xvals ,float[] yvals ,  int trace, String name){
        XYSeries  ser = new XYSeries(name);
        for (int j = 0; j <  yvals.length; j++) {
                float x =  yvals[j];
                float y =  xvals[trace][j];
                ser.add(x, y);
        }
        return ser;
    }


    public void phaseOriginalFid (float time, float phase){
        FidReader reader            =  viewer.getFidReader ();

        reader .setPhase0 (phase);
        reader .setDelay (time);

        reader.computeSpectralData (false);
        viewer.updatePlot ();
    }


    public void close(){
      updateAndExit();
      setVisible(false);
    }
    public  void updateAndExit( ){
        if(viewer.isLoaded()){
             FidReader freader           =   viewer.getFidReader();
             FidIO.storeToDisk(freader.getFidDescriptor(), viewer.getFidDescriptorFile());
             viewer.getFidReader().computeSpectralData(false);
             viewer.updatePlot();
         }



    }
    public float getTimdeDelayFromSlider(FidViewable viewer){
        if (viewer.isLoaded() == false) {return 0;}

        Procpar procpar         =   viewer.getFidReader().getProcpar ();
        float dt                =   procpar.getTimePerSample(); // sampling time
        int   val               =   getTimeSlider().getValue ();

        float time              =   dt * val /MAXIMUM_TIME_SLIDER;
        return time;
    }
    public float getPhaseInRadiansFromSlider(){
        int   val               =   getPhaseSlider().getValue ();
        float phase             =   val*(float) PI/180;
        return phase;
    }

    public void  setGuiFromViewer (){
        setTrackerFromGui();
        setPhaseFromViewer ();
        setTimeDelayFromViewer ();

        updatePlot();

    }
    public void  setTimeDelayFromViewer (){
            float time              = viewer.getFidReader().getDelay();
            float dt                = viewer.getProcpar().getTimePerSample();
            float delay             = time/dt*MAXIMUM_TIME_SLIDER;

            getTimeSlider().setValue(Math.round(delay));
    }
    public void  setPhaseFromViewer(){
        float phase             =  viewer.getFidReader().getPhase0();
        getPhaseSlider().setValue(Math.round(phase*180/(float)PI));
    }
    public void  setTrackerFromGui(){
        int nTotalTraces        =   viewer.getFidReader().getNumberOfTotalTraces();
        SpinnerModel model      =   new SpinnerNumberModel(1, 1, nTotalTraces, 1);
        getTrackSpinner().setModel(model);
        int trace               =  1+ viewer.getFidPlotData().getTrace();

      
      // getTrackSpinner().removeChangeListener(formListener);
       getTrackSpinner().setValue(trace);
       //getTrackSpinner().addChangeListener(formListener);
      
     

    }

    public void phaseSpecturm (float time, float phase){
      //  FidReader reader            =  viewer.getFidReader ();

      //  reader .setPhase0 (phase);
      //  reader .setDelay (time);

      //  reader.computeSpectralData (false);
       // viewer.updatePlot ();
    }

    public float getGuiTimeDelay(){

        Procpar procpar         =   viewer.getFidReader().getProcpar ();
        float dt                =   procpar.getTimePerSample(); // sampling time
        int   val               =   getTimeSlider().getValue ();

        float time              =   4*dt * val /MAXIMUM_TIME_SLIDER;
        return time;
    }
    public float getGuiPhase(){
        int   val               =   getPhaseSlider().getValue ();
        float phase             =   val*(float) PI/180;
        return phase;
    }
    public int      getGuiTraceNumber(){
         int curIndex    = (Integer) getTrackSpinner().getValue();
         int trace       = curIndex - 1;
         return trace;
    }
    public FID_DATA_TYPE getGuiDataType(){
         FID_DATA_TYPE type    = ( FID_DATA_TYPE)data_type_cb.getSelectedItem();
         return type ;
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JPhasing dialog = new JPhasing(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);



            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JButton applyPhaseToEntireFid;
    javax.swing.JPanel cancelClosePane;
    javax.swing.JPanel chartPane;
    javax.swing.JButton close_;
    javax.swing.JComboBox data_type_cb;
    javax.swing.JCheckBox invertDomainAxisCB;
    javax.swing.JPanel mainPane;
    javax.swing.JLabel order1_label;
    javax.swing.JFormattedTextField phaseField;
    javax.swing.JSlider phase_slider;
    javax.swing.JLabel prder0_label;
    javax.swing.JButton reset_;
    javax.swing.JFormattedTextField timeField;
    javax.swing.JSlider time_slider;
    javax.swing.JPanel toolPane;
    javax.swing.JLabel trace_lbl1;
    public javax.swing.JSpinner track_spinner;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
    public javax.swing.JLabel                getOrder1_label () {
        return order1_label;
    }
    public javax.swing.JFormattedTextField   getPhaseField () {
        return phaseField;
    }
    public javax.swing.JSlider               getPhaseSlider () {
        return phase_slider;
    }
    public javax.swing.JLabel                getPrder0_label () {
        return prder0_label;
    }
    public javax.swing.JButton               getReset_ () {
        return reset_;
    }
    public javax.swing.JFormattedTextField   getTimeField () {
        return timeField;
    }
    public javax.swing.JSlider               getTimeSlider () {
        return time_slider;
    }
    public javax.swing.JSpinner              getTrackSpinner () {
        return track_spinner;
    }

    public ChartPanel getChartPanel() {
        return chartPanel;
    }
    public JFreeChart getChart() {
        return getChartPanel().getChart();
    }
    public XYPlot     getPlot() {
        return getChart().getXYPlot();
    }
    public NumberAxis getDomainAxis() {
        return (NumberAxis)getPlot().getDomainAxis();
    }
       
 
    public FidViewable                      getViewer () {
        return viewer;
    }
    public void                             setViewer ( FidViewable viewer ) {
        this.viewer = viewer;
    }



    class IntToStringConverter  extends org.jdesktop.beansbinding.Converter < Integer, String >{
        public String convertForward(Integer value) {
               String str = String.valueOf((float)value/MAXIMUM_TIME_SLIDER);
               return str;

        }
        public Integer convertReverse(String str) {
           float val                = Float.parseFloat(str);
           Integer delay            = Math.round(val*MAXIMUM_TIME_SLIDER);
           return delay;
        }
     }
    class TimeDelayTetxFieldVerifier extends InputVerifier {
         public boolean verify(JComponent input) {
 	       JTextField tf = (JTextField) input;
               double val       = Double.parseDouble(tf.getText());
               double max       = MAX_VAL_FOR_TIME_TEXTFIELD;

               if (Math.abs(val ) > max ){tf.setText(String.valueOf( max *Math.signum(val)));}
               return true;
         }
     }
    class PhaseTetxFieldVerifier extends InputVerifier {
         public boolean verify(JComponent input) {
 	       JTextField tf = (JTextField) input;
               double val       = Double.parseDouble(tf.getText());
               double max       = MAXIMUM_PHASE_SLIDER;

               if (Math.abs(val ) > max ){
                   tf.setText(String.valueOf( max *Math.signum(val)));}
               return true;
         }
     }
}
