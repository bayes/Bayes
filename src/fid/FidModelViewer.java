/*
 * FidModelViewer.java
 *
 * Created on April 22, 2008, 3:18 PM
 */

package fid;
import interfacebeans.Viewable;
import utilities.Screenshot;
import utilities.IO;
import java.io.*;
import java.awt.*;
import org.jfree.chart.plot.XYPlot;
import javax.swing.*;
import java.beans.PropertyChangeListener;
import bayes.Enums.*;
import bayes.BayesManager;
import bayes.DirectoryManager;
import run.RunBayesModel;
import static    fid.FidViewerPreferences.crsValueFormat;
/**
 *
 * @author  apple
 */
public class FidModelViewer extends javax.swing.JPanel  implements  FidViewable, Viewable
   
{
    private static FidModelViewer instance          =   null;
    private FidPlotData fidPlotData                 =   null;
    FidPopupMenu                popupmenu           =   null;
    private boolean isUpdatePlot                    =   true;
    private int     modelNumber                     =   1;

  
    private FidModelViewer () {
      fidPlotData                =   new  FidPlotData ();

      getChartPanel().setDrawMetabolites(false);
      getChartPanel().setDrawResonances(false);
       
      initComponents ();
    }
    public static FidModelViewer getInstance() {
      if(instance == null) {
         instance = new FidModelViewer();
         
      }
      return instance;
   }
    public static void reset(){ if (instance == null) {return;}
         java.beans.PropertyChangeListener[]  lis =   instance.getPropertyChangeListeners();
         for (PropertyChangeListener listener : lis) {
             instance.removePropertyChangeListener(listener);
         }
         instance.setFidReader(null);
         instance.fidPlotData  = null;
         instance.setModelNumber(1);
         instance = null;
    }


     public void deserialize(ObjectInputStream serializationFile)
    {

        try{
          int modNum =       serializationFile.readInt();
          this.setModelNumber(modNum);
        }
        catch (Exception exp){ exp.printStackTrace();return ;}


    }
    public void serialize(ObjectOutputStream serializationFile) throws IOException
     {
             serializationFile.writeInt(this.getModelNumber());
              System.out.println("on deserialization model number is "+getModelNumber());
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editPlot = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        tools_panel = new javax.swing.JPanel();
        data_type_cb = new JComboBox( FID_DATA_TYPE.getPlotTypes());
        plot_type_cb = new JComboBox( FID_PLOT_TYPE.getPlotTypes());
        trace_lbl1 = new javax.swing.JLabel();
        track_spinner = new JSpinner();
        doModel_btn = new javax.swing.JButton();
        modelFid_ft = new javax.swing.JFormattedTextField();
        optionsButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        curA_lbl = new javax.swing.JLabel();
        curA_tf = new javax.swing.JTextField();
        curB_lbl = new javax.swing.JLabel();
        curB_tf = new javax.swing.JTextField();
        interval_lbl = new javax.swing.JLabel();
        interval_tf = new javax.swing.JTextField();
        clearCursors_button = new javax.swing.JButton();
        full_button = new javax.swing.JButton();
        expand_button = new javax.swing.JButton();
        autoscale_btn = new javax.swing.JButton();
        plot = getChartPanel();
        slidingBar1 = new fid.SlidingBar();

        FormListener formListener = new FormListener();

        editPlot.setBackground(new java.awt.Color(0, 0, 0));
        editPlot.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        editPlot.setForeground(new java.awt.Color(255, 255, 0));
        editPlot.setText("Print/Save"); // NOI18N
        editPlot.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nEdit plot properties.\n\n</font></p><html>\n"); // NOI18N
        editPlot.setBorderPainted(false);
        editPlot.setFocusable(false);
        editPlot.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        editPlot.setMargin(new java.awt.Insets(4, 3, 5, 3));
        editPlot.addActionListener(formListener);

        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(new java.awt.Color(255, 255, 255));
        setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.BorderLayout());

        tools_panel.setBackground(new java.awt.Color(0, 0, 0));
        tools_panel.setToolTipText("Interval between cursorA and cursor B in the plot."); // NOI18N

        data_type_cb.setSelectedItem(getDataType().getName()
        );
        data_type_cb.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nChoose data type to display.\n\n</font></p><html>\n\n"); // NOI18N
        data_type_cb.setFocusable(false);
        data_type_cb.addItemListener(formListener);
        data_type_cb.addActionListener(formListener);

        plot_type_cb.setSelectedItem(getPlotType().getName()
        );
        plot_type_cb.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nChoose plot type to display.\n\n</font></p><html>\n"); // NOI18N
        plot_type_cb.setFocusable(false);
        plot_type_cb.addActionListener(formListener);

        trace_lbl1.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        trace_lbl1.setForeground(new java.awt.Color(255, 255, 255));
        trace_lbl1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        trace_lbl1.setText("Trace");

        track_spinner.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nChoose FID trace to display. \n\n\n</font></p><html>"); // NOI18N
        track_spinner.setMinimumSize(new java.awt.Dimension(30, 15));
        track_spinner.setOpaque(true);
        track_spinner.setPreferredSize(new java.awt.Dimension(31, 17));
        track_spinner.addChangeListener(formListener);

        doModel_btn.setFont(new java.awt.Font("Lucida Grande", 0, 14));
        doModel_btn.setForeground(new java.awt.Color(255, 51, 51));
        doModel_btn.setText("Build BA Model For FID #");
        doModel_btn.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nCreates and displays an FID  model for <br>\nspecified FID trace from  output files<br>\ngenerated by Bayes Analyze package. <br>\n\n\n</font></p><html>\n\n\n"); // NOI18N
        doModel_btn.setMinimumSize(new java.awt.Dimension(117, 45));
        doModel_btn.addActionListener(formListener);

        modelFid_ft.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        modelFid_ft.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nThe FID trace number  for which <br>\nmodel will be built.\n\n</font></p><html>\n\n"); // NOI18N
        modelFid_ft.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
        modelFid_ft.setValue(this.getModelNumber());
        modelFid_ft.addPropertyChangeListener(formListener);

        optionsButton.setFont(new java.awt.Font("Lucida Grande", 0, 14));
        optionsButton.setText("Options");
        optionsButton.addActionListener(formListener);

        org.jdesktop.layout.GroupLayout tools_panelLayout = new org.jdesktop.layout.GroupLayout(tools_panel);
        tools_panel.setLayout(tools_panelLayout);
        tools_panelLayout.setHorizontalGroup(
            tools_panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(tools_panelLayout.createSequentialGroup()
                .add(trace_lbl1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(track_spinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(plot_type_cb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(data_type_cb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 182, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(optionsButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(doModel_btn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(1, 1, 1)
                .add(modelFid_ft, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 53, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(408, Short.MAX_VALUE))
        );
        tools_panelLayout.setVerticalGroup(
            tools_panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(data_type_cb, 0, 0, Short.MAX_VALUE)
            .add(trace_lbl1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(track_spinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(plot_type_cb, 0, 0, Short.MAX_VALUE)
            .add(tools_panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(optionsButton)
                .add(doModel_btn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(modelFid_ft, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        tools_panelLayout.linkSize(new java.awt.Component[] {data_type_cb, doModel_btn, modelFid_ft, optionsButton, plot_type_cb, trace_lbl1, track_spinner}, org.jdesktop.layout.GroupLayout.VERTICAL);

        jPanel2.add(tools_panel, java.awt.BorderLayout.NORTH);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        curA_lbl.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        curA_lbl.setForeground(new java.awt.Color(255, 255, 255));
        curA_lbl.setText("Cursor A"); // NOI18N

        curA_tf.setBackground(new java.awt.Color(255, 255, 0));
        curA_tf.setEditable(false);
        curA_tf.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        curA_tf.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        curA_tf.setText("          "); // NOI18N
        curA_tf.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\n\nPosition of the cursor A in the plot.\n\n</font></p><html>\n\n\n"); // NOI18N
        curA_tf.setBorder(null);
        curA_tf.setMinimumSize(new java.awt.Dimension(25, 17));
        curA_tf.setPreferredSize(new java.awt.Dimension(80, 17));

        curB_lbl.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        curB_lbl.setForeground(new java.awt.Color(255, 255, 255));
        curB_lbl.setText("Cursor B"); // NOI18N

        curB_tf.setBackground(new java.awt.Color(255, 255, 0));
        curB_tf.setEditable(false);
        curB_tf.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        curB_tf.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        curB_tf.setText("          "); // NOI18N
        curB_tf.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\n\nPosition of the cursor B in the plot.\n\n</font></p><html>\n\n"); // NOI18N
        curB_tf.setBorder(null);
        curB_tf.setMinimumSize(new java.awt.Dimension(25, 17));
        curB_tf.setPreferredSize(new java.awt.Dimension(80, 17));

        interval_lbl.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        interval_lbl.setForeground(new java.awt.Color(255, 255, 255));
        interval_lbl.setText("Delta"); // NOI18N

        interval_tf.setBackground(new java.awt.Color(255, 255, 0));
        interval_tf.setEditable(false);
        interval_tf.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        interval_tf.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        interval_tf.setText("          "); // NOI18N
        interval_tf.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\n\nInterval between cursors A and B.\n\n</font></p><html>\n"); // NOI18N
        interval_tf.setBorder(null);
        interval_tf.setMinimumSize(new java.awt.Dimension(25, 17));
        interval_tf.setPreferredSize(new java.awt.Dimension(80, 17));

        clearCursors_button.setBackground(new java.awt.Color(0, 0, 0));
        clearCursors_button.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        clearCursors_button.setForeground(new java.awt.Color(255, 255, 0));
        clearCursors_button.setText("Clear Cursors");
        clearCursors_button.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\n\nRemove cursors from the plot.\n\n</font></p><html>\n"); // NOI18N
        clearCursors_button.setBorderPainted(false);
        clearCursors_button.setFocusable(false);
        clearCursors_button.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        clearCursors_button.setMargin(new java.awt.Insets(4, 5, 5, 10));
        clearCursors_button.addActionListener(formListener);

        full_button.setBackground(new java.awt.Color(0, 0, 0));
        full_button.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        full_button.setForeground(new java.awt.Color(255, 255, 0));
        full_button.setText("Full");
        full_button.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\n\nDisplay full plot.\n\n</font></p><html>\n"); // NOI18N
        full_button.setBorderPainted(false);
        full_button.setFocusable(false);
        full_button.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        full_button.setMargin(new java.awt.Insets(4, 5, 5, 4));
        full_button.addActionListener(formListener);

        expand_button.setBackground(new java.awt.Color(0, 0, 0));
        expand_button.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        expand_button.setForeground(new java.awt.Color(255, 255, 0));
        expand_button.setText("Expand");
        expand_button.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\n\nExpand the plot between the cursors A and B.\n\n</font></p><html>\n\n\n"); // NOI18N
        expand_button.setBorderPainted(false);
        expand_button.setFocusable(false);
        expand_button.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        expand_button.setMargin(new java.awt.Insets(4, 5, 5, 10));
        expand_button.addActionListener(formListener);

        autoscale_btn.setBackground(new java.awt.Color(0, 0, 0));
        autoscale_btn.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        autoscale_btn.setForeground(new java.awt.Color(255, 255, 0));
        autoscale_btn.setText("Autoscale");
        autoscale_btn.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\n\nAutoscale the plot.\n\n</font></p><html>\n\n"); // NOI18N
        autoscale_btn.setBorderPainted(false);
        autoscale_btn.setFocusable(false);
        autoscale_btn.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        autoscale_btn.setMargin(new java.awt.Insets(4, 5, 5, 4));
        autoscale_btn.addActionListener(formListener);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(curA_lbl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 75, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(curA_tf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(curB_lbl)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(curB_tf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(interval_lbl)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(interval_tf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(clearCursors_button)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(full_button)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(expand_button, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 106, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(autoscale_btn)
                .addContainerGap(226, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(curB_lbl)
                .add(interval_lbl)
                .add(curA_lbl)
                .add(clearCursors_button, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(full_button, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 12, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(expand_button, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(curA_tf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(curB_tf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(interval_tf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(autoscale_btn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1Layout.linkSize(new java.awt.Component[] {autoscale_btn, clearCursors_button, curA_lbl, curA_tf, curB_lbl, curB_tf, expand_button, full_button, interval_lbl, interval_tf}, org.jdesktop.layout.GroupLayout.VERTICAL);

        jPanel2.add(jPanel1, java.awt.BorderLayout.SOUTH);

        plot.addPropertyChangeListener(formListener);

        org.jdesktop.layout.GroupLayout plotLayout = new org.jdesktop.layout.GroupLayout(plot);
        plot.setLayout(plotLayout);
        plotLayout.setHorizontalGroup(
            plotLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 1197, Short.MAX_VALUE)
        );
        plotLayout.setVerticalGroup(
            plotLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 485, Short.MAX_VALUE)
        );

        jPanel2.add(plot, java.awt.BorderLayout.CENTER);

        add(jPanel2, java.awt.BorderLayout.CENTER);

        slidingBar1.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), null));
        slidingBar1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        slidingBar1.setMinimumSize(new java.awt.Dimension(20, 0));
        slidingBar1.addPropertyChangeListener(formListener);

        org.jdesktop.layout.GroupLayout slidingBar1Layout = new org.jdesktop.layout.GroupLayout(slidingBar1);
        slidingBar1.setLayout(slidingBar1Layout);
        slidingBar1Layout.setHorizontalGroup(
            slidingBar1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 28, Short.MAX_VALUE)
        );
        slidingBar1Layout.setVerticalGroup(
            slidingBar1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 532, Short.MAX_VALUE)
        );

        add(slidingBar1, java.awt.BorderLayout.WEST);
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.ItemListener, java.beans.PropertyChangeListener, javax.swing.event.ChangeListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == data_type_cb) {
                FidModelViewer.this.data_type_cbActionPerformed(evt);
            }
            else if (evt.getSource() == plot_type_cb) {
                FidModelViewer.this.plot_type_cbActionPerformed(evt);
            }
            else if (evt.getSource() == doModel_btn) {
                FidModelViewer.this.doModel_btnActionPerformed(evt);
            }
            else if (evt.getSource() == optionsButton) {
                FidModelViewer.this.optionsButtonActionPerformed(evt);
            }
            else if (evt.getSource() == clearCursors_button) {
                FidModelViewer.this.clearCursors_buttonActionPerformed(evt);
            }
            else if (evt.getSource() == full_button) {
                FidModelViewer.this.full_buttonActionPerformed(evt);
            }
            else if (evt.getSource() == expand_button) {
                FidModelViewer.this.expand_buttonActionPerformed(evt);
            }
            else if (evt.getSource() == autoscale_btn) {
                FidModelViewer.this.autoscale_btnActionPerformed(evt);
            }
            else if (evt.getSource() == editPlot) {
                FidModelViewer.this.editPlotActionPerformed(evt);
            }
        }

        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            if (evt.getSource() == data_type_cb) {
                FidModelViewer.this.data_type_cbItemStateChanged(evt);
            }
        }

        public void propertyChange(java.beans.PropertyChangeEvent evt) {
            if (evt.getSource() == modelFid_ft) {
                FidModelViewer.this.modelFid_ftPropertyChange(evt);
            }
            else if (evt.getSource() == plot) {
                FidModelViewer.this.plotPropertyChange(evt);
            }
            else if (evt.getSource() == slidingBar1) {
                FidModelViewer.this.slidingBar1PropertyChange(evt);
            }
        }

        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            if (evt.getSource() == track_spinner) {
                FidModelViewer.this.track_spinnerStateChanged(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents
    public static boolean isInstanceExist(){
        boolean isInstance = (instance !=null);
        return  isInstance;
    }

private void data_type_cbItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_data_type_cbItemStateChanged
if ( isLoaded () == false ) {  return; }
       
        if ( evt.getStateChange() == java.awt.event.ItemEvent.SELECTED ) {
            
            String type     =  data_type_cb.getSelectedItem().toString();
            setDataType ( FID_DATA_TYPE.getTypeByName(type));   
            updatePlot();
        }
}//GEN-LAST:event_data_type_cbItemStateChanged
private void editPlotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPlotActionPerformed
        int x = editPlot.getX();
        int y =  getChartPanel().getY() - editPlot.getY();
        getChartPanel().displayPopupMenu(x, 0);
}//GEN-LAST:event_editPlotActionPerformed
private void full_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_full_buttonActionPerformed
        getChartPanel ().autoScaleDomainAxis();
}//GEN-LAST:event_full_buttonActionPerformed
private void expand_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expand_buttonActionPerformed
        getChartPanel ().expandPlot();
}//GEN-LAST:event_expand_buttonActionPerformed
private void plot_type_cbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plot_type_cbActionPerformed
            String type     =  getPlot_type_cb().getSelectedItem().toString();
            setPlotType ( FID_PLOT_TYPE.getTypeByName(type));   
            
            updatePlot();
}//GEN-LAST:event_plot_type_cbActionPerformed
private void clearCursors_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearCursors_buttonActionPerformed
getChartPanel().deleteCursors();
}//GEN-LAST:event_clearCursors_buttonActionPerformed
private void slidingBar1PropertyChange (java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_slidingBar1PropertyChange
    if ( evt.getPropertyName ().equals (SlidingBar.verticalPositionChange)){
        Point  pOnSlider = ( Point)evt.getNewValue ();
        Point pOnPlot       = SwingUtilities.convertPoint (  slidingBar1,  pOnSlider, getChartPanel ());
        double plotY        = getChartPanel (). java2DToPlotY (pOnPlot.getY ());

        getChartPanel ().shiftRangeAxis (plotY);
    }
}//GEN-LAST:event_slidingBar1PropertyChange
private void track_spinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_track_spinnerStateChanged
if ( isLoaded () == false ) {  return; }
        int curIndex    = (Integer) getTrackSpinner().getValue();
        int trace       = curIndex - 1;
 
        getFidPlotData().setTrace(trace);
        
        updateNoiseThreshold ();
        setPlotType ( FID_PLOT_TYPE.Trace);   
      
}//GEN-LAST:event_track_spinnerStateChanged
private void autoscale_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoscale_btnActionPerformed
    getChartPanel().autoScale();
}//GEN-LAST:event_autoscale_btnActionPerformed
private void doModel_btnActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doModel_btnActionPerformed
    submitAndGetModel ();
}//GEN-LAST:event_doModel_btnActionPerformed
private void modelFid_ftPropertyChange (java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_modelFid_ftPropertyChange
    if (evt.getPropertyName ().equalsIgnoreCase ("value")){

        if(this.isShowing() == false){return;}
        FidViewer fidViewer         = FidViewer.getInstance();
        if (fidViewer.isLoaded() == false) {getModelFidFormattedTextField().setValue(1); return;}

        int min =   1;
        int max =   fidViewer.getNumberOfTraces();
        int val =  ((Number)getModelFidFormattedTextField().getValue ()).intValue ();

        if (val < min){
            val = min;
            getModelFidFormattedTextField().setValue (val);
        } else if (val > max){
            val = max;
            getModelFidFormattedTextField().setValue (val);
        }

        setModelNumber (val);
        submitAndGetModel();

    }
}//GEN-LAST:event_modelFid_ftPropertyChange
private void data_type_cbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_data_type_cbActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_data_type_cbActionPerformed
private void plotPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_plotPropertyChange
        if ( evt.getPropertyName().equals(BayesManager.CURSOR_A_IS_DELETED) ) {
            curA_tf.setText("");
            interval_tf.setText("");
        }
        else if ( evt.getPropertyName().equals(BayesManager.CURSOR_B_IS_DELETED) ) {
            curB_tf.setText("");
            interval_tf.setText("");
        }
        else if ( evt.getPropertyName().equals(BayesManager.CURSOR_A_IS_DRAWN) ) {
                Double val = (Double) evt.getNewValue();
                String str = String.format(crsValueFormat, val);
                curA_tf.setText(str);
                updateCursor();
        }
        else if ( evt.getPropertyName().equals(BayesManager.CURSOR_B_IS_DRAWN) ) {
            Double val = (Double) evt.getNewValue();
            String str = String.format(crsValueFormat, val);
            curB_tf.setText(str);
            updateCursor();
        }

}//GEN-LAST:event_plotPropertyChange
private void optionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionsButtonActionPerformed
    FidPopupMenu popup =  getPopupMenu() ;
    popup.update();
    popup .show(optionsButton, optionsButton.getWidth()/2, optionsButton.getHeight()/2);
}//GEN-LAST:event_optionsButtonActionPerformed


    public FidPopupMenu getPopupMenu(){
        if (popupmenu == null){
            popupmenu                       = new FidPopupMenu(this);
            JPopupMenu addon            = getChartPanel().getPopupMenu();
            popupmenu.addCustomMenuesToPopupMenu(addon);
        }
        return popupmenu;
    }


    public  void  loadFidModelFromDialog () {
        JFileChooser fc = new javax.swing.JFileChooser();
        fc.setFileSelectionMode( JFileChooser.DIRECTORIES_ONLY );
            
        if (fc.showOpenDialog(fc) == JFileChooser.APPROVE_OPTION) {
           File curDir         = fc.getSelectedFile();
           loadFidModel (curDir);
        }
    }
    public  void  loadFidModel (File dir) {
            FidReader fidReader           = new FidReader (dir, false);
            setFidReader(fidReader);
            
            if (fidReader.isDoneLoading() == false){
                  getChartPanel().getDataset().removeAllSeries();
                  return;
            }
           
            fidReader.computeSpectralData(true);
            
            int nTotalTraces        =   getFidReader().getNumberOfTotalTraces();
            SpinnerModel model      =   new SpinnerNumberModel(1, 1, nTotalTraces, 1);
            getTrackSpinner().setModel(model);
            
            
            setDataType ( FID_DATA_TYPE.SPECTRUM_REAL );
            setPlotType(FID_PLOT_TYPE.Horizontal);
            
            updateNoiseThreshold ();


            syncronize();
           updatePlot();
    
    }
    public  void  loadData () {
           loadFidModel(DirectoryManager.getFidModelDir());
    }

    // fid viewable interface
    public Procpar          getProcpar () {
        return getFidReader ().getProcpar();
    }
    public boolean          isLoaded () {
        if (getFidReader() == null ||getFidReader().isFidReaderLoaded() == false ) {
            return false;
        }
        return true;
    }
    public FidChartPanel    getChartPanel () {
        return this.getFidPlotData().getChartPanel () ;
    }
    public FidReader        getFidReader () {
        return  getFidPlotData().getFidReader();
    }
    public FidPlotData      getFidPlotData () {
        return fidPlotData;
    }
    public XYPlot           getXYPlot () {
    return   getChartPanel().getChart().getXYPlot();
    }
    public UNITS            getUnits () {   return getFidReader().getUnits(); }
    public void             setUnits(UNITS  units) {
        getFidReader().setUnits(units);
    }
    public void             updatePlot(){
       if ( isUpdatePlot == false ) {  return;}
        getChartPanel().plotClearOfDrawings();

     
        fidPlotData.updateSeries();
        fidPlotData.updatePlotSettings();
        fidPlotData.updateAxis();


        
     //  java.util.ArrayList <Resonance> resLit = Resonance.getResonanceList();
      // DrawResonances.drawResonances (resLit, this);
      
    }
    public String           getDataInfo () {
        if (this.isLoaded() == false){
              return "No fid Data is loaded";
        }

        StringBuilder info = new StringBuilder();
        int PAD_LEN                          =    33;
        String PAD_CHAR                      =    " ";
        String  EOL                          =   "\n";
        String  sp                           =   ":=";

        info.append(getFidReader ().getFidDescriptor().toString());


        info.append(EOL);


        // line
        info.append (" Procpar Parameters");
        info.append(EOL);

        // line
        info.append (IO.pad( "np" , PAD_LEN, PAD_CHAR));
        info.append (sp);
        info.append(" "+   getProcpar().getNp());
        info.append(EOL);

        // line
        info.append (IO.pad( "fn" , PAD_LEN, PAD_CHAR));
        info.append (sp);
        info.append(" "+   getProcpar().getFn());
        info.append(EOL);



        // line
        info.append (IO.pad( "sw" , PAD_LEN, PAD_CHAR));
        info.append (sp);
        info.append(" "+   getProcpar().getSw());
        info.append(EOL);


        // line
        info.append (IO.pad( "at" , PAD_LEN, PAD_CHAR));
        info.append (sp);
        info.append(" "+   getProcpar().getAt());
        info.append(EOL);



        // line
        info.append (IO.pad( "lb" , PAD_LEN, PAD_CHAR));
        info.append (sp);
        info.append(" "+   getProcpar().getLb());
        info.append(EOL);



        // line
        info.append (IO.pad( "lp" , PAD_LEN, PAD_CHAR));
        info.append (sp);
        info.append(" "+   getProcpar().getLp());
        info.append(EOL);


        // line
        info.append (IO.pad( "rp (in radians)" , PAD_LEN, PAD_CHAR));
        info.append (sp);
        info.append(" "+   getProcpar().getRp());
        info.append(EOL);

        // line
        info.append (IO.pad( "arraydim" , PAD_LEN, PAD_CHAR));
        info.append (sp);
        info.append(" "+  getProcpar().getArrayDim());
        info.append(EOL);


        // line
        info.append (IO.pad( "dp" , PAD_LEN, PAD_CHAR));
        info.append (sp);
        info.append(" "+    getProcpar().getIntegerType());
        info.append(EOL);

        // line
        info.append (IO.pad( "sfrq" , PAD_LEN, PAD_CHAR));
        info.append (sp);
        info.append(" "+   getProcpar().getSfrq());
        info.append(EOL);


        // line
        info.append (IO.pad( "ref(Hertz)" , PAD_LEN, PAD_CHAR));
        info.append (sp);
        info.append(" "+    getProcpar().getRef());
        info.append(EOL);


         // line
        if (getUnits() != UNITS.HERTZ){
            info.append (IO.pad( "ref"+ " ("+getUnits().getName()+")" , PAD_LEN, PAD_CHAR));
            info.append (sp);
            info.append(" "+     getFidPlotData().getReferenceInCurrentUnits ());
            info.append(EOL);
        }


        return info.toString();
    }
    public void             unloadData () {
         getFidPlotData().reset();
         File dir = DirectoryManager.getFidModelDir();
         utilities.IO.deleteFielsAndDirsInDirectory(dir);

         track_spinner.setModel(new SpinnerNumberModel(0, 0, 0, 1));
    }
    public File             getDataDir(){return DirectoryManager.getFidModelDir();}
    public File             getFidDescriptorFile(){return DirectoryManager.getFidModelDesciptorFile ();}

    public Component getMainDisplay(){return this.plot;}
    public void updateNoiseThreshold (){
       int    dataIndex     =  0;
       double threshold     =   getFidReader().getNoiseThreshHold()[dataIndex ];
       this.getChartPanel().setThreshold(threshold);
  }  

    public void updateCursor(){
        double diff = this.getCursorsDifference();
        if (diff == 0){
            interval_tf.setText("");
        }
        else {
            String str = String.format(crsValueFormat, diff);
            interval_tf.setText(str);
        }         
    }
    public void syncronize(){
            JSetReference.hideDialog( );
            if(this.isLoaded() == false){
                int traceNumber = FidViewer.getInstance().getTraceNumber();
                getModelFidFormattedTextField ().setValue(traceNumber);
            }

            FidViewable src     =   FidViewer.getInstance();
            Sync.sync(this, src);
    }




    public   void  submitAndGetModel(){
        if (  RunBayesModel.isModelReadyToRun() == false) { return;}

        Window w        =  SwingUtilities.getWindowAncestor (this);

        // show busy cursor while loading
        if (w != null){

             try{
                  w.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                  RunBayesModel.submitAndGetModel();
              }
              finally{
                  w.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR ));
              }
        }

        // sync fid  viewer
        FidViewer fw        =  FidViewer.getInstance();
        int modNumber       =  getModelNumber();
        fw.setTraceNumber(modNumber);
    }
    public void setVisibleModelBuild(boolean enbaled){
         getBuildModelButton ().setVisible(false);
         getModelFidFormattedTextField ().setVisible(false);
    }
    public void removeModelBuild(){
         getToolsPanel ().remove(getBuildModelButton ());
         getToolsPanel ().remove( getModelFidFormattedTextField ());

         revalidate();
         repaint();
    }
   
    /******* create and show gui ************************/
    public void showGUI (JFrame frame) {   
        if (this.isShowing ()) return;
        if (frame == null ) {
          frame = new JFrame ();
          frame.setDefaultCloseOperation (JFrame.DISPOSE_ON_CLOSE);
        }
         
       frame.setContentPane (this);

       frame.pack ();
       frame.setVisible (true);
    } 
    public void showGUI (JComponent pane) {   
       if (pane == null)  { return;}
       //add(fid.FidChartPanel.getInstance(), java.awt.BorderLayout.CENTER);
       pane.removeAll();
       pane.add (this);
       pane.revalidate();
       pane.repaint();
    } 
    private static void createAndShowGUI () {
        //Disable boldface controls.
        UIManager.put ("swing.boldMetal", Boolean.FALSE);
        
        //Create and set up the window.
        JFrame frame = new JFrame ("FID Model Viewer");
        frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
     
        //Create and set up the content pane.
        FidModelViewer newContentPane =  new FidModelViewer ();
        
        newContentPane.setOpaque (true); //content panes must be opaque
        frame.setContentPane (newContentPane);
       
        
        //Display the window.
        frame.pack ();
        frame.setVisible (true);
       // newContentPane.loadFidModel (new File("/Users/apple/Bayes/exp2/BayesOtherAnalysis.bayes.model.fid"));

       
    }
    public static void main (String[] args) {
      
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater (new Runnable () {
            public void run () {
                createAndShowGUI ();
            }
        });
 
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton autoscale_btn;
    private javax.swing.JButton clearCursors_button;
    private javax.swing.JLabel curA_lbl;
    private javax.swing.JTextField curA_tf;
    private javax.swing.JLabel curB_lbl;
    private javax.swing.JTextField curB_tf;
    private javax.swing.JComboBox data_type_cb;
    private javax.swing.JButton doModel_btn;
    private javax.swing.JButton editPlot;
    private javax.swing.JButton expand_button;
    private javax.swing.JButton full_button;
    private javax.swing.JLabel interval_lbl;
    private javax.swing.JTextField interval_tf;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JFormattedTextField modelFid_ft;
    private javax.swing.JButton optionsButton;
    private javax.swing.JPanel plot;
    private javax.swing.JComboBox plot_type_cb;
    private fid.SlidingBar slidingBar1;
    private javax.swing.JPanel tools_panel;
    private javax.swing.JLabel trace_lbl1;
    public javax.swing.JSpinner track_spinner;
    // End of variables declaration//GEN-END:variables
     public javax.swing.JButton getBuildModelButton () {
        return doModel_btn;
    }
     public javax.swing.JButton getExpand_button () {
        return expand_button;
    }
     public javax.swing.JButton getFull_button () {
        return full_button;
    }
     public javax.swing.JComboBox getPlot_type_cb () {
        return plot_type_cb;
    }
     public javax.swing.JSpinner getTrackSpinner () {
        return track_spinner;
    }
     public javax.swing.JFormattedTextField getModelFidFormattedTextField () {
        return modelFid_ft;
    }
     public javax.swing.JPanel getToolsPanel () {
        return tools_panel;
    }
   
// <editor-fold defaultstate="collapsed" desc=" Getters ">


    public FID_DATA_TYPE        getDataType () {  return this.getFidPlotData().getDataType(); }
    public FID_PLOT_TYPE        getPlotType () {
        return getFidPlotData ().getPlotType();
    }
    public int                  getModelNumber () {
        return modelNumber;
    }
    public double               getCursorsDifference(){
         if (getChartPanel().isBox() == false){
            return 0;
         }
         else {
            double posA = getChartPanel().getCursorAPosition();
            double posB = getChartPanel().getCursorBPosition();
            double diff = posA - posB;
            return diff;
         }
    }
 

// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" Setters ">

    public void                 setDataType ( FID_DATA_TYPE type ) {
        this.getFidPlotData().setDataType(type);
        if ( data_type_cb != null ) {
            data_type_cb.setSelectedItem(type.getName());
        }
      
    }
    public void                 setFidReader (FidReader fidReader ) {
        getFidPlotData().setFidReader(fidReader);
    }
    public void                 setPlotType(FID_PLOT_TYPE type){
        this.getFidPlotData().setPlotType(type);
         if (getPlot_type_cb() != null ) {
            getPlot_type_cb().setSelectedItem(type.getName());
        }
    };
    public void                 setModelNumber ( int modelNumber ) {
        this.modelNumber = modelNumber;
        if(getModelFidFormattedTextField () != null){
            getModelFidFormattedTextField ().setValue(modelNumber);
        }
    }
 


   
  
// </editor-fold>
}
