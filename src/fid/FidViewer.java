/*
 * FidViewer.java
 *
 * Created on October 29, 2007, 3:06 PM
 */
package fid;

import interfacebeans.Viewable;
import utilities.Screenshot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import utilities.PanelUtility;
import applications.bayesMetabolite.MetabolitesAndResonances;
import applications.model.FidModel;
import applications.model.Model;
import interfacebeans.JProgress;
import java.io.*;
import java.awt.*;

import javax.swing.*;
import java.util.ArrayList;
import org.jfree.chart.plot.XYPlot;
import java.beans.PropertyChangeListener;
import bayes.BayesManager;
import bayes.DirectoryManager;
import bayes.PackageManager;
import utilities.DisplayText;
import ascii.*;
import interfacebeans.Viewer;
import utilities.IO;
import static bayes.Enums.*;
import static   fid.FidViewerPreferences.crsValueFormat;

/**
 *
 * @author  apple
 */
public class FidViewer extends javax.swing.JPanel
    implements    FidViewable, java.beans.PropertyChangeListener, Viewable {
    private static final long serialVersionUID  =   7526471295622516147L; 
   
    
    private BayesParamsReader   paramsReader    =   new BayesParamsReader ();
    private FidPlotData         fidPlotData     =   new  FidPlotData ();
    FidPopupMenu                popupmenu       =   null;
    private boolean             supressEvents   =   false;
    private  boolean            isUpdatePlot    =   true;
    private  boolean            isLoading       =   false;
    private   FidLoader         loader          =   null;
    private boolean             loaded          =   false;
    
  
    // FidViewer is a  singleton
    private static FidViewer instance           = null;
    private FidViewer () {
        initComponents();
        getFidPlotData().setPlotType(FID_PLOT_TYPE.Trace);

         makeVisible(false);

        BayesManager.pcs.addPropertyChangeListener(this);

        Model model =   PackageManager.getCurrentApplication();
        if (model != null && model instanceof FidModel){
            loadDefaultFid();
        }
        else{
             completeGuiDefaultLoad();
        }
        
    }
    public static FidViewer getInstance () {
        if ( instance == null ) {
            instance = new FidViewer();
        }

        return instance;
    }
    public static void addBayesManagerListener(){
         java.beans.PropertyChangeListener[]  lis   =   instance.getPropertyChangeListeners();
         boolean found                              =   false;
         for (PropertyChangeListener propertyChangeListener : lis) {
            if (propertyChangeListener == BayesManager.pcs){
                found = true;
                return;
            }
         }
         if (found == false){
                 BayesManager.pcs.addPropertyChangeListener(instance);
         }

    }
    public static void reset () {
         if (instance == null) {return;}
      
         java.beans.PropertyChangeListener[]  lis =   instance.getPropertyChangeListeners();


         instance.cancelLoad();
       

         for (PropertyChangeListener listener : lis) {
            instance.removePropertyChangeListener(listener);
         }

         //instance.getChartPanel().removePropertyChangeListener(instance);
         JRegions.close();
         JSetReference.hideDialog();
         JPhasing.hideDialog();
         getResonanceList().clear();

         // resets static metbolites from memory
         MetabolitesAndResonances.getMetabolitesAndResonances().reset();

         instance.setFidReader(null);
         instance.fidPlotData  = null;
         instance.setParamsReader(new BayesParamsReader());

         instance = null;
          
    }

   
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        saveToFileButton = new javax.swing.JButton();
        editPlot = new javax.swing.JButton();
        infoButton = new javax.swing.JButton();
        unloadButton = new javax.swing.JButton();
        cancelLoadButton = new javax.swing.JButton();
        loadPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        loadLabel = new javax.swing.JLabel();
        progressPane = new javax.swing.JPanel();
        progressLabel = new javax.swing.JLabel();
        progressbar = new javax.swing.JProgressBar();
        viewer = new javax.swing.JPanel();
        plot_panel = new javax.swing.JPanel();
        cursorPane = new javax.swing.JPanel();
        curA_lbl = new javax.swing.JLabel();
        curA_tf = new javax.swing.JTextField();
        curB_lbl = new javax.swing.JLabel();
        curB_tf = new javax.swing.JTextField();
        interval_lbl = new javax.swing.JLabel();
        interval_tf = new javax.swing.JTextField();
        clearCursors_button = new javax.swing.JButton();
        full_button = new javax.swing.JButton();
        expand_button = new javax.swing.JButton();
        autoscale_btn = new javax.swing.JButton();
        extractPixelButton = new javax.swing.JButton();
        plot = getChartPanel();
        tooAndProgressPane = new javax.swing.JPanel();
        trace_lbl1 = new javax.swing.JLabel();
        track_spinner = new JSpinner();
        data_type_cb = new JComboBox( FID_DATA_TYPE.getPlotTypes());
        optionsButton = new javax.swing.JButton();
        messageLabel = new javax.swing.JLabel();
        slidingBar = new fid.SlidingBar();

        saveToFileButton.setText("Save to Ascii");
        saveToFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToFileButtonActionPerformed(evt);
            }
        });

        editPlot.setBackground(new java.awt.Color(0, 0, 0));
        editPlot.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        editPlot.setForeground(new java.awt.Color(255, 255, 0));
        editPlot.setText("Print/Save"); // NOI18N
        editPlot.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nEdit plot properties.\n\n\n</font></p><html>\n\n"); // NOI18N
        editPlot.setFocusable(false);
        editPlot.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        editPlot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPlotActionPerformed(evt);
            }
        });

        infoButton.setBackground(new java.awt.Color(0, 0, 0));
        infoButton.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        infoButton.setForeground(new java.awt.Color(255, 255, 0));
        infoButton.setText("FID Info"); // NOI18N
        infoButton.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nShow FID information.\n\n</font></p><html>"); // NOI18N
        infoButton.setFocusable(false);
        infoButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        infoButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        infoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoButtonActionPerformed(evt);
            }
        });

        unloadButton.setBackground(new java.awt.Color(0, 0, 0));
        unloadButton.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        unloadButton.setForeground(new java.awt.Color(255, 255, 0));
        unloadButton.setText("Unload"); // NOI18N
        unloadButton.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nUnload fid data and free up memory.<br>\nThe copy of original files in the current<br>\nworking directory are deleted.\n\n</font></p><html>"); // NOI18N
        unloadButton.setFocusable(false);
        unloadButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        unloadButton.setMargin(new java.awt.Insets(4, 3, 5, 3));
        unloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unloadButtonActionPerformed(evt);
            }
        });

        cancelLoadButton.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        cancelLoadButton.setText("Cancel");
        cancelLoadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelLoadButtonActionPerformed(evt);
            }
        });

        setBackground(new java.awt.Color(0, 0, 0));
        setPreferredSize(new java.awt.Dimension(800, 400));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));

        loadPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(51, 51, 51), new java.awt.Color(102, 102, 102), new java.awt.Color(153, 153, 153), new java.awt.Color(204, 204, 204)));
        loadPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 10));

        jButton1.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        jButton1.setText("Load");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        loadPanel.add(jButton1);

        loadLabel.setFont(new java.awt.Font("Lucida Grande", 1, 16));
        loadLabel.setText("Load spectral fid stored from previous session");
        loadPanel.add(loadLabel);

        add(loadPanel);

        progressPane.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 3, 10));

        progressLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        progressLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        progressLabel.setText(" ");
        progressPane.add(progressLabel);
        progressPane.add(progressbar);

        add(progressPane);
        progressPane.setVisible(false);

        viewer.setLayout(new java.awt.BorderLayout());

        plot_panel.setBackground(new java.awt.Color(0, 0, 0));
        plot_panel.setAutoscrolls(true);
        plot_panel.setFocusable(false);
        plot_panel.setOpaque(false);
        plot_panel.setPreferredSize(new java.awt.Dimension(200, 100));
        plot_panel.setLayout(new java.awt.BorderLayout());

        cursorPane.setBackground(new java.awt.Color(0, 0, 0));

        curA_lbl.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        curA_lbl.setForeground(new java.awt.Color(255, 255, 255));
        curA_lbl.setLabelFor(curA_tf);
        curA_lbl.setText("Cursor A"); // NOI18N

        curA_tf.setBackground(new java.awt.Color(255, 255, 0));
        curA_tf.setEditable(false);
        curA_tf.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        curA_tf.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        curA_tf.setText("          "); // NOI18N
        curA_tf.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nPosition of cursor A in the plot.\n\n\n</font></p><html>\n\n\n"); // NOI18N
        curA_tf.setBorder(null);
        curA_tf.setMinimumSize(new java.awt.Dimension(25, 17));
        curA_tf.setPreferredSize(new java.awt.Dimension(80, 17));

        curB_lbl.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        curB_lbl.setForeground(new java.awt.Color(255, 255, 255));
        curB_lbl.setLabelFor(curB_tf);
        curB_lbl.setText("Cursor B"); // NOI18N

        curB_tf.setBackground(new java.awt.Color(255, 255, 0));
        curB_tf.setEditable(false);
        curB_tf.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        curB_tf.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        curB_tf.setText("          "); // NOI18N
        curB_tf.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\n\nPosition of cursor B in the plot.\n\n</font></p><html>"); // NOI18N
        curB_tf.setBorder(null);
        curB_tf.setMinimumSize(new java.awt.Dimension(25, 17));
        curB_tf.setPreferredSize(new java.awt.Dimension(80, 17));

        interval_lbl.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        interval_lbl.setForeground(new java.awt.Color(255, 255, 255));
        interval_lbl.setLabelFor(interval_tf);
        interval_lbl.setText("Delta"); // NOI18N

        interval_tf.setBackground(new java.awt.Color(255, 255, 0));
        interval_tf.setEditable(false);
        interval_tf.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        interval_tf.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        interval_tf.setText("          "); // NOI18N
        interval_tf.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nInterval between cursorA and cursor B in the plot.\n\n\n</font></p><html>"); // NOI18N
        interval_tf.setBorder(null);
        interval_tf.setMinimumSize(new java.awt.Dimension(25, 17));
        interval_tf.setPreferredSize(new java.awt.Dimension(80, 17));

        clearCursors_button.setBackground(new java.awt.Color(0, 0, 0));
        clearCursors_button.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        clearCursors_button.setForeground(new java.awt.Color(255, 255, 0));
        clearCursors_button.setText("Clear Cursors");
        clearCursors_button.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nClear cursors.\n\n\n</font></p><html>"); // NOI18N
        clearCursors_button.setBorderPainted(false);
        clearCursors_button.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        clearCursors_button.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        clearCursors_button.setMargin(new java.awt.Insets(4, 2, 5, 2));
        clearCursors_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearCursors_buttonActionPerformed(evt);
            }
        });

        full_button.setBackground(new java.awt.Color(0, 0, 0));
        full_button.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        full_button.setForeground(new java.awt.Color(255, 255, 0));
        full_button.setText("Full");
        full_button.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nExpand plot to full horizontal range.\n\n</font></p><html>"); // NOI18N
        full_button.setBorderPainted(false);
        full_button.setFocusable(false);
        full_button.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        full_button.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        full_button.setMargin(new java.awt.Insets(4, 5, 5, 4));
        full_button.setOpaque(true);
        full_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                full_buttonActionPerformed(evt);
            }
        });

        expand_button.setBackground(new java.awt.Color(0, 0, 0));
        expand_button.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        expand_button.setForeground(new java.awt.Color(255, 255, 0));
        expand_button.setText("Expand");
        expand_button.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nExpand the plot between the double cursors.\n\n\n</font></p><html>"); // NOI18N
        expand_button.setBorderPainted(false);
        expand_button.setFocusable(false);
        expand_button.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        expand_button.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        expand_button.setMargin(new java.awt.Insets(4, 2, 5, 2));
        expand_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expand_buttonActionPerformed(evt);
            }
        });

        autoscale_btn.setBackground(new java.awt.Color(0, 0, 0));
        autoscale_btn.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        autoscale_btn.setForeground(new java.awt.Color(255, 255, 0));
        autoscale_btn.setText("Autoscale");
        autoscale_btn.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\n\nAutoscale the plot.\n\n\n</font></p><html>\n\n"); // NOI18N
        autoscale_btn.setBorderPainted(false);
        autoscale_btn.setFocusable(false);
        autoscale_btn.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        autoscale_btn.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        autoscale_btn.setMargin(new java.awt.Insets(4, 2, 5, 2));
        autoscale_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoscale_btnActionPerformed(evt);
            }
        });

        extractPixelButton.setBackground(new java.awt.Color(0, 0, 0));
        extractPixelButton.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        extractPixelButton.setForeground(new java.awt.Color(255, 255, 0));
        extractPixelButton.setText("Get Peak"); // NOI18N
        extractPixelButton.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nTo load a single peak, place a single cursor on the<br>\npeak you wish to load and click this button.<br>\n\nFor packages that require two data columns,<br>\nplace cursors A abd B on the  peaks that are<br>\nto be loaded and click this button.\n\n</font></p><html>"); // NOI18N
        extractPixelButton.setBorderPainted(false);
        extractPixelButton.setFocusable(false);
        extractPixelButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        extractPixelButton.setMargin(new java.awt.Insets(4, 3, 5, 3));
        extractPixelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractPixelButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout cursorPaneLayout = new org.jdesktop.layout.GroupLayout(cursorPane);
        cursorPane.setLayout(cursorPaneLayout);
        cursorPaneLayout.setHorizontalGroup(
            cursorPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(cursorPaneLayout.createSequentialGroup()
                .add(0, 0, 0)
                .add(curA_lbl)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(curA_tf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 89, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(20, 20, 20)
                .add(curB_lbl)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(curB_tf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(interval_lbl)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(interval_tf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(1, 1, 1)
                .add(clearCursors_button)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(full_button)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(expand_button)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(autoscale_btn)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(extractPixelButton)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        cursorPaneLayout.linkSize(new java.awt.Component[] {curA_tf, curB_tf, interval_tf}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        cursorPaneLayout.setVerticalGroup(
            cursorPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(curA_tf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
            .add(curB_tf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
            .add(curB_lbl, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
            .add(curA_lbl, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
            .add(interval_lbl, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
            .add(interval_tf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
            .add(clearCursors_button, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, Short.MAX_VALUE)
            .add(full_button, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, Short.MAX_VALUE)
            .add(expand_button, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, Short.MAX_VALUE)
            .add(autoscale_btn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, Short.MAX_VALUE)
            .add(extractPixelButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, Short.MAX_VALUE)
        );

        plot_panel.add(cursorPane, java.awt.BorderLayout.PAGE_END);

        plot.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                plotPropertyChange(evt);
            }
        });
        plot.setLayout(new java.awt.BorderLayout());
        plot_panel.add(plot, java.awt.BorderLayout.CENTER);

        tooAndProgressPane.setBackground(new java.awt.Color(0, 0, 0));
        tooAndProgressPane.setLayout(new java.awt.GridBagLayout());

        trace_lbl1.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        trace_lbl1.setForeground(new java.awt.Color(255, 255, 255));
        trace_lbl1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        trace_lbl1.setLabelFor(track_spinner);
        trace_lbl1.setText("Trace");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        tooAndProgressPane.add(trace_lbl1, gridBagConstraints);

        track_spinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 0, 1));
        track_spinner.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nChoose FID trace to display. \n\n\n</font></p><html>\n\n\n"); // NOI18N
        track_spinner.setPreferredSize(new java.awt.Dimension(31, 17));
        /*
        JTextField tf = ((javax.swing.JSpinner.NumberEditor)track_spinner.getEditor()).getTextField();

        tf.setInputVerifier(new PassVerifier());
        track_spinner.setMinimumSize(new java.awt.Dimension(30, 20));
        track_spinner.setPreferredSize(new java.awt.Dimension(31, 17));
        tf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                System.out.println("java.awt.event.KeyEvent "+ evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                System.out.println("java.awt.event.KeyEvent "+ evt);
            }
        });
        * */
        track_spinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                track_spinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        tooAndProgressPane.add(track_spinner, gridBagConstraints);

        data_type_cb.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nChoose plot type to display.\n\n\n</font></p><html>"); // NOI18N
        data_type_cb.setMinimumSize(new java.awt.Dimension(80, 27));
        data_type_cb.setSelectedItem(getDataType ().getName());
        data_type_cb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                data_type_cbActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 89;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        tooAndProgressPane.add(data_type_cb, gridBagConstraints);

        optionsButton.setFont(new java.awt.Font("Lucida Grande", 0, 14));
        optionsButton.setText("Options");
        optionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionsButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 6, 0, 0);
        tooAndProgressPane.add(optionsButton, gridBagConstraints);

        messageLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        messageLabel.setForeground(new java.awt.Color(255, 255, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 15, 0, 0);
        tooAndProgressPane.add(messageLabel, gridBagConstraints);

        plot_panel.add(tooAndProgressPane, java.awt.BorderLayout.PAGE_START);

        viewer.add(plot_panel, java.awt.BorderLayout.CENTER);

        slidingBar.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), null));
        slidingBar.setCursor(new java.awt.Cursor(java.awt.Cursor.S_RESIZE_CURSOR));
        slidingBar.setMinimumSize(new java.awt.Dimension(20, 0));
        slidingBar.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                slidingBarPropertyChange(evt);
            }
        });

        org.jdesktop.layout.GroupLayout slidingBarLayout = new org.jdesktop.layout.GroupLayout(slidingBar);
        slidingBar.setLayout(slidingBarLayout);
        slidingBarLayout.setHorizontalGroup(
            slidingBarLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 28, Short.MAX_VALUE)
        );
        slidingBarLayout.setVerticalGroup(
            slidingBarLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 376, Short.MAX_VALUE)
        );

        viewer.add(slidingBar, java.awt.BorderLayout.WEST);

        add(viewer);
    }// </editor-fold>//GEN-END:initComponents

    private void track_spinnerStateChanged (javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_track_spinnerStateChanged
        if ( isLoaded () == false ) {  return; }
        int curIndex    = (Integer) getTrackSpinner().getValue();
        int trace       = curIndex - 1;
        
            
        updateFromBayesAnalyzeFiles (curIndex);
           
        
        getFidPlotData().setTrace(trace);
        
        updateNoiseThreshold ();
        updatePlot();



      
    }//GEN-LAST:event_track_spinnerStateChanged
    private void full_buttonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_full_buttonActionPerformed
            getChartPanel ().autoScaleDomainAxis();
}//GEN-LAST:event_full_buttonActionPerformed

private void editPlotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPlotActionPerformed
        int x = getEditPlot().getX();
        int y =  getChartPanel().getY() - getEditPlot().getY();
        getChartPanel().displayPopupMenu(x, 0);

}//GEN-LAST:event_editPlotActionPerformed
private void expand_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expand_buttonActionPerformed
     getChartPanel ().expandPlot();
}//GEN-LAST:event_expand_buttonActionPerformed
private void slidingBarPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_slidingBarPropertyChange
if ( evt.getPropertyName().equals(SlidingBar.verticalPositionChange)){
    Point  pOnSlider = ( Point)evt.getNewValue();
    Point pOnPlot       = SwingUtilities.convertPoint(  slidingBar,  pOnSlider, getChartPanel());
    double plotY        = getChartPanel(). java2DToPlotY(pOnPlot.getY());
    
    getChartPanel().shiftRangeAxis(plotY);
   }
}//GEN-LAST:event_slidingBarPropertyChange
private void clearCursors_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearCursors_buttonActionPerformed
   clearCursors();
}//GEN-LAST:event_clearCursors_buttonActionPerformed
private void autoscale_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoscale_btnActionPerformed
     getChartPanel().autoScale();
     
}//GEN-LAST:event_autoscale_btnActionPerformed
private void data_type_cbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_data_type_cbActionPerformed
    if ( isLoaded () == false ) {  return; }
            
     String type     =  getData_type_cb().getSelectedItem().toString();
     setDataType ( FID_DATA_TYPE.getTypeByName(type));
     updatePlot();
}//GEN-LAST:event_data_type_cbActionPerformed
private void infoButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoButtonActionPerformed
        Viewer.display(getDataInfo().toString(),"Fid Data Info" );
}//GEN-LAST:event_infoButtonActionPerformed
private void saveToFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveToFileButtonActionPerformed

        try{
       org.jfree.data.xy.XYSeriesCollection xyseries =      getFidPlotData().getChartPanel(). getDataset();
       int numberOfSeries                            =      xyseries.getSeriesCount();
       
       File dir                                      =      DirectoryManager.getBayesDir();
       StringBuilder sb                              =      new StringBuilder();
       String separator                              =      "   ";

       for (int  curSeries = 0; curSeries < numberOfSeries;  curSeries++) {
             int ndata                              =      xyseries.getItemCount(curSeries);
             sb                                     =      new StringBuilder();
             org.jfree.data.xy. XYSeries series        =      xyseries.getSeries(curSeries);  

             for (int curItem = 0; curItem < ndata; curItem++) {
                    sb.append(series.getX(curItem));
                    sb.append(separator);

                    sb.append(series.getY(curItem));
                    sb.append("\n");



                }
             File file          =  new File(dir,"series"+ curSeries);
             IO.writeFileFromString(sb.toString(), file);
        }



       
       }catch (Exception e){
           e.printStackTrace();
       }
}//GEN-LAST:event_saveToFileButtonActionPerformed
private void plotPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_plotPropertyChange
        if( evt.getPropertyName().equals(BayesManager.CURSOR_A_IS_DRAWN) ) {
                Double val = (Double) evt.getNewValue();
                String str = String.format(crsValueFormat, val);
                curA_tf.setText(str);
                updateCursor();
        }
        else if( evt.getPropertyName().equals(BayesManager.CURSOR_B_IS_DRAWN) ) {
                Double val = (Double) evt.getNewValue();
                String str = String.format(crsValueFormat, val);
                getCurB_tf().setText(str);
                updateCursor();
        }
        else if (evt.getPropertyName().equals(BayesManager.CURSOR_A_IS_DELETED) ) {
            curA_tf.setText("");
            getInterval_tf().setText("");
        }
        else if( evt.getPropertyName().equals(BayesManager.CURSOR_B_IS_DELETED) ) {
            getCurB_tf().setText("");
            getInterval_tf().setText("");
        }
}//GEN-LAST:event_plotPropertyChange
private void unloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unloadButtonActionPerformed
    unloadData ();
}//GEN-LAST:event_unloadButtonActionPerformed
private void extractPixelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractPixelButtonActionPerformed
    this. getPeak();
}//GEN-LAST:event_extractPixelButtonActionPerformed
private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    loadDefaultFid();
}//GEN-LAST:event_jButton1ActionPerformed
private void cancelLoadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelLoadButtonActionPerformed
    cancelLoad();
}//GEN-LAST:event_cancelLoadButtonActionPerformed

private void optionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionsButtonActionPerformed
     FidPopupMenu popup =  getPopupMenu() ;
     popup.update();

    popup .show (optionsButton, optionsButton.getWidth()/2, optionsButton.getHeight()/2);
}//GEN-LAST:event_optionsButtonActionPerformed
 
public void takeFidPlotScreenShot(){
     Screenshot.captureScreenShotAndDisplay(plot, "fidViewerScreenShot");     
 }
public FidPopupMenu getPopupMenu(){
        if (popupmenu == null){
            popupmenu                       = new FidPopupMenu(this);
            JPopupMenu addon                = getChartPanel().getPopupMenu();
            popupmenu.addCustomMenuesToPopupMenu(addon);
        }
        return popupmenu;
    }
    // FIDViewable interface
    @Override
    public Procpar          getProcpar () {
        FidReader reader    = getFidReader();
        Procpar procpar     =  reader.getProcpar();
        return procpar  ;
    }
    public FidChartPanel    getChartPanel () {
        return this.getFidPlotData().getChartPanel () ;
    }
    public XYPlot           getXYPlot () {
        return   getChartPanel().getChart().getXYPlot();
    }
    public FidReader        getFidReader () {
        return  getFidPlotData().getFidReader();
    }
    public FidPlotData      getFidPlotData () {
        return fidPlotData;
    }
    public UNITS            getUnits () {   return getFidReader ().getUnits(); }
    public void             setUnits(UNITS  units) {
        getFidReader().setUnits(units);
    } 
    public boolean          isLoaded () {
        return loaded;
    }
    public void             updatePlot () {
      if ( isUpdatePlot() == false ) {  return;}

        getFidPlotData().updateSeries();
        getFidPlotData().updatePlotSettings();
        getFidPlotData().updateAxis();
       
        //System.out.println("Plot is updated");

    }
    public String           getDataInfo () {
        if (this.isLoaded() == false){
              return "No fid Data is loaded";
        }

        StringBuilder info = new StringBuilder();
        int PAD_LEN                          =    33;
        String PAD_CHAR                      =    " ";
        String  EOL                          =   "\n";
        String  sp                           =   ":=";

       info.append(getFidReader ().getFidDescriptor().toString());


        info.append(EOL);


        // line
        info.append (" Procpar Parameters");
        info.append(EOL);

        // line
        info.append (IO.pad( "np" , PAD_LEN, PAD_CHAR));
        info.append (sp);
        info.append(" "+   getProcpar().getNp());
        info.append(EOL);

        // line
        info.append (IO.pad( "fn" , PAD_LEN, PAD_CHAR));
        info.append (sp);
        info.append(" "+   getProcpar().getFn());
        info.append(EOL);



        // line
        info.append (IO.pad( "sw" , PAD_LEN, PAD_CHAR));
        info.append (sp);
        info.append(" "+   getProcpar().getSw());
        info.append(EOL);


        // line
        info.append (IO.pad( "at" , PAD_LEN, PAD_CHAR));
        info.append (sp);
        info.append(" "+   getProcpar().getAt());
        info.append(EOL);



        // line
        info.append (IO.pad( "lb" , PAD_LEN, PAD_CHAR));
        info.append (sp);
        info.append(" "+   getProcpar().getLb());
        info.append(EOL);



        // line
        info.append (IO.pad( "lp" , PAD_LEN, PAD_CHAR));
        info.append (sp);
        info.append(" "+   getProcpar().getLp());
        info.append(EOL);


        // line
        info.append (IO.pad( "rp (in radians)" , PAD_LEN, PAD_CHAR));
        info.append (sp);
        info.append(" "+   getProcpar().getRp());
        info.append(EOL);

        // line
        info.append (IO.pad( "arraydim" , PAD_LEN, PAD_CHAR));
        info.append (sp);
        info.append(" "+  getProcpar().getArrayDim());
        info.append(EOL);


        // line
        info.append (IO.pad( "dp" , PAD_LEN, PAD_CHAR));
        info.append (sp);
        info.append(" "+    getProcpar().getIntegerType());
        info.append(EOL);

        // line
        info.append (IO.pad( "sfrq" , PAD_LEN, PAD_CHAR));
        info.append (sp);
        info.append(" "+   getProcpar().getSfrq());
        info.append(EOL);


        // line
        info.append (IO.pad( "ref(Hertz)" , PAD_LEN, PAD_CHAR));
        info.append (sp);
        info.append(" "+    getProcpar().getRef());
        info.append(EOL);


         // line
        if (getUnits() != UNITS.HERTZ){
            info.append (IO.pad( "ref"+ " ("+getUnits().getName()+")" , PAD_LEN, PAD_CHAR));
            info.append (sp);
            info.append(" "+     getFidPlotData().getReferenceInCurrentUnits ());
            info.append(EOL);
        }


        return info.toString();
    }
    public void             unloadData () {
        try{
              getFidPlotData().reset();

              //reset resonances
              getResonanceList().clear();


             setParamsReader(new BayesParamsReader());
             File dir               = DirectoryManager.getFidDir();
             utilities.IO.deleteFielsAndDirsInDirectory(dir);
             track_spinner.setModel(new SpinnerNumberModel(0, 0, 0, 1));


             //make sure resonce label is cleaned in BayesAnalyze and possibly for other usages
             BayesManager.fireFidUnloaded();

        }
        catch (Exception e){
            e.printStackTrace();
        }
        finally{
            updatedLoadedState();
        }

    }
    public File             getDataDir(){return DirectoryManager.getFidDir();}
    public File             getFidDescriptorFile(){return DirectoryManager.getFidDesciptorFile();}

    public void propertyChange ( java.beans.PropertyChangeEvent evt ) {
      
        if(evt.getPropertyName().equals(BayesManager.JRUN_JOB_START)){
          //  this.setActive (false);
            return;
        }
        else if(evt.getPropertyName().equals(BayesManager.JRUN_JOB_END)){
           // this.setActive (true);
            return;
        }
        else if(evt.getPropertyName().equals(BayesManager.JRUN_JOB_CANCELED)){
            //this.setActive (true);
            return;
        }
        else if(evt.getPropertyName().equals(BayesManager.FID_UNITS_ARE_CHANGED)  ){
           // clean BayesAnalyze and FidModel Files
             DirectoryManager.cleanFidModelAndBayesAnalyzeDirs();

           // clear resonances
             resetModelAndResonances();
        }
    
             
   
    
  
    }
    public Component getMainDisplay(){return this.plot_panel;}
    
    public void             loadData (File cur_dir, boolean isLoadedByUSer ) {
        
        try{
        
            // make default data load panel invisible
            loadPanel.setVisible(false);

            boolean canLoad         =   isLoading();
            if (canLoad == false){return;}
            loader                  =   new FidLoader();
            loader.loadDir          =   cur_dir;
            loader.isLoadedByUSer   =   isLoadedByUSer;

            String message          =   String.format("Loading data from %s.", cur_dir.getPath());
            startProgressBar(message);
            loader.execute();
        }
        catch(Exception e){e.printStackTrace();}
        finally{
            setMessage("");
        }
    }
    public void             loadData ( FidReader reader, boolean isLoadedByUSer ) {
  
        supressEvents           =   true;
        try{
            // reset FidPlotData
            getFidPlotData().reset();
            getFidPlotData().resetStatic();

            //reset resonances
            getResonanceList().clear();

            //
            setFidReader(reader);


            // reset Bayes Analyze parameters
              setParamsReader(new BayesParamsReader());

            // parse bayes analyze files and set corresponding parameters, when appropriatel
            updateFromBayesAnalyzeFiles (1);

            //
            setDataType(FID_DATA_TYPE.SPECTRUM_REAL);
            getChartPanel().updatesDomainAndRangeAxis();
          


           // set spin  tracker
            int nTotalTraces        =   getNumberOfTraces();
            SpinnerModel model      =   new SpinnerNumberModel(1, 1, nTotalTraces, 1);
            getTrackSpinner ().setModel(model);

            supressEvents           = false;


            FidChartPanel.resetRangeScaling ();
            updateNoiseThreshold ();
            getChartPanel().restoreAutoBounds();

            isUpdatePlot            = true;


           

            // make final plot update
            updatePlot();

             // make sure plot axis are autosclaed
            getChartPanel().autoScale();




        }
        catch (Exception e){
            e.printStackTrace();
        }
        finally{
            // always uploaded loaded state
            updatedLoadedState();

            if (isLoaded()){
                 if ( isLoadedByUSer == true ) {BayesManager.fireFidIsLoadedByUser();}
                 else {  BayesManager.fireFIdIsLoadedByJava(); }
            }


        }

    }
    public boolean          isLoading(){
        if (this.isLoading == false){return true;}
        else{
            String msg      =     "Can not load data because another dataset.\n"
                                +   "is being currenly loaded on the backround thread.";
            String curdata      =   (loader!=null)?loader.loadDir.getPath():null;
            if (curdata  != null){
                String add      =   String.format("Data source: %s", curdata);
                msg             =   msg + "\n"+add;
            }
            DisplayText.popupMessage(msg);
            return false;
        }
    }
    public static boolean   isValidFidData( ){
         File dir           =   DirectoryManager.getFidDir();
         File  procparFile  =   DirectoryManager.getProcparFile();
         File  fidFile      =   DirectoryManager.getFidFile();

         if (dir == null)                           { return false;}
         if (procparFile.exists() == false)         { return false;}
         if (fidFile.exists() == false)             { return false;}

        // if (Procpar.isImage(procparFile) == true)  { return false;}
         return true;
    }
    public static boolean   copyData( ){
         File dir           =   DirectoryManager.getFidDir();

         if (dir == null)                           { return false;}

         return true;
    }
    public void             cancelLoad(){
        if(this.isLoading){
            isLoading   =   false;
            boolean canceled = loader.cancel(true);
            loader           =  null;
            System.out.println("is cancelled "+ canceled);

        }
        stopProgressBar();
    }
    public void             updatedLoadedState () {
        boolean loadedstate             =   false;
        try{
            if (getFidReader() == null || getFidReader().isFidReaderLoaded() == false ) {
                loadedstate =  false;
            }
            else{
                loadedstate = true;
            }
        }
        finally{
           setLoaded(loadedstate);

          makeVisible(loadedstate);
        }


    }

    private void completeGuiDefaultLoad(){
        boolean isDefaultData   = isValidFidData( );
        if (isDefaultData == false){
            loadPanel.setVisible(false);
          //  viewer.setVisible(true);
        }
        else{
            File ffhfile        =   DirectoryManager.getFidDesciptorFile();
            FidDescriptor ffh   =   FidIO.loadFromDisk(ffhfile);
            String labeltext    =   "Load spectral fid stored from previous session";
            String filename     =   ffh.getSourceFileName();
            if (filename != null && filename.isEmpty() == false){
                labeltext    =   String.format(
                    "Load Fourier Tranform Of: %s",
                     filename);
            }


            loadLabel.setText(labeltext );
            loadPanel.setVisible(true);
            // viewer.setVisible(false);
        }
    }


   
    public void updateNoiseThreshold (){
        double   threshold      =   getNoiseThreshold();
        this.getChartPanel().setThreshold(threshold);
  }  
    public void updateCursor(){
        double diff = this.getCursorsDifference();
        if (diff == 0){
            getInterval_tf().setText("");
        }
        else {
            String str = String.format(crsValueFormat, diff);
            getInterval_tf().setText(str);
        }         
    }
    public void updateFromBayesAnalyzeFiles(){
         updateFromBayesAnalyzeFiles(this.getTraceNumber());
    }
    public void updateFromBayesAnalyzeFiles(int curTrace){
        // bayesparams files exist and loaded correctly
        // load and set resonances from bayes.model.file
        // with lowest available index ( modelNumbers.from)
        FidModelNumbers modelNumbers = getModelNumbers();

        if (modelNumbers.isLoaded() == true){
            int modelIndex                  =   getFidModelIndex(curTrace,  modelNumbers);
            File curModelFile               =   DirectoryManager.getIndexedModelFile( modelIndex) ;
            BayesParamsReader bpr           =   new BayesParamsReader(curModelFile);
           

              if(bpr.isLoadedSuccessfully() ){
                  this.setUpdatePlot(false);
                  this.setParamsReader(bpr); // paramsReader = bpr;
                  this.setResonanceList( paramsReader.getResonances());
                 
                  UNITS curUnits         =  paramsReader.getUnits();
                  float ref              =  paramsReader.getUserReference();
                  float sfeq             =  paramsReader.getSpecFreq();
                  float refInHertz       =  fid.Units.convertUnits(ref, sfeq, curUnits, UNITS.HERTZ);
                     
                  setReferenceInHertz(refInHertz);

                  getFidReader().setUnits(curUnits,false);
                  setUpdatePlot(true);
                  
                 
            
              }
        }
        else { 
            //resetModelAndResonances();
        }
             
    }
    public void resetModelAndResonances(){
        setParamsReader(new BayesParamsReader()); // dummy reader;
        getResonanceList().clear();
    }

    public  XYLineAndShapeRenderer getXYLineAndShapeRenderer(){
        XYLineAndShapeRenderer renderer         =   null;
        try{
            XYPlot xyplot =      (XYPlot)  getChartPanel().getChart().getPlot();
            renderer = (XYLineAndShapeRenderer) xyplot .getRenderer();

        }
        catch (Exception e){e.printStackTrace();}
        finally{
            return renderer ;
        }

    }
    public void setTraceColor( int trace, Color color){
        XYLineAndShapeRenderer renderer  = getXYLineAndShapeRenderer();
      //  XYLineAndShapeRenderer  renderer  = new XYLineAndShapeRenderer();
        
      //  renderer                 =   oldrenderer;
       // oldrenderer.getser
        if (renderer != null){
             renderer.setSeriesPaint(trace, color, true);
           
        }
         XYPlot xyplot =      (XYPlot)  getChartPanel().getChart().getPlot();
         xyplot.setRenderer(renderer);
    }   
 


    public void synchronize(){
              Sync.sync(this, FidModelViewer.getInstance());
    }


 
   
    public void deserialize(ObjectInputStream serializationFile)
    {
       
        try{
     
             FID_DATA_TYPE type = (FID_DATA_TYPE)serializationFile.readObject( );
             setDataType(type);
        }
        catch (Exception exp){ exp.printStackTrace();return ;}
       
        
    }
    public void serialize(ObjectOutputStream serializationFile) throws IOException
     {
        serializationFile.writeObject(  getDataType() );

    }

   
    public  void loadDefaultFid() {
        boolean isfidViewerLoadable     =  isValidFidData( );

        if (isfidViewerLoadable == true){
            boolean loadByUser  = false;
            File fidDir         =   DirectoryManager.getFidDir ();
            loadData     (   fidDir,loadByUser ); // loaded by user
        }
        else{
            completeGuiDefaultLoad();
        }
    }
   
    public void setMessage(String txt){
        this.messageLabel.setText(txt);
    }
    public void  clearCursors(){
     getChartPanel().deleteCursors();
}
    private void startProgressBar(String message){
        if (progressbar == null){return;}
        
        progressbar.setIndeterminate(true);
        progressbar.setStringPainted(false);
        progressLabel.setText(message);

        progressPane.setVisible(true);
        progressLabel.setVisible(true);
        progressbar.setVisible(true);
    }
    private void stopProgressBar(){
        if (progressbar == null){return;}
        progressbar.setIndeterminate(false);
        progressbar.setStringPainted(false);
        progressLabel.setText("");
        
        progressPane.setVisible(false);
        progressLabel.setVisible(false);
        progressbar.setVisible(false);
    }
    public void showGUI ( JFrame frame ) {
        if ( this.isShowing() ) {
            return;
        }
        if ( frame == null ) {
            frame = new JFrame();
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        }

        frame.setContentPane(this);

        frame.pack();
        frame.setVisible(true);
    }
    public void showGUI ( JComponent pane ) {
        if ( pane == null ) {
            showGUI(new JFrame());
            return;
        }
        pane.removeAll();
        pane.add(this);
        pane.revalidate();
        pane.repaint();
    }
    public static void createAndShowGUI() {

        //Create and set up the window.
        JFrame frame = new JFrame(" Bayes Analyze ");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.addWindowListener(new java.awt.event.WindowAdapter() {

            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                DirectoryManager.shutDownDirectory();
            }
        });
        frame.add(FidViewer.getInstance());

        //Display the window.
        frame.pack();
        frame.setVisible(true);
//        FidViewer.getInstance().updatePlot();
    }
    public static void main(String[] args) {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                createAndShowGUI();
            }
        });

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton autoscale_btn;
    private javax.swing.JButton cancelLoadButton;
    private javax.swing.JButton clearCursors_button;
    private javax.swing.JLabel curA_lbl;
    private javax.swing.JTextField curA_tf;
    private javax.swing.JLabel curB_lbl;
    private javax.swing.JTextField curB_tf;
    private javax.swing.JPanel cursorPane;
    private javax.swing.JComboBox data_type_cb;
    private javax.swing.JButton editPlot;
    private javax.swing.JButton expand_button;
    private javax.swing.JButton extractPixelButton;
    private javax.swing.JButton full_button;
    private javax.swing.JButton infoButton;
    private javax.swing.JLabel interval_lbl;
    private javax.swing.JTextField interval_tf;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel loadLabel;
    private javax.swing.JPanel loadPanel;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JButton optionsButton;
    private javax.swing.JPanel plot;
    public javax.swing.JPanel plot_panel;
    private javax.swing.JLabel progressLabel;
    private javax.swing.JPanel progressPane;
    private javax.swing.JProgressBar progressbar;
    private javax.swing.JButton saveToFileButton;
    private fid.SlidingBar slidingBar;
    private javax.swing.JPanel tooAndProgressPane;
    private javax.swing.JLabel trace_lbl1;
    public javax.swing.JSpinner track_spinner;
    private javax.swing.JButton unloadButton;
    private javax.swing.JPanel viewer;
    // End of variables declaration//GEN-END:variables

    public javax.swing.JTextField   getCurB_tf () {
        return curB_tf;
    }
    public javax.swing.JPanel       getCursor_pane () {
        return tooAndProgressPane;
    }
    public javax.swing.JComboBox    getData_type_cb () {
        return data_type_cb;
    }
    public javax.swing.JButton      getEditPlot () {
        return editPlot;
    }
    public javax.swing.JButton      getExpand_button () {
        return expand_button;
    }
    public javax.swing.JButton      getFull_button () {
        return full_button;
    }
    public javax.swing.JButton      getInfoButton () {
        return infoButton;
    }
    public javax.swing.JTextField   getInterval_tf () {
        return interval_tf;
    }
    public javax.swing.JPanel       getPlot_panel () {
        return plot_panel;
    }
    public javax.swing.JSpinner     getTrackSpinner () {
        return track_spinner;
    }
  


    //******* getters and setters **********//
    // <editor-fold defaultstate="collapsed" desc="Getters ">

   

   
    public void getPeak(){
        Procpar    procpar      = getProcpar();

        if (this.isShowing() == false) {
            DisplayText.popupErrorMessage("Make sure that fid data is shown");
            return;
        }

        if (this.isLoaded() == false) {
           // DisplayText.popupErrorMessage("Make sure that fid data is loaded");
            return;
        }

        if (procpar.isDataArrayed() == false) {
            DisplayText. popupErrorMessage("FID must be arrayed. Can't proceed.");
            return;
        }
       
        if (getChartPanel().getChartMode() ==  FID_CHART_MODE.FID) {
           DisplayText.popupErrorMessage("Make sure that spectrum is displayed.");
            return;
        }

         if (this.getChartPanel().getCursorA () ==null) {
            DisplayText.popupErrorMessage("Cursor A must be displayed");
            return;
        }
         boolean isMultiplePeaks = PackageManager.isMultipleDataColumnsModel();
         if (isMultiplePeaks == true && this.getChartPanel().getCursorB () ==null) {
            DisplayText.popupErrorMessage("Cursor B must be displayed");
            return;
        }
        int numElem             = procpar.getNumberOfElements();
        if (numElem < 1){
            DisplayText.popupErrorMessage("Dimension of array values in procpar is less than 1.");
            return;
        }


        File file                       = DirectoryManager.getNewAsciiFile();


        String [][] abscissa            =  procpar.getArrayValues();
        float [][] realSpectra          =  getFidReader().getRealSpectra();
        java.util.List<Double> data1    =  new ArrayList<Double>();
        java.util.List<Double> data2    =  new ArrayList<Double>();
        boolean isMultipleAbs           = (abscissa.length >1);
        int indexA                      = getChartPanel().getClosestPointIndexToCursorA();
        int indexB                      =  -1;

        int nAbs                        = abscissa.length;
        int nData                       = (isMultiplePeaks)?2:1;
        int numOfColumns                =  AsciiDataFileWriter.getNumberOfColumns(nAbs, nData );


       if (isMultiplePeaks == true){
                indexB       = getChartPanel().getClosestPointIndexToCursorB();

                for (int i = 0; i < realSpectra .length; i++) {
                    float[] real        = realSpectra [i];
                    data1.add( (double)real [indexA]);
                    data2.add( (double)real [indexB]);
                }
        }
        else {

                for (int i = 0; i < realSpectra .length; i++) {
                    float[] real        = realSpectra [i];
                    data1.add( (double)real [indexA]);
                }
        }


       String content =  AsciiDataFileWriter. getContent (abscissa, data1, data2, isMultiplePeaks,isMultipleAbs  );
       IO.writeFileFromString(content, file);


        double freqA    = getFidPlotData().getFrequency()[indexA];
        freqA           = Units.convertFromFidViewrUnitsToHertz(freqA);

        double freqB    = Double.NaN;

        if (isMultiplePeaks){
                freqB   = getFidPlotData().getFrequency()[indexB];
                freqB   = Units.convertFromFidViewrUnitsToHertz(freqB);

        }


        StringBuilder sb = new StringBuilder();

        if (isMultiplePeaks){
                String fa =  String.format(crsValueFormat, freqA);
                String fb =  String.format(crsValueFormat, freqB);
                sb.append("first peak at "+ fa  + " hertz");
                sb.append(", ");
                sb.append("second peak at "+  fb  + " hertz");
                sb.append(BayesManager.EOL);

        }
        else {
                String fa =  String.format(crsValueFormat, freqA);
                sb.append("peak located at "+  fa  + " hertz");
                sb.append(BayesManager.EOL);

        }



        File   afh                  =  DirectoryManager.getAfhFileForData(file);
        AsciiDescriptor ad          =   new AsciiDescriptor();

        ad.setDataSource( AsciiDescriptor.SOURCE_TYPE.PEAK_PICK.getInfo() );
        ad.setNumberOfColumns(numOfColumns);
        ad.setNumberOfRows(numElem);
        ad.setSourceFileName( procpar.getFileSource());
        ad.setExtraInfo(sb.toString());
        AsciiIO.storeToDisk(ad, afh );


        interfacebeans.AllViewers.showAsciiViewer();

 }
    public void addRegions(){

        if (this.isShowing() == false) {
            DisplayText.popupErrorMessage("Make sure that fid data is shown");
            return;
        }

        if (this.isLoaded() == false) {
            DisplayText.popupErrorMessage("Make sure that fid data is loaded");
            return;
        }
        if (getChartPanel().getChartMode() ==  FID_CHART_MODE.FID) {
           DisplayText.popupErrorMessage("Make sure that spectrum is displayed.");
            return;
        }

         if (this.getChartPanel().getCursorA () ==null 
                ||
            this.getChartPanel().getCursorB () == null    )
         {
            DisplayText.popupErrorMessage("Both Cursor A and B must be displayed");
            return;
        }
      
      

        File file                       =   DirectoryManager.getRegionsFile();
        String content                  =   IO.readFileToString(file);
        if (content == null){content = "";}


        int indexA                      =   getChartPanel().getClosestPointIndexToCursorA();
        int indexB                      =  getChartPanel().getClosestPointIndexToCursorB();

        double freqA                    = getFidPlotData().getFrequency()[indexA];
        double freqB                    = getFidPlotData().getFrequency()[indexB];
        
        content                        += String.format("%12.6f", freqB );
        content                        += " ";
        content                        += String.format("%12.6f", freqA );
        content                        += "\n";

        IO.writeFileFromString(content, file);
 }
    
    public boolean isLoadBayesAnalyze(){

        if (isLoaded() == false ){
            DisplayText.popupMessage("Fid is not loaded.");
            return false;
        }

       if (getProcpar().isDataArrayed() == false){
           DisplayText.popupMessage("Fid must be arrayed.");
            return false;
        }


        FidModelNumbers modelNumbers =  getModelNumbers();
        if (modelNumbers .isLoaded() == false
                ||
            getParamsReader().isLoadedSuccessfully() == false){

           DisplayText.popupMessage("Bayes Analyze files are not loaded");
           return false;
        }


        return true;
    }
    public int getTraceNumber () {
        return  (Integer) getTrackSpinner().getValue();
    }
    public int getNumberOfTraces () {
        return getFidReader().getNumberOfTotalTraces();
    }
    public FID_DATA_TYPE getDataType () {  return this.getFidPlotData().getDataType(); }
    public float getReferenceInCurrentUnits(){
        float ref               = getFidReader().getReferenceFreqInHertz();
        Procpar  procpar        = getProcpar();
        UNITS    currentUnits   = getUnits();
        ref                     = (float) Units.convertUnits(ref, procpar,UNITS.HERTZ, currentUnits);
        return ref;
    
    }
    public  static ArrayList <Resonance> getResonanceList(){
        return  Resonance.getResonanceList();
    }
  
  
  
    public double getNoiseThreshold (){
        int curTrace            =   getTraceNumber() - 1;
        double   threshold      =   getFidReader().getNoiseThreshHold()[curTrace];
        return threshold;
  } 
    public double getCursorsDifference(){
         if (getChartPanel().isBox() == false){
            return 0;
         }
         else {
            double posA = getChartPanel().getCursorAPosition();
            double posB = getChartPanel().getCursorBPosition();
            double diff = posA - posB;
            return diff;
         }
    }
    public BayesParamsReader getParamsReader () {
        return paramsReader;
    }
    public static int getFidModelIndex ( int curFidModel, FidModelNumbers modelNumbers) {
        int firstFid    =    modelNumbers.getFrom();
        int lastFid     =    modelNumbers.getTo();
        int byFid       =    modelNumbers.getBy();
        
        
        int curMin      =   firstFid;
        int curMax      =   firstFid + byFid;
        int index       =   firstFid;
        
        while ( curFidModel >= curMax && curMax < lastFid + byFid ) {
            curMax += byFid;
            curMin += byFid;
        }
        
        index = curMin;
        return index;
    } 
    public static int getFidModelIndex ( int curFidModel) {
        FidModelNumbers modelNumbers    =    getModelNumbers();
        int firstFid                    =    modelNumbers.getFrom();
        int lastFid                     =    modelNumbers.getTo();
        int byFid                       =    modelNumbers.getBy();
        
        
        int curMin                      =   firstFid;
        int curMax                      =   firstFid + byFid;
        int index                       =   firstFid;
        
        while ( curFidModel >= curMax && curMax < lastFid + byFid ) {
            curMax += byFid;
            curMin += byFid;
        }
        
        index = curMin;
        return index;
    }
    public static FidModelNumbers getModelNumbers () {
        File bAnalyzeParamsFile         =   DirectoryManager.getBayesAnalyzeParamsFile() ;
        FidModelNumbers modelNumbers    =   BayesParamsReader.readModelNumbers(bAnalyzeParamsFile);

        return modelNumbers;
    }
   
    public boolean isUpdatePlot () {

        return isUpdatePlot;
    }
    
    public boolean isJointAnalysis(){
        FidModelNumbers modelNumbers = getModelNumbers();
        if (modelNumbers.getFrom() != 1)                        {return false;}
        if (modelNumbers.getBy()   != modelNumbers.getTo()){return false;}
        if (modelNumbers.getTo()   != getNumberOfTraces()) {return false;}
        return true;
    
    }
    public String getNotJointMessage(){
            StringBuilder sb = new StringBuilder();
              sb.append("Analysis is not joint.");
              sb.append("\n");
              sb.append("\n");

              sb.append("From =  "+  getModelNumbers().getFrom());
              sb.append("\n");

              sb.append("By   =  "+   getModelNumbers().getBy());
              sb.append("\n");

              sb.append("To   =  "+   getModelNumbers().getTo());
              sb.append("\n");

              sb.append("Number of traces = "+ getNumberOfTraces());
              sb.append("\n");

              return sb.toString();

    }
    public boolean isNotJointButAllBy1Analysis(){
        FidModelNumbers modelNumbers = getModelNumbers();
        if (modelNumbers.getFrom() != 1)                   {return false;}
        if (modelNumbers.getBy()   != 1)                   {return false;}
        if (modelNumbers.getTo()   != getNumberOfTraces()) {return false;}
        return true;

    }

    public void     setDataType ( FID_DATA_TYPE type ) {
        getFidPlotData().setDataType(type);
        if ( getData_type_cb() != null ) {
          getData_type_cb().setSelectedItem(type.getName());
        }
      
    }
    public boolean isSupressEvents () {
        return supressEvents;
    }
  

    public  void setReferenceInHertz ( float refFreqHertz ) {
           getFidReader().setReferenceFreqInHertz(refFreqHertz);
    }
 
    public void setFidReader (FidReader fidReader ) {
        getFidPlotData().setFidReader(fidReader);
    }
    public void setPlotType(FID_PLOT_TYPE type){
        this.getFidPlotData().setPlotType(type);
    };
    public  void setResonanceList(ArrayList <Resonance> resList){
        Resonance.setResonanceList(resList);
    }
    public void setParamsReader ( BayesParamsReader paramsReader ) {
        this.paramsReader = paramsReader;
    }
    public void setTraceNumber ( int  traceNumber  ) {
        getTrackSpinner().setValue(traceNumber);
    }
    public void setUpdatePlot ( boolean isUpdatePlot ) {
        this.isUpdatePlot = isUpdatePlot;
    }
    public void setLoaded(boolean loaded) {
        this.loaded = loaded;
        this.firePropertyChange("If Fid Viewer Loaded", !this.loaded, this.loaded);
    }
    public void makeVisible(boolean visible){
        PanelUtility.setVisible(plot_panel, visible);
        PanelUtility.setVisible(slidingBar, visible);
    }



   
     class FidLoader extends SwingWorker{
       JProgress jp                =    null;
       File loadDir                =    null;
       FidReader fidReader         =    null;
       boolean success             =    false;
       boolean isLoadedByUSer      =    false;

       @Override
        public Boolean doInBackground() {
           FidViewer.this.isLoading         =   true;
           success                          =   false;
           try {
                 // read fid and procpar files
                FidReader fr                =   new FidReader(loadDir,true);
                boolean isFidDataloaded     =   fr.isDoneLoading();
                if(isFidDataloaded == false){
                     throw new IllegalArgumentException ("Failed to load fid");
                }

                // compute spectral data
                boolean isSpectra = fr.computeSpectralData(true);
                if(isSpectra == false){
                     throw new IllegalArgumentException ("Failed to compute fid spectra");
                }

                if ( isCancelled()){throw new Exception ("Loading is cancelled");}
                fidReader       =   fr;
                success         =   true;

               } catch (Exception e) {
                   e.printStackTrace();
               }
               finally{
                    FidViewer.this.isLoading         =   false;
                    return success;
               }

           }

         @Override
         public void done() {
            stopProgressBar();
            if (success){
                    FidViewer.this.loadData(fidReader, isLoadedByUSer);
            }
            else{
                FidViewer.this. getFidPlotData().reset();
                setParamsReader(new BayesParamsReader());
            }
        }


     }
}
