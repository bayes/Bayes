/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JEditModel.java
 *
 * Created on Feb 16, 2010, 9:33:09 PM
 */

package interfacebeans;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.InputStream;
import java.text.DecimalFormat;
import java.util.List;
import java.util.Vector;
import java.util.regex.Pattern;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButton;
import javax.swing.JSeparator;
import javax.swing.ListCellRenderer;
import javax.swing.plaf.basic.BasicArrowButton;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.NumberFormatter;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;
import run.RunCompile;
import bayes.ApplicationConstants;
import utilities.AsciiModelList;
import utilities.EnterAsciiModel;
import utilities.IO;
import bayes.DirectoryManager;
import utilities.DisplayText;
import bayes.IsPriorReadyToRun;
import bayes.ParameterPrior;
import bayes.ParameterPrior.ORDER_TYPE;
import bayes.ParameterPrior.PARAMETER_TYPE;
import bayes.ParameterPrior.PRIOR_TYPE;

/**
 *
 * @author apple
 */
public class JEditModel extends javax.swing.JDialog {

    public static final String COMPILE_IS_RUN        = "Compile Fortran has been run by JRUN";

   private static JEditModel  instance               =   null;
   private AsciiModelList models                    =   new  AsciiModelList();
   private EnterAsciiModel editModel                =   null;
   public NumberFormatter nf                        =   new NumberFormatter(new DecimalFormat("0.0##E0"));
   public DefaultFormatterFactory scienceDecimalFormat =   new DefaultFormatterFactory(nf);


   public static final String EXAMPLE_MODEL         =  "/interfacebeans/EnterAsciiExampleFortanFile";
   public static final String EXAMPLE_PARAMS        =  "/interfacebeans/EnterAsciiExampleParamsFile";
   private ParameterPrior currentPrior                       =   null;
   private String code                              =  " ";

   StyleContext context                             = new StyleContext();
   StyledDocument     document                      = new DefaultStyledDocument(context);
   Style style = context.getStyle(StyleContext.DEFAULT_STYLE);


   public boolean disableGUIupdate                  =   false;
   public boolean disableModelupdate                =   false;


   {
        StyleConstants.setAlignment(style, StyleConstants.ALIGN_LEFT);

   }

   public static JEditModel getInstance() {
      if(instance == null) {
         instance = new  JEditModel(new JFrame(), true);
      }
      return instance;
   }

   static public void     reset(){
         if (instance == null) {return;}
         instance.models.clear();

         PropertyChangeListener[]  lis =   instance.getPropertyChangeListeners();
         for (PropertyChangeListener listener : lis) {
             instance.removePropertyChangeListener(listener);
         }
         instance.removeAll();
         instance = null;
    }


    /** Creates new form JEditModel */
    private JEditModel(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        //setTitle("CREATE/ EDIT ENTER ASCII MODEL");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSplitPane1 = new javax.swing.JSplitPane();
        modelSpecificationPane = new javax.swing.JPanel();
        modelNameLabel = new javax.swing.JLabel();
        modelNameTextField = new javax.swing.JTextField();
        CompileModelButton = new javax.swing.JButton();
        saveAndLoafModelButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        nModelVectorLabel = new javax.swing.JLabel();
        nModelVectorsLabel = new javax.swing.JLabel();
        derrivedEditButton = new javax.swing.JButton();
        PriorLabel = new javax.swing.JLabel();
        nDataColumnLabel = new javax.swing.JLabel();
        priorEditButton = new javax.swing.JButton();
        nAbscissaLabel = new javax.swing.JLabel();
        derivedLabel = new javax.swing.JLabel();
        nAbscissaSpinner = new javax.swing.JSpinner();
        nDataColumnSpinner = new javax.swing.JSpinner();
        saveAndLoafModelButton = new javax.swing.JButton();
        ModelTabbedPane = new javax.swing.JTabbedPane();
        codeScrollPane = new javax.swing.JScrollPane();
        codeTextPane = new interfacebeans.AntiAliasedTextPane(document);
        paramsPane = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        paramsTextPane = new interfacebeans.AntiAliasedTextPane(document);
        ParameterPane = new javax.swing.JPanel();
        priorTypeLabel = new javax.swing.JLabel();
        orderTypeLabel = new javax.swing.JLabel();
        parameterTypeLabel = new javax.swing.JLabel();
        PriorTypeComboBox = new JComboBox(PRIOR_TYPE.values());
        orderComboBox = new JComboBox(ORDER_TYPE.values());
        parameterTypeComboBox = new JComboBox( (Vector< PARAMETER_TYPE>) PARAMETER_TYPE . getEnterAsciiTypes());
        priorTypeEditableCheckBox = new JRadioButton();
        orderEditableCheckBox = new JRadioButton();
        lowField = new JFormattedTextField(scienceDecimalFormat);
        lowLabel = new javax.swing.JLabel();
        meanLabel = new javax.swing.JLabel();
        meanField = new JFormattedTextField(scienceDecimalFormat);
        sdevField = new JFormattedTextField(scienceDecimalFormat);
        sdevLabel = new javax.swing.JLabel();
        highField = new JFormattedTextField(scienceDecimalFormat);
        ;
        highLabel = new javax.swing.JLabel();
        PriorEditableCheckBox = new javax.swing.JLabel();
        orderEditCheckBox = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        parameterNameTextField = new JFormattedTextField(scienceDecimalFormat);
        priorEditArrowButton = new BasicArrowButton(BasicArrowButton.SOUTH);
        compileScrollPane = new javax.swing.JScrollPane();
        compileTextPane = new interfacebeans.AntiAliasedTextPane(document);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("CREATE/EDIT ENTER ASCII MODEL"); // NOI18N
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setModal(true);
        setName("ModelEditor"); // NOI18N

        jSplitPane1.setName("jSplitPane1"); // NOI18N
        jSplitPane1.setOneTouchExpandable(true);

        modelSpecificationPane.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Model Specifications"));
        modelSpecificationPane.setName("modelSpecificationPane"); // NOI18N

        modelNameLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        modelNameLabel.setText("CREATE/EDIT MODEL");
        modelNameLabel.setName("modelNameLabel"); // NOI18N

        modelNameTextField.setFont(new java.awt.Font("Lucida Grande", 0, 14));
        modelNameTextField.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nModel name.<br>\n\n</font></p><html>\n"); // NOI18N
        modelNameTextField.setInputVerifier(new FileNameInputVerifier());
        modelNameTextField.setName("modelNameTextField"); // NOI18N
        modelNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelNameTextFieldActionPerformed(evt);
            }
        });
        modelNameTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                modelNameTextFieldFocusLost(evt);
            }
        });

        CompileModelButton.setFont(new java.awt.Font("Lucida Grande 13 12", 1, 13));
        CompileModelButton.setForeground(new java.awt.Color(0, 0, 153));
        CompileModelButton.setText("COMPILE ON SERVER");
        CompileModelButton.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nCliking this button will submit model<br> \ncode to the currently selected server.<br>\nServer software will attempt to compile<br> \nthe model. The compilation results will <br>\nbe displayed\n\n\n\n\n</font></p><html>"); // NOI18N
        CompileModelButton.setName("CompileModelButton"); // NOI18N
        CompileModelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompileModelButtonActionPerformed(evt);
            }
        });

        saveAndLoafModelButton1.setFont(new java.awt.Font("Lucida Grande 13 12", 1, 13));
        saveAndLoafModelButton1.setForeground(new java.awt.Color(0, 0, 153));
        saveAndLoafModelButton1.setText("CANCEL AND EXIT");
        saveAndLoafModelButton1.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\n<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nExit Model Editor. <br>\nModel will not be saved.<br>\n\n\n\n\n</font></p><html>\n\n\n</font></p><html>"); // NOI18N
        saveAndLoafModelButton1.setName("saveAndLoafModelButton1"); // NOI18N
        saveAndLoafModelButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAndLoafModelButton1ActionPerformed(evt);
            }
        });

        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setLayout(new java.awt.GridBagLayout());

        nModelVectorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nModelVectorLabel.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nNumber of  model vectors. This number<br>\nis determined  by number of parameters<br>\nwith paramater type set to \"AMPLITUDE\".<br>\n\n\n</font></p><html>"); // NOI18N
        nModelVectorLabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        nModelVectorLabel.setName("nModelVectorLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 4.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 3, 1, 0);
        jPanel2.add(nModelVectorLabel, gridBagConstraints);

        nModelVectorsLabel.setText("# Model Vectors");
        nModelVectorsLabel.setName("nModelVectorsLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        jPanel2.add(nModelVectorsLabel, gridBagConstraints);

        derrivedEditButton.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nNumber of derived parameters.<br>\n<br>\nIf you want to add a new derived parameter,<br>\nor delete specific derived parameter,<br>\nor delete all derived parameters,<br>\nclick this button.<br>\n\n</font></p><html>"); // NOI18N
        derrivedEditButton.setName("derrivedEditButton"); // NOI18N
        derrivedEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                derrivedEditButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        jPanel2.add(derrivedEditButton, gridBagConstraints);

        PriorLabel.setText("# Priors");
        PriorLabel.setName("PriorLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        jPanel2.add(PriorLabel, gridBagConstraints);

        nDataColumnLabel.setText("# Data Columns");
        nDataColumnLabel.setName("nDataColumnLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        jPanel2.add(nDataColumnLabel, gridBagConstraints);

        priorEditButton.setFont(new java.awt.Font("Lucida Grande", 0, 13)); // NOI18N
        priorEditButton.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nNumber of  priors.<br>\n<br>\nIf you want to add a new parameter,<br>\nor delete specific parameter,<br>\nor delete all parameters,<br>\nclick this button.<br>\n\n\n</font></p><html>"); // NOI18N
        priorEditButton.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        priorEditButton.setIconTextGap(8);
        priorEditButton.setName("priorEditButton"); // NOI18N
        priorEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priorEditButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        jPanel2.add(priorEditButton, gridBagConstraints);

        nAbscissaLabel.setText("# Abscissa");
        nAbscissaLabel.setName("nAbscissaLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        jPanel2.add(nAbscissaLabel, gridBagConstraints);

        derivedLabel.setText("# Derived");
        derivedLabel.setName("derivedLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        jPanel2.add(derivedLabel, gridBagConstraints);

        nAbscissaSpinner.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nSet number of abscissa.<br>\n\n</font></p><html>\n"); // NOI18N
        nAbscissaSpinner.setName("nAbscissaSpinner"); // NOI18N
        nAbscissaSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                nAbscissaSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 20.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 3, 1, 0);
        jPanel2.add(nAbscissaSpinner, gridBagConstraints);

        nDataColumnSpinner.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nSet number of  data columns.<br>\n\n</font></p><html>"); // NOI18N
        nDataColumnSpinner.setName("nDataColumnSpinner"); // NOI18N
        nDataColumnSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                nDataColumnSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 4.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 3, 1, 0);
        jPanel2.add(nDataColumnSpinner, gridBagConstraints);

        saveAndLoafModelButton.setFont(new java.awt.Font("Lucida Grande 13 12", 1, 13));
        saveAndLoafModelButton.setForeground(new java.awt.Color(0, 0, 153));
        saveAndLoafModelButton.setText("SAVE AND LOAD");
        saveAndLoafModelButton.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nSave the model to the local USER<br>\ndepository, exit Model Editor and <br>\nload the model.<br>\n\n\n\n</font></p><html>"); // NOI18N
        saveAndLoafModelButton.setName("saveAndLoafModelButton"); // NOI18N
        saveAndLoafModelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAndLoafModelButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout modelSpecificationPaneLayout = new org.jdesktop.layout.GroupLayout(modelSpecificationPane);
        modelSpecificationPane.setLayout(modelSpecificationPaneLayout);
        modelSpecificationPaneLayout.setHorizontalGroup(
            modelSpecificationPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(modelSpecificationPaneLayout.createSequentialGroup()
                .addContainerGap()
                .add(modelSpecificationPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(modelSpecificationPaneLayout.createSequentialGroup()
                        .add(modelSpecificationPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(saveAndLoafModelButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                            .add(CompileModelButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(saveAndLoafModelButton1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE))
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(modelSpecificationPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2, 0, 0, Short.MAX_VALUE)
                        .add(modelNameLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 153, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, modelNameTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE))))
        );

        modelSpecificationPaneLayout.linkSize(new java.awt.Component[] {CompileModelButton, saveAndLoafModelButton, saveAndLoafModelButton1}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        modelSpecificationPaneLayout.setVerticalGroup(
            modelSpecificationPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(modelSpecificationPaneLayout.createSequentialGroup()
                .add(modelNameLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(4, 4, 4)
                .add(modelNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 148, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(CompileModelButton)
                .add(18, 18, 18)
                .add(saveAndLoafModelButton1)
                .add(18, 18, 18)
                .add(saveAndLoafModelButton)
                .addContainerGap(403, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(modelSpecificationPane);

        ModelTabbedPane.setAutoscrolls(true);
        ModelTabbedPane.setName("ModelTabbedPane"); // NOI18N

        codeScrollPane.setName("codeScrollPane"); // NOI18N

        codeTextPane.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), java.awt.Color.darkGray, null, null));
        codeTextPane.setFont(new java.awt.Font("Monospaced", 0, 18));
        codeTextPane.setName("codeTextPane"); // NOI18N
        codeScrollPane.setViewportView(codeTextPane);

        ModelTabbedPane.addTab("Code", codeScrollPane);

        paramsPane.setName("paramsPane"); // NOI18N
        paramsPane.setLayout(new java.awt.BorderLayout());

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        paramsTextPane.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        paramsTextPane.setEditable(false);
        paramsTextPane.setFont(new java.awt.Font("Monospaced", 1, 18));
        paramsTextPane.setName("paramsTextPane"); // NOI18N
        paramsTextPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                paramsTextPaneMousePressed(evt);
            }
        });
        jScrollPane3.setViewportView(paramsTextPane);

        paramsPane.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        ParameterPane.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.lightGray, null, null), "Model Parameter"));
        ParameterPane.setName("ParameterPane"); // NOI18N

        priorTypeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        priorTypeLabel.setText("Prior Type");
        priorTypeLabel.setName("priorTypeLabel"); // NOI18N

        orderTypeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        orderTypeLabel.setText("Order");
        orderTypeLabel.setName("orderTypeLabel"); // NOI18N

        parameterTypeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        parameterTypeLabel.setText("Parameter Type");
        parameterTypeLabel.setName("parameterTypeLabel"); // NOI18N

        PriorTypeComboBox.setDoubleBuffered(true);
        PriorTypeComboBox.setName("PriorTypeComboBox"); // NOI18N
        PriorTypeComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                PriorTypeComboBoxItemStateChanged(evt);
            }
        });

        orderComboBox.setDoubleBuffered(true);
        orderComboBox.setName("orderComboBox"); // NOI18N
        orderComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                orderComboBoxItemStateChanged(evt);
            }
        });

        parameterTypeComboBox.setDoubleBuffered(true);
        parameterTypeComboBox.setName("parameterTypeComboBox"); // NOI18N
        parameterTypeComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                parameterTypeComboBoxItemStateChanged(evt);
            }
        });

        priorTypeEditableCheckBox.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rb.gif"))); // NOI18N
        priorTypeEditableCheckBox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rb.gif"))); // NOI18N
        priorTypeEditableCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        priorTypeEditableCheckBox.setName("priorTypeEditableCheckBox"); // NOI18N
        priorTypeEditableCheckBox.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbp.gif"))); // NOI18N
        priorTypeEditableCheckBox.setRolloverEnabled(true);
        priorTypeEditableCheckBox.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbr.gif"))); // NOI18N
        priorTypeEditableCheckBox.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbrs.gif"))); // NOI18N
        priorTypeEditableCheckBox.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbs.gif"))); // NOI18N
        priorTypeEditableCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                priorTypeEditableCheckBoxItemStateChanged(evt);
            }
        });

        orderEditableCheckBox.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rb.gif"))); // NOI18N
        orderEditableCheckBox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rb.gif"))); // NOI18N
        orderEditableCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        orderEditableCheckBox.setName("orderEditableCheckBox"); // NOI18N
        orderEditableCheckBox.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbp.gif"))); // NOI18N
        orderEditableCheckBox.setRolloverEnabled(true);
        orderEditableCheckBox.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbr.gif"))); // NOI18N
        orderEditableCheckBox.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbrs.gif"))); // NOI18N
        orderEditableCheckBox.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbs.gif"))); // NOI18N
        orderEditableCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                orderEditableCheckBoxItemStateChanged(evt);
            }
        });

        lowField.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, null, java.awt.Color.gray, null, null));
        lowField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        lowField.setName("lowField"); // NOI18N
        lowField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                lowFieldtextFieldChanged(evt);
            }
        });

        lowLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lowLabel.setText("LOW ");
        lowLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lowLabel.setName("lowLabel"); // NOI18N

        meanLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        meanLabel.setText("MEAN");
        meanLabel.setName("meanLabel"); // NOI18N

        meanField.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, null, java.awt.Color.gray, null, null));
        meanField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        meanField.setName("meanField"); // NOI18N
        meanField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                meanFieldtextFieldChanged(evt);
            }
        });

        sdevField.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, null, java.awt.Color.gray, null, null));
        sdevField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        sdevField.setName("sdevField"); // NOI18N
        sdevField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                sdevFieldtextFieldChanged(evt);
            }
        });

        sdevLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sdevLabel.setText("SDEV");
        sdevLabel.setName("sdevLabel"); // NOI18N

        highField.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, null, java.awt.Color.gray, null, null));
        highField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        highField.setName("highField"); // NOI18N
        highField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                highFieldtextFieldChanged(evt);
            }
        });

        highLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        highLabel.setText("HIGH");
        highLabel.setName("highLabel"); // NOI18N

        PriorEditableCheckBox.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        PriorEditableCheckBox.setText("Edit");
        PriorEditableCheckBox.setName("PriorEditableCheckBox"); // NOI18N

        orderEditCheckBox.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        orderEditCheckBox.setText("Edit");
        orderEditCheckBox.setName("orderEditCheckBox"); // NOI18N

        nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nameLabel.setText("NAME");
        nameLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        nameLabel.setName("nameLabel"); // NOI18N

        parameterNameTextField.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, null, java.awt.Color.gray, null, null));
        parameterNameTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        parameterNameTextField.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
        parameterNameTextField.setFont(new java.awt.Font("Lucida Grande 13 12", 1, 12));
        parameterNameTextField.setName("parameterNameTextField"); // NOI18N
        parameterNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                parameterNameTextFieldKeyReleased(evt);
            }
        });

        priorEditArrowButton.setName("priorEditArrowButton"); // NOI18N
        priorEditArrowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priorEditArrowButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout ParameterPaneLayout = new org.jdesktop.layout.GroupLayout(ParameterPane);
        ParameterPane.setLayout(ParameterPaneLayout);
        ParameterPaneLayout.setHorizontalGroup(
            ParameterPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(ParameterPaneLayout.createSequentialGroup()
                .addContainerGap()
                .add(ParameterPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(nameLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(parameterNameTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE))
                .add(0, 0, 0)
                .add(priorEditArrowButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(ParameterPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lowLabel)
                    .add(lowField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 58, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ParameterPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(meanLabel)
                    .add(meanField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(10, 10, 10)
                .add(ParameterPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(highLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                    .add(highField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ParameterPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(sdevLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 47, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(sdevField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ParameterPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(priorTypeLabel)
                    .add(PriorTypeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 126, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ParameterPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(PriorEditableCheckBox)
                    .add(priorTypeEditableCheckBox))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(ParameterPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(orderTypeLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 58, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(orderComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 105, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ParameterPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(orderEditCheckBox)
                    .add(orderEditableCheckBox))
                .add(18, 18, 18)
                .add(ParameterPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(parameterTypeLabel)
                    .add(parameterTypeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 126, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ParameterPaneLayout.linkSize(new java.awt.Component[] {highField, highLabel, lowField, lowLabel, meanField, meanLabel, sdevField, sdevLabel}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        ParameterPaneLayout.linkSize(new java.awt.Component[] {PriorTypeComboBox, priorTypeLabel}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        ParameterPaneLayout.linkSize(new java.awt.Component[] {orderComboBox, orderTypeLabel}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        ParameterPaneLayout.setVerticalGroup(
            ParameterPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(ParameterPaneLayout.createSequentialGroup()
                .add(ParameterPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(ParameterPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(priorTypeLabel)
                        .add(PriorEditableCheckBox))
                    .add(ParameterPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(orderTypeLabel)
                        .add(orderEditCheckBox))
                    .add(parameterTypeLabel)
                    .add(ParameterPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(highLabel)
                        .add(meanLabel)
                        .add(lowLabel)
                        .add(nameLabel))
                    .add(sdevLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ParameterPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(ParameterPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(parameterNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(priorEditArrowButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(priorTypeEditableCheckBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(orderEditableCheckBox)
                    .add(meanField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(highField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(sdevField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lowField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(PriorTypeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(orderComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(parameterTypeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        ParameterPaneLayout.linkSize(new java.awt.Component[] {PriorTypeComboBox, highField, lowField, meanField, orderComboBox, orderEditableCheckBox, parameterNameTextField, parameterTypeComboBox, priorEditArrowButton, priorTypeEditableCheckBox, sdevField}, org.jdesktop.layout.GroupLayout.VERTICAL);

        ParameterPaneLayout.linkSize(new java.awt.Component[] {PriorEditableCheckBox, highLabel, lowLabel, meanLabel, nameLabel, orderEditCheckBox, orderTypeLabel, parameterTypeLabel, priorTypeLabel, sdevLabel}, org.jdesktop.layout.GroupLayout.VERTICAL);

        paramsPane.add(ParameterPane, java.awt.BorderLayout.PAGE_START);

        ModelTabbedPane.addTab("Parameters", paramsPane);

        compileScrollPane.setName("compileScrollPane"); // NOI18N

        compileTextPane.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), java.awt.Color.darkGray, null, null));
        compileTextPane.setEditable(false);
        compileTextPane.setFont(new java.awt.Font("Monospaced", 0, 18));
        compileTextPane.setName("compileTextPane"); // NOI18N
        compileScrollPane.setViewportView(compileTextPane);

        ModelTabbedPane.addTab("Compile Result", compileScrollPane);

        jSplitPane1.setRightComponent(ModelTabbedPane);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void modelNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modelNameTextFieldActionPerformed
        updateModelName();
}//GEN-LAST:event_modelNameTextFieldActionPerformed
    private void modelNameTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_modelNameTextFieldFocusLost
        updateModelName();
}//GEN-LAST:event_modelNameTextFieldFocusLost
    private void saveAndLoafModelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAndLoafModelButtonActionPerformed
        saveAndLoadModel();
       
}//GEN-LAST:event_saveAndLoafModelButtonActionPerformed
    private void CompileModelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompileModelButtonActionPerformed
        this.buildModel();
}//GEN-LAST:event_CompileModelButtonActionPerformed
    private void saveAndLoafModelButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAndLoafModelButton1ActionPerformed
        close();
}//GEN-LAST:event_saveAndLoafModelButton1ActionPerformed
    private void paramsTextPaneMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paramsTextPaneMousePressed
        int loc             =   paramsTextPane.viewToModel(evt.getPoint());
        String text         =   paramsTextPane.getText();


        ParameterPrior p   =   getParameterByName(getParameterFromString(text, loc),  getModel());
        if (p == null) {return;}
        setCurrentPrior(p);
    }//GEN-LAST:event_paramsTextPaneMousePressed
    private void PriorTypeComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_PriorTypeComboBoxItemStateChanged
        updateModelFromGUI();
}//GEN-LAST:event_PriorTypeComboBoxItemStateChanged
    private void orderComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_orderComboBoxItemStateChanged
        updateModelFromGUI();
}//GEN-LAST:event_orderComboBoxItemStateChanged
    private void parameterTypeComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_parameterTypeComboBoxItemStateChanged
        updateModelFromGUI();

        /* if parameter type changed to Amplitude,
         * number of vector will be increased by one.
         * Consequently, number of model vectors GUI Should be updated as well;
         */
        setGUINumberOfModelVectors( getModel().getNumberOfModelVectors());
}//GEN-LAST:event_parameterTypeComboBoxItemStateChanged
    private void priorTypeEditableCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_priorTypeEditableCheckBoxItemStateChanged
        updateModelFromGUI();
        updateGUIParamsText();
}//GEN-LAST:event_priorTypeEditableCheckBoxItemStateChanged
    private void orderEditableCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_orderEditableCheckBoxItemStateChanged
        updateModelFromGUI();
}//GEN-LAST:event_orderEditableCheckBoxItemStateChanged
    private void lowFieldtextFieldChanged(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_lowFieldtextFieldChanged
        if( evt.getPropertyName().equals("value")){
            updateModelFromGUI();
        }
}//GEN-LAST:event_lowFieldtextFieldChanged
    private void meanFieldtextFieldChanged(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_meanFieldtextFieldChanged
        if( evt.getPropertyName().equals("value")){
            updateModelFromGUI();
        }
}//GEN-LAST:event_meanFieldtextFieldChanged
    private void sdevFieldtextFieldChanged(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_sdevFieldtextFieldChanged
        if( evt.getPropertyName().equals("value")){
            updateModelFromGUI();
        }
    }//GEN-LAST:event_sdevFieldtextFieldChanged
    private void highFieldtextFieldChanged(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_highFieldtextFieldChanged
        if( evt.getPropertyName().equals("value")){
            updateModelFromGUI();
        }
}//GEN-LAST:event_highFieldtextFieldChanged
    private void parameterNameTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_parameterNameTextFieldKeyReleased
        ParameterPrior prior =  this.getCurrentPrior();
        if (prior == null){return;}

        String proposedName     = getGUIPriorName();
        String currentName      = prior.name;
        boolean  isValidname    = isValidParameterNameWithNoWarnings(proposedName);

        if ( isValidname ){
            updateModelFromGUI();
        } else{
            parameterNameTextField.setText(currentName);
        }
}//GEN-LAST:event_parameterNameTextFieldKeyReleased
    private void priorEditArrowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priorEditArrowButtonActionPerformed
        JPopupMenu popup    = generatePriorEditPoopup();
        JComponent comp     =   ( JComponent)evt.getSource();
        popup.show( comp,  comp.getX()/8, 5);
}//GEN-LAST:event_priorEditArrowButtonActionPerformed

private void nDataColumnSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_nDataColumnSpinnerStateChanged
        updateModelFromGUI();
}//GEN-LAST:event_nDataColumnSpinnerStateChanged

private void nAbscissaSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_nAbscissaSpinnerStateChanged
        updateModelFromGUI();
}//GEN-LAST:event_nAbscissaSpinnerStateChanged

private void priorEditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priorEditButtonActionPerformed
        JPopupMenu popup    =    generateAddRemovePriorEditPoopup();
        JComponent comp     =   ( JComponent)evt.getSource();
        popup.show( comp,  comp.getX()/8, 5);
}//GEN-LAST:event_priorEditButtonActionPerformed

private void derrivedEditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_derrivedEditButtonActionPerformed
        JPopupMenu popup    =    generateDerivedEditPoopup();
        JComponent comp     =   ( JComponent)evt.getSource();
        popup.show( comp,  comp.getX()/8, 5);
}//GEN-LAST:event_derrivedEditButtonActionPerformed

    public String getParameterFromString(String text, int loc){
        if (text == null || loc < 1){return null;}
        String delim            =   "\n";

        int s1                  =   loc;
        int search              =   loc;
        while (search > 1){
            search    -=1;
            String ch = text.substring(search, search+1);
            if (ch.equals(delim )){s1 = search; break; }
        }

        int s2                  =   text.indexOf(delim , loc);
        if (s2< s1){return null;}

        String line             =   text.substring(s1+1, s2);
        String []array          =   line.split("\\s+");
        if (array  == null || array.length < 6){return null;}

        return array[0];
    }
    public ParameterPrior getParameterByName(String name, EnterAsciiModel amodel){
        if (name == null)    {return null;}
        if (amodel == null)  { return null;}
        for (ParameterPrior p :amodel.getPriors()) {
            if (p.name.equalsIgnoreCase(name)){
                return p;
            }

        }
        return null;

    }

    public  void close(){
        this.setVisible(false);
        this.dispose();
 
    }
    public boolean    save(){
        EnterAsciiModel amodel      =  getModel();
        if (amodel  == null) { return false;}
        String error               =    null;


        File dir                    = DirectoryManager.getUserModelDir();
        if (dir.exists() == false){ dir.mkdirs();}




        List<ParameterPrior> priors =   amodel .getPriors();
         // test orders for priors
         error = IsPriorReadyToRun.testPriorOrders(priors);
         if (error != null){DisplayText.popupErrorMessage(error); return false; }

         // test numeric assignments for priors
         ParameterPrior p      = IsPriorReadyToRun.testBounds(priors);
         if (p  != null){
                error           =   p.message;
                p.message       =   null;
                showPriorsPanel();
                setCurrentPrior(currentPrior);
                DisplayText.popupErrorMessage(error);

               return false;
         }


        String mName                =   getGUIModelName();
        String aCode                =   getGUICode();
        amodel.setCode(aCode);
        boolean success             =   EnterAsciiModel.writeModelFiles(mName, dir, amodel);

        return success;

    }
    public void     saveAndLoadModel(){
        EnterAsciiModel amodel      =  getModel();
        if (amodel  == null) { return;}


        boolean isSaved             =   save();
        if (isSaved == false){  return;}

        JShowModels.getInstance().loadUserModel( amodel.getModelFile());


        close();
        return;

    }
    public void     buildModel(){
        setGUICompileResult("");
        EnterAsciiModel model       =   getModel();
        if (model == null){
             String error = String.format("No model is selected");
             DisplayText.popupErrorMessage(error);
             return;
        }
        if( model.isLoaded() == false){
             String error = String.format("No valid model is selected");
             DisplayText.popupErrorMessage(error);
             return;
        }
        String mName                =   getGUIModelName();
        String aCode                =   getGUICode();
        model.setName(mName);
        model.setCode(aCode);

        RunCompile runcompile = new  RunCompile(model);
        runcompile .submitCompileFortran();
        if (runcompile.isCanceled() == true){return;}

        String modelname = model.getName();
        boolean isBuild             =  EnterAsciiModel.updateModelBuilt(model);
        String message              =   "";
        
        if (!isBuild  )         {
             message    = String.format("Model %s is not built.", modelname);
             setGUICompileResult(message);
             showCompilePane();
        
        }
        else{
            message    = String.format("Model %s is built.", modelname);
            String filename                    =   model .getFortranListName();
            File dir                           =   DirectoryManager.getModelCompileDir();
            File file                          =   new File(dir, filename);
            if (file.exists()) {
                String content = IO.readFileToString(file) ;
                if (content != null){
                    message  = message + "\n\n"+ content;
                }

            }

           setGUICompileResult(message);
           showCompilePane();
        }

       



}

    public void     updateModelFromGUI(){
       if (this.disableModelupdate == true){return;}
        System.out.println( "updateModelFromGUI");
       EnterAsciiModel amodel               =  getModel() ;
       if ( amodel   == null){return;}
       try{
           disableGUIupdate    = true;

        ParameterPrior parameter            =   this.getCurrentPrior();
        if (parameter!=null){
            parameter.name                  =   this.getGUIPriorName();
            parameter.high                  =   this.getGUIPriorHigh();
            parameter.mean                  =   this.getGUIPriorMean();
            parameter.low                   =   this.getGUIPriorLow();
            parameter.sdev                  =   this.getGUIPriorSdev();
            parameter.setParameterType      (   this.getGUIParameterType());
            parameter.priorType             =   this.getGUIPriorType();
            parameter.order                 =   this.getGUIOrderType();
            parameter.isOrderEditable       =   this.isGUIPriorOrderEditable();
            parameter.isPriorTypeEditable   =   this.isGUIPriorTypeEditable();
        }
            amodel.setCode                 (    getGUICode()     );
            amodel.setNumberOfAbscissa     (    getGUINumberOfAbscissa());
            amodel.setNumberOfDataCols     (    getGUINumberOfDataColumns());
            amodel.syncModel();
            updateGUIParamsText();
       }


       finally{
         disableGUIupdate    = false;
       }
    }
    public void     updateGUIFromModel(){
      if (this.disableGUIupdate == true){return;}

      EnterAsciiModel model         =    getModel();
       if (model  == null){return;}
       try{
          disableModelupdate =true;
           System.out.println("Updating GUI for model "+model.getName());

        setGUINumberOfAbscissa      (   model.getNumberOfAbscissa());
        setGUINumberOfDataColumns   (   model.getNumberOfDataCols());
        setGUINumberOfPriors        (   model.getNumberOfPriors());
        setGUINumberOfDerived       (   model.getNumberOfDerived());
        setGUINumberOfModelVectors  (   model.getNumberOfModelVectors());
        setGUIModelName             (   model.getName());
        setGUICode                  (   model.getCode());
        setGUIParamsText            (   model.writeParamsContent().toString());


       }
       finally {
         disableModelupdate = false;
       }
    }
    private void    updateGUIFromParameter( ParameterPrior p){
       if (p == null) {return;}
       if (this.disableGUIupdate == true){return;}

       try{
          disableModelupdate =true;

          this.setGUIParameterName(p.name);
          this.setGUIPriorHigh(p.high);
          this.setGUIPriorMean(p.mean);
          this.setGUIPriorLow(p.low);
          this.setGUIPriorSdev(p.sdev);
          this.setGUIPriorType(p.priorType);
          this.setGUIParameterType(p.getParameterType());
          this.setGUIOrderType(p.order);
          this.setGUIPriorTypeEditable(p.isPriorTypeEditable);
          this.setGUIPriorOrderEditable(p.isOrderEditable);
          this.getParameterNameTextField().setText(p.name);
       }
       finally {
         disableModelupdate = false;

       }
    }
    private void    updateGUIParamsText(){
        EnterAsciiModel amodel  =    getModel();
        if ( amodel  != null){
            setGUIParamsText( amodel.writeParamsContent().toString());
        }
    }
    public void     updateModelName(){
       String newName           =   getGUIModelName();
       EnterAsciiModel amodel   =    getModel();
       if (amodel!= null){ amodel.setName(newName); }

    }
    public void     updateNoModelSet(){
       if (this.disableGUIupdate == true){return;}

       disableModelupdate =true;
       try{

       setGUIModelName             ( "");
       setGUICode                  ( "");
       setGUIParamsText            ( "");
       setGUINumberOfAbscissa      ( 0);
       setGUINumberOfDataColumns   ( 0);
       setGUINumberOfPriors        ( 0);
       setGUINumberOfDerived       ( 0);
       setGUINumberOfModelVectors  ( 0);
       this.setGUIParameterName    ("");
       this.setGUIPriorHigh        (0);
       this.setGUIPriorMean        (0);
       this.setGUIPriorLow        (0);
       this.setGUIPriorSdev        (0);
       //this.setGUIPriorType     (  p.priorType);
       //this.setGUIParameterType(p.getParameterType());
      // this.setGUIOrderType(p.order);
      // this.setGUIPriorTypeEditable(p.isPriorTypeEditable);
      // this.setGUIPriorOrderEditable(p.isOrderEditable);
      // this.getParameterNameTextField().setText(p.name);

       }
       finally { disableModelupdate = false; }

    }


    public void addParameter(){
        String title                =   "Add Model Parameter";
        String message              =   "Enter parameter name";
        String name                 =    DisplayText.popupUserInput(this,message ,title );
        boolean isValid             =   isValidParameterName(name);
        if (isValid == false){ return;}

        ParameterPrior p            =   new  ParameterPrior();
        p.name                      =   name;
        p.priorType                 =   PRIOR_TYPE.GAUSSIAN;
        p.order                     =   ORDER_TYPE.NotOrdered;
        p.setParameterType(PARAMETER_TYPE.NonLinear);



       getModel().addParameter(p);
       updateGUIFromModel();

    }


     public void removeCurrentParameter(){
        ParameterPrior prior =  this.getCurrentPrior();
        if (prior == null){return;}
        getModel().removeParameter(prior);
        updateGUIFromModel();
    }

    public void removeParameter(ParameterPrior parameter){
       if ( parameter == null){return;}
       getModel().removeParameter(parameter);
       updateGUIFromModel();

    }
    public void removeAllParameters(){
       getModel().removeAllParameters();
       updateGUIFromModel();

    }
    public boolean isValidParameterName(String name){
        if (name == null || name.length() ==0){
            String message  =   String.format( "Type parameter name first.");
            //DisplayText.popupErrorMessage(message);
            return false;}

        if (Pattern.matches(".*\\s+.*", name)) {
            String message  =   String.format(  "Single word, please. No spaces are allowed.");
            DisplayText.popupErrorMessage(message);
            return false;
        }

        if ( getModel().getParameterNames().contains(name)) {
           String message  =   String.format(   "Parameter %s,  already exists.\n" +
                                                "Please use different name.", name);
           DisplayText.popupErrorMessage(message);
            return false;
        }

        return true;
    }
    public boolean isValidParameterNameWithNoWarnings(String name){
        if (name == null || name.length() ==0){
            return false;
        }
        return Pattern.matches("\\w+", name);

    }

    public void addDerived(){
        String title                =   "Add Derived Parameter";
        String message              =   "Enter parameter name";
        //Component c                 =    addDerivedButton;
        String name                 =    DisplayText.popupUserInput( this,message ,title );
        boolean isValid             =   isValidParameterName(name);
        if (isValid == false){ return;}


       getModel().addDerived(name);
       updateGUIFromModel();

    }
    public void removeDerived(String derived){
       if ( derived == null){return;}
       getModel().removeDerived(derived);
       updateGUIFromModel();

    }
    public void removeAllDerived(){
       getModel().removeAllDerived();
       updateGUIFromModel();

    }



    public  void showCodePanel(){
        Component c         =   getCodeScrollPane();
        getModelTabbedPane().setSelectedComponent( c);
    }
    public  void showPriorsPanel(){
        Component c         =  getParamsPane();
        getModelTabbedPane().setSelectedComponent( c);
    }
     public void showCompilePane(){
         Component c         =   getCompileScrollPane();
        getModelTabbedPane().setSelectedComponent( c );
    }

    public static void display(   EnterAsciiModel amodel, int x, int y){


         JEditModel inst =  JEditModel.getInstance();
         inst.  setAndUpdateFromModel(amodel);
         inst. setDefaultCloseOperation (JDialog.DISPOSE_ON_CLOSE);
        // inst.setLocation(x, y);
         inst.setVisible(true);

    }
    public static void display( EnterAsciiModel amodel){
        Point p = MouseInfo.getPointerInfo().getLocation();
        display (amodel, p.x, p.y);

    }
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               JEditModel.display(null);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CompileModelButton;
    private javax.swing.JTabbedPane ModelTabbedPane;
    private javax.swing.JPanel ParameterPane;
    private javax.swing.JLabel PriorEditableCheckBox;
    private javax.swing.JLabel PriorLabel;
    private javax.swing.JComboBox PriorTypeComboBox;
    private javax.swing.JScrollPane codeScrollPane;
    private javax.swing.JTextPane codeTextPane;
    private javax.swing.JScrollPane compileScrollPane;
    private javax.swing.JTextPane compileTextPane;
    private javax.swing.JLabel derivedLabel;
    private javax.swing.JButton derrivedEditButton;
    private javax.swing.JFormattedTextField highField;
    private javax.swing.JLabel highLabel;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JFormattedTextField lowField;
    private javax.swing.JLabel lowLabel;
    private javax.swing.JFormattedTextField meanField;
    private javax.swing.JLabel meanLabel;
    private javax.swing.JLabel modelNameLabel;
    private javax.swing.JTextField modelNameTextField;
    private javax.swing.JPanel modelSpecificationPane;
    private javax.swing.JLabel nAbscissaLabel;
    private javax.swing.JSpinner nAbscissaSpinner;
    private javax.swing.JLabel nDataColumnLabel;
    private javax.swing.JSpinner nDataColumnSpinner;
    private javax.swing.JLabel nModelVectorLabel;
    private javax.swing.JLabel nModelVectorsLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JComboBox orderComboBox;
    private javax.swing.JLabel orderEditCheckBox;
    private javax.swing.JRadioButton orderEditableCheckBox;
    private javax.swing.JLabel orderTypeLabel;
    private javax.swing.JFormattedTextField parameterNameTextField;
    private javax.swing.JComboBox parameterTypeComboBox;
    private javax.swing.JLabel parameterTypeLabel;
    private javax.swing.JPanel paramsPane;
    private javax.swing.JTextPane paramsTextPane;
    private javax.swing.JButton priorEditArrowButton;
    private javax.swing.JButton priorEditButton;
    private javax.swing.JRadioButton priorTypeEditableCheckBox;
    private javax.swing.JLabel priorTypeLabel;
    private javax.swing.JButton saveAndLoafModelButton;
    private javax.swing.JButton saveAndLoafModelButton1;
    private javax.swing.JFormattedTextField sdevField;
    private javax.swing.JLabel sdevLabel;
    // End of variables declaration//GEN-END:variables
    public javax.swing.JTextPane getCodePane() {
        return codeTextPane;
    }
    public javax.swing.JPanel getModelSpecificationPanel() {
        return modelSpecificationPane;
    }
    public javax.swing.JTabbedPane getModelTabbedPane() {
        return ModelTabbedPane;
    }
    public javax.swing.JScrollPane getCodeScrollPane() {
        return codeScrollPane;
    }
    public javax.swing.JScrollPane getCompileScrollPane() {
        return compileScrollPane;
    }
    public javax.swing.JPanel getParamsPane() {
        return paramsPane;
    }

    public javax.swing.JTextField getModelNameTextField() {
        return modelNameTextField;
    }
    public javax.swing.JTextPane getParamsTextPane() {
        return paramsTextPane;
    }
    public javax.swing.JTextPane getCodeTextPane() {
        return codeTextPane;
    }
    public javax.swing.JLabel getnAbscissaLabel() {
        return nAbscissaLabel;
    }
    public javax.swing.JLabel getnDataColumnLabel() {
        return nDataColumnLabel;
    }
    public javax.swing.JLabel getnModelVectorsLabel() {
        return nModelVectorLabel;
    }
    public javax.swing.JLabel getnPriorLabel() {
        return PriorLabel;
    }
    public javax.swing.JSpinner getnAbscissaSpinner() {
        return nAbscissaSpinner;
    }
    public javax.swing.JSpinner getnDataColumnSpinner() {
        return nDataColumnSpinner;
    }
    public javax.swing.JLabel getHighLabel() {
        return highLabel;
    }
    public javax.swing.JLabel getMeanLabel() {
        return meanLabel;
    }
    public javax.swing.JLabel getSdevLabel() {
        return sdevLabel;
    }
    public javax.swing.JLabel getLowLabel() {
        return lowLabel;
    }
    public javax.swing.JFormattedTextField getMeanField() {
        return meanField;
    }
    public javax.swing.JFormattedTextField getSdevField() {
        return sdevField;
    }
    public javax.swing.JFormattedTextField getHighField() {
        return highField;
    }
    public javax.swing.JFormattedTextField getLowField() {
        return lowField;
    }
    public javax.swing.JFormattedTextField getParameterNameTextField() {
        return parameterNameTextField;
    }
    public javax.swing.JComboBox    getPriorTypeComboBox() {
        return PriorTypeComboBox;
    }
    public javax.swing.JComboBox    getOrderComboBox() {
        return orderComboBox;
    }
    public javax.swing.JComboBox    getParameterTypeComboBox() {
        return parameterTypeComboBox;
    }
    public javax.swing.JRadioButton getOrderEditableCheckBox() {
        return orderEditableCheckBox;
    }
    public javax.swing.JRadioButton getPriorTypeEditableCheckBox() {
        return priorTypeEditableCheckBox;
    }
    public javax.swing.JTextPane    getCompileResultPane() {
        return this.compileTextPane;
    }

    public int getGUINumberOfAbscissa(){
        if (getnAbscissaSpinner() == null){return 1;}
        Number number = (Number)getnAbscissaSpinner().getValue();
        return number.intValue();
    }
    public int getGUINumberOfDataColumns(){
        if (getnDataColumnSpinner() == null){return 1;}
        Number number = (Number)getnDataColumnSpinner().getValue();
        return number.intValue();
    }


    public String getGUIModelName(){
        return getModelNameTextField().getText();
    }
    public String getGUIPriorName(){
        return  getParameterNameTextField().getText();
    }
    public double getGUIPriorMean(){
        if (  getMeanField() == null){return 0;}
        Number number = (Number)  getMeanField().getValue();
        return number.doubleValue();
    }
    public double getGUIPriorLow(){
        if (  getLowField() == null){return 0;}
        Number number = (Number)  getLowField().getValue();
        return number.doubleValue();
    }
    public double getGUIPriorHigh(){
        if (  getHighField() == null){return 0;}
        Number number = (Number)  getHighField().getValue();
        return number.doubleValue();
    }
    public double getGUIPriorSdev(){
        if (  getSdevField() == null){return 0;}
        Number number = (Number)  getSdevField().getValue();
        return number.doubleValue();
    }
    public PRIOR_TYPE getGUIPriorType(){
        if ( getPriorTypeComboBox() == null){return PRIOR_TYPE.GAUSSIAN;}
        PRIOR_TYPE  priorType = (PRIOR_TYPE )getPriorTypeComboBox().getSelectedItem();
        return  priorType;
    }
    public PARAMETER_TYPE getGUIParameterType(){
        if ( getParameterTypeComboBox() == null){return PARAMETER_TYPE.NonLinear;}
        PARAMETER_TYPE  priorType = (PARAMETER_TYPE )getParameterTypeComboBox().getSelectedItem();
        return  priorType;
    }
    public ORDER_TYPE getGUIOrderType(){
        if (getOrderComboBox() == null){return ORDER_TYPE.NotOrdered;}
        ORDER_TYPE  priorType = (ORDER_TYPE )getOrderComboBox().getSelectedItem();
        return  priorType;
    }
    public boolean isGUIPriorTypeEditable(){
        if (getPriorTypeEditableCheckBox() == null){return true;}
        return   getPriorTypeEditableCheckBox().isSelected();
    }
    public boolean isGUIPriorOrderEditable(){
        if (getOrderEditableCheckBox()  == null){return true;}
        return   getOrderEditableCheckBox() .isSelected();
    }
    public String getGUICode(){
        String content = getCodeTextPane().getText();
        return content;
    }

    public void setGUINumberOfAbscissa(int val){
        if (getnAbscissaSpinner() == null){return ;}
        getnAbscissaSpinner().setValue(val);
    }
    public void setGUINumberOfDataColumns(int val){
        if (getnDataColumnSpinner() == null){return ;}
        getnDataColumnSpinner().setValue(val);
    }
    public void setGUINumberOfPriors(int val){
        if ( this.priorEditButton == null){return ;}
            priorEditButton.setText(""+val);
    }
    public void setGUINumberOfDerived(int val){
        if ( this.derrivedEditButton == null){return;}
       derrivedEditButton.setText(""+val);
    }
    public void setGUINumberOfModelVectors(int val){
        nModelVectorLabel.setText(""+val);
    }
    public void setGUIPriorMean(double val){
        if ( getMeanField() == null){return ;}
         getMeanField().setValue(val);
    }
    public void setGUIPriorLow(double val){
        if ( getMeanField() == null){return ;}
         getLowField().setValue(val);
    }
    public void setGUIPriorHigh(double val){
        if ( getHighField() == null){return ;}
         getHighField().setValue(val);
    }
    public void setGUIPriorSdev(double val){
        if ( getSdevField() == null){return ;}
         getSdevField().setValue(val);
    }
    public void setGUIPriorType(PRIOR_TYPE type){
        if ( getPriorTypeComboBox() == null){return;}
        getPriorTypeComboBox().setSelectedItem(type);
    }
    public void setGUIOrderType(ORDER_TYPE type){
        if (  getOrderComboBox() == null){return;}
       getOrderComboBox().setSelectedItem(type);
    }
    public void setGUIParameterType(PARAMETER_TYPE type){
        if ( getParameterTypeComboBox() == null){return;}
      getParameterTypeComboBox().setSelectedItem(type);
    }
    public void setGUIPriorTypeEditable(boolean editable){
        if (getPriorTypeEditableCheckBox() == null){return ;}
        getPriorTypeEditableCheckBox().setSelected(editable);
    }
    public void setGUIPriorOrderEditable(boolean editable){
        if (getOrderEditableCheckBox()  == null){return ;}
         getOrderEditableCheckBox().setSelected(editable);
    }
    public void setGUIModelName(String name){
        getModelNameTextField().setText(name);
    }
    public void setGUIParameterName(String name){
         if ( this.getParameterNameTextField() != null){
             this.getParameterNameTextField().setText(name);
        };
    }
    public void setGUICode(String acode){
       this.getCodeTextPane().setText(acode);
       this.getCodeTextPane().setCaretPosition(0);
    }
    public void setGUIParamsText(String paramsText){
        getParamsTextPane().setText(paramsText);
    }
    public void setGUICompileResult(String txt){
       this.getCompileResultPane().setText(txt);
       this.getCompileResultPane().setCaretPosition(0);
    }

  


    public String               getCode() {
        return code;
    }
    public void                 setCode(String codeBody) {
        this.code = codeBody;
    }

    public ParameterPrior       getCurrentPrior() {
        return currentPrior;
    }
    public void                 setCurrentPrior(ParameterPrior aPrior) {
        if (getModel().getPriors().contains( aPrior)){
            currentPrior = aPrior;
            updateGUIFromParameter(currentPrior);
        }




    }

    public void                 setAndUpdateFromModel(EnterAsciiModel amodel ){

        if (amodel == null){
            amodel  = getExampeModel();
        }

        setEditModel(amodel );
        setGUICompileResult("");
        showCodePanel();
        updateGUIFromModel();



    }


    public EnterAsciiModel      getModel() {
        return editModel;
    }
    public void                 setEditModel(EnterAsciiModel editModel) {
        this.editModel = editModel;
    }



    public EnterAsciiModel getExampeModel(){
          InputStream is                =  getClass().getResourceAsStream(EXAMPLE_MODEL);
          String acode                  =  IO.readInputStreamToString(is);
          InputStream ps                =   getClass().getResourceAsStream(EXAMPLE_PARAMS );
          String params                 =   IO.readInputStreamToString(ps);
          EnterAsciiModel examplemodel  =   new  EnterAsciiModel(acode, params);

          return   examplemodel;

    }

    private  JPopupMenu generatePriorEditPoopup(){
        JPopupMenu popup        = new JPopupMenu();

        popup.add(new AddPriorMenuItem ());
        popup.add(new  RemoveCurrentPriorMenuItem ());
        popup.add( new JSeparator ());

        List<ParameterPrior>  list       =  getModel().getPriors();
        for (ParameterPrior p : list ) {
            ChangePriorMenuItem  menuItem   = new  ChangePriorMenuItem  (p );
            popup.add( menuItem );
        }

        return  popup;

    }
    private  JPopupMenu generateAddRemovePriorEditPoopup(){
        JPopupMenu popup        = new JPopupMenu();

        popup.add(new   AddPriorMenuItem());
        popup.add(new   RemoveAllPriorssMenuItem());
        popup.add( generateRemovePriorEditMenu());


        return  popup;

    }
    private  JPopupMenu generateDerivedEditPoopup(){
        JPopupMenu popup        = new JPopupMenu();

        popup.add(new  AddDerrivedMenuItem());
        popup.add(new  RemoveAllDerivedMenuItem ());
        popup.add(generateRemoveDerivedEditMenu());


        return  popup;

    }
    private  JMenu generateRemoveDerivedEditMenu(){
        JMenu menu      = new JMenu("Remove Derived");

        List<String>  der       =  getModel().getDerivedList();
        for (String d : der ) {
            RemoveDerivedMenuItem menuItem   = new  RemoveDerivedMenuItem(d);
             menu.add( menuItem );
        }

        return  menu;

    }
    private  JMenu generateRemovePriorEditMenu(){
        JMenu menu      = new JMenu("Remove Parameter");

        List<ParameterPrior>  priors       =  getModel().getPriors();
        for (ParameterPrior p : priors ) {
            RemovePriorMenuItem menuItem   = new   RemovePriorMenuItem(p);
             menu.add( menuItem );
        }

        return  menu;

    }






    class  PriorsCellRenderer extends JLabel implements ListCellRenderer {
    private final Color HIGHLIGHT_COLOR             = new Color(0, 0, 128);
    private final Color BG_COLOR                    = new Color(255, 255, 255);
    private static final long serialVersionUID      = 7526472295622376147L;

    public PriorsCellRenderer(){
    setOpaque(true);
    Font font   = new Font("Dialog", 1,16);
    this.setFont(font);
   //setIconTextGap(12);
  }
    public Component getListCellRendererComponent(JList list, Object value,
        int index, boolean isSelected, boolean cellHasFocus) {
        ParameterPrior entry = ( ParameterPrior) value;
        setText(entry.name);

    if (isSelected) {
      setBackground(HIGHLIGHT_COLOR);
      setForeground(Color.white);
    } else {
      setBackground(BG_COLOR );
      setForeground(Color.black);
    }
    return this;
  }
    }

    class  RemoveDerivedMenuItem extends JMenuItem{
        private String derived;
         RemoveDerivedMenuItem (String  aderived){
            super(aderived);
            derived = aderived;

             addActionListener (new ActionListener (){
             public void actionPerformed (ActionEvent e) {
                      RemoveDerivedMenuItem source = (  RemoveDerivedMenuItem)e.getSource();
                     removeDerived(source.getDerived());
                }
            });

        }

        public String getDerived() {
            return derived;
        }
        public void setDerived(String derived) {
            this.derived = derived;
        }

   }
    class  RemoveAllDerivedMenuItem extends JMenuItem{
         RemoveAllDerivedMenuItem  (){
            super("Remove All Derived");

             addActionListener (new ActionListener (){
             public void actionPerformed (ActionEvent e) {
                     removeAllDerived();
                }
            });

        }


   }
    class  AddDerrivedMenuItem extends JMenuItem{
            AddDerrivedMenuItem(){
              super("Add Derived");
             addActionListener (new ActionListener (){
             public void actionPerformed (ActionEvent e) {
                 addDerived();
                }
            });

        }

   }


    class  RemovePriorMenuItem extends JMenuItem{
        private ParameterPrior prior;
        RemovePriorMenuItem(ParameterPrior aprior){
            super(aprior.name);
            prior = aprior;

             addActionListener (new ActionListener (){
             public void actionPerformed (ActionEvent e) {
                     RemovePriorMenuItem source = ( RemovePriorMenuItem)e.getSource();
                     removeParameter(source.getPrior());
                }
            });

        }

        public ParameterPrior getPrior() {
            return prior;
        }

        public void setPrior(ParameterPrior prior) {
            this.prior = prior;
        }


   }
    class  ChangePriorMenuItem extends JMenuItem{
       private ParameterPrior prior;
       ChangePriorMenuItem(ParameterPrior aprior){
            super(aprior.name);
            prior = aprior;

             addActionListener (new ActionListener (){
             public void actionPerformed (ActionEvent e) {
                     ChangePriorMenuItem source = ( ChangePriorMenuItem)e.getSource();
                     setCurrentPrior(source.getPrior());
                }
            });

        }

        public ParameterPrior getPrior() {
            return prior;
        }

        public void setPrior(ParameterPrior prior) {
            this.prior = prior;
        }


   }
    class  AddPriorMenuItem extends JMenuItem{
           AddPriorMenuItem(){
              super("Add New Parameter");
             addActionListener (new ActionListener (){
             public void actionPerformed (ActionEvent e) {
                 addParameter();
                }
            });

        }

   }
    class  RemoveCurrentPriorMenuItem extends JMenuItem{
        RemoveCurrentPriorMenuItem(){
            super("Remove Parameter");
             addActionListener (new ActionListener (){
             public void actionPerformed (ActionEvent e) {
                     removeCurrentParameter();
                }
            });

        }




   }
    class  RemoveAllPriorssMenuItem extends JMenuItem{
           RemoveAllPriorssMenuItem  (){
            super("Remove All");

             addActionListener (new ActionListener (){
             public void actionPerformed (ActionEvent e) {
                     removeAllParameters();
                }
            });

        }


   }
}
