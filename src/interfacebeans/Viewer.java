/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Viewer.java
 *
 * Created on Aug 26, 2009, 10:32:55 AM
 */

package interfacebeans;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.event.*;
import java.io.File;
import java.util.Date;
import java.util.Scanner;
import javax.swing.*;
import javax.swing.text.*;
import utilities.ClipboardManager;
import utilities.IO;
/**
 *
 * @author apple
 */
public class Viewer extends javax.swing.JPanel {
    public static  int  X_POS_INIT                         =  50;
    public static  int  Y_POS_INIT                         =  50;
    public static  int  X_POS                              =  X_POS_INIT ;
    public static  int  Y_POS                              =  Y_POS_INIT;
    public static  int minWidth                            = 500;
    public static  int minHeight                           = 400;
    public static int fontSize                             =   20;
    private Font font                                      =    new Font("Monospaced", Font.BOLD ,  fontSize);
    private static final long serialVersionUID             =   7526472295622576147L;
    StyledDocument document;
    JFrame frame;


       {
        StyleContext context    = new StyleContext();
        document                = new DefaultStyledDocument(context);

        Style style = context.getStyle(StyleContext.DEFAULT_STYLE);
        StyleConstants.setAlignment(style, StyleConstants.ALIGN_LEFT);


    }

    /** Creates new form Viewer */
    public Viewer() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane = new javax.swing.JScrollPane();
        textPane =  new interfacebeans.AntiAliasedTextPane(document);
        toolPane = new javax.swing.JPanel();
        copyToClipboardButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        printButton = new javax.swing.JButton();

        FormListener formListener = new FormListener();

        setName("Form"); // NOI18N

        jScrollPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jScrollPane.setName("jScrollPane"); // NOI18N

        //javax.swing.JTextPan
        textPane.setFont(font);
        textPane.setMargin(new java.awt.Insets(20, 20, 10, 10));
        textPane.setName("textPane"); // NOI18N
        textPane.addMouseListener(formListener);
        jScrollPane.setViewportView(textPane);

        toolPane.setName("toolPane"); // NOI18N

        copyToClipboardButton.setBackground(new java.awt.Color(204, 204, 204));
        copyToClipboardButton.setFont(new java.awt.Font("Lucida Grande", 0, 14));
        copyToClipboardButton.setText("Copy ");
        copyToClipboardButton.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\n\nCopy text to clipboard.\n\n\n</font></p><html>\n\n\n"); // NOI18N
        copyToClipboardButton.setName("copyToClipboardButton"); // NOI18N
        copyToClipboardButton.addActionListener(formListener);

        saveButton.setBackground(new java.awt.Color(204, 204, 204));
        saveButton.setFont(new java.awt.Font("Lucida Grande", 0, 14));
        saveButton.setText("Save ");
        saveButton.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nSave text as an ascii file.\n\n</font></p><html>\n\n\n"); // NOI18N
        saveButton.setName("saveButton"); // NOI18N
        saveButton.addActionListener(formListener);

        closeButton.setBackground(new java.awt.Color(204, 204, 204));
        closeButton.setFont(new java.awt.Font("Lucida Grande", 0, 14));
        closeButton.setText("Close");
        closeButton.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nClose this window.\n\n</font></p><html>\n\n\n\n"); // NOI18N
        closeButton.setName("closeButton"); // NOI18N
        closeButton.addActionListener(formListener);

        printButton.setBackground(new java.awt.Color(204, 204, 204));
        printButton.setFont(new java.awt.Font("Lucida Grande", 0, 14));
        printButton.setText("Print");
        printButton.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\n\nPrint.\n\n\n</font></p><html>\n\n\n"); // NOI18N
        printButton.setName("printButton"); // NOI18N
        printButton.addActionListener(formListener);

        org.jdesktop.layout.GroupLayout toolPaneLayout = new org.jdesktop.layout.GroupLayout(toolPane);
        toolPane.setLayout(toolPaneLayout);
        toolPaneLayout.setHorizontalGroup(
            toolPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, toolPaneLayout.createSequentialGroup()
                .addContainerGap(109, Short.MAX_VALUE)
                .add(printButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(copyToClipboardButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(saveButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(closeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 74, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        toolPaneLayout.linkSize(new java.awt.Component[] {closeButton, copyToClipboardButton, saveButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        toolPaneLayout.setVerticalGroup(
            toolPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(toolPaneLayout.createSequentialGroup()
                .addContainerGap()
                .add(toolPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(closeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(saveButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(toolPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(copyToClipboardButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(printButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        toolPaneLayout.linkSize(new java.awt.Component[] {closeButton, saveButton}, org.jdesktop.layout.GroupLayout.VERTICAL);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(toolPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(toolPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.MouseListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == copyToClipboardButton) {
                Viewer.this.copyToClipboardButtonActionPerformed(evt);
            }
            else if (evt.getSource() == saveButton) {
                Viewer.this.saveButtonActionPerformed(evt);
            }
            else if (evt.getSource() == closeButton) {
                Viewer.this.closeButtonActionPerformed(evt);
            }
            else if (evt.getSource() == printButton) {
                Viewer.this.printButtonActionPerformed(evt);
            }
        }

        public void mouseClicked(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == textPane) {
                Viewer.this.textPaneMouseClicked(evt);
            }
        }

        public void mouseEntered(java.awt.event.MouseEvent evt) {
        }

        public void mouseExited(java.awt.event.MouseEvent evt) {
        }

        public void mousePressed(java.awt.event.MouseEvent evt) {
        }

        public void mouseReleased(java.awt.event.MouseEvent evt) {
        }
    }// </editor-fold>//GEN-END:initComponents

    private void textPaneMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textPaneMousePressed
        if(!SwingUtilities.isRightMouseButton(evt) )  { return;}
            makePopupMenu().show(evt.getComponent(), evt.getX(), evt.getY());
    }//GEN-LAST:event_textPaneMousePressed
    private void textPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textPaneMouseClicked

}//GEN-LAST:event_textPaneMouseClicked
    private void copyToClipboardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyToClipboardButtonActionPerformed
       copy();

    }//GEN-LAST:event_copyToClipboardButtonActionPerformed
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        JFileChooser fc  = new JFileChooser();
        fc.setFileSelectionMode(javax.swing.JFileChooser.FILES_ONLY);
        fc.setMultiSelectionEnabled(false);


         int returnVal = fc.showSaveDialog(fc);

         if (returnVal == JFileChooser.APPROVE_OPTION) {
            File   file     =   fc.getSelectedFile ();
            IO.writeFileFromString(getText(), file);
        } else {
            return;
        }

    }//GEN-LAST:event_saveButtonActionPerformed
    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed

        close ();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
         Desktop desktop    = Desktop.getDesktop();
         Date date          =   new Date();
         String name        =   "tmpPrintFile"+date.getTime();
         File tmp           =   new File(name);
         tmp.deleteOnExit();
         try{
            boolean done       =   IO.writeFileFromString(getText(), tmp);
            if (done){
                desktop.print(tmp);

                
            }

          }
          catch (Exception e){e.printStackTrace();}
         finally{
            if(tmp!= null || tmp.exists()){
                //tmp.delete();

            }
         }

    }//GEN-LAST:event_printButtonActionPerformed

    public JPopupMenu makePopupMenu(){


        JPopupMenu popup            =    new JPopupMenu();

        JMenuItem copyMenuItem     =     new JMenuItem("Copy All");
        copyMenuItem.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) {
                 copy();
            }
        });
        popup.add(  copyMenuItem);


        JMenuItem saveMenuItem     =     new JMenuItem("Save");
        saveMenuItem.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) {
                 save();
            }
        });
        popup.add( saveMenuItem);



        JMenuItem printMenuItem     =     new JMenuItem("Print");
        printMenuItem.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) {
                print ();
            }
        });
        popup.add( printMenuItem);


        return popup;
    }

    public void close (){
         if( frame != null){ frame.dispose();}
    }
    public void copy(){
          ClipboardManager.putIntoClipboard(getText());
    }
    public void save (){
        JFileChooser fc  = new JFileChooser();
        fc.setFileSelectionMode(javax.swing.JFileChooser.FILES_ONLY);
        fc.setMultiSelectionEnabled(true);


         int returnVal = fc.showSaveDialog(fc);

         if (returnVal == JFileChooser.APPROVE_OPTION) {
            File   file     =   fc.getSelectedFile ();
            IO.writeFileFromString(getText(), file);
        } else {
            return;
        }
    }
    public void print (){
        try{
             getTextPane().print();
        }
        catch(Exception e){e.printStackTrace();}
       
    }


    public String getText(){
        if ( getTextPane() == null) {return "";}
        return getTextPane().getText();
    }
    private void setText(String text, int caretPosition){
        if (text == null) {text = "";}
        getTextPane().setText(text);
        getTextPane().setCaretPosition(caretPosition);

    }
    public void setText(String txt){
         setText( txt, 0);
    }

   public   Dimension  getTextSize(String txt) {
       Dimension dim     = new Dimension (minWidth, minHeight);
       try{
           Scanner scanner   = new Scanner(txt);
           String longLine   = "";
           int nRow          = 0;

           while (scanner.hasNext()){
                String line = scanner.nextLine();

                nRow +=1;
                if (line.length()  > longLine.length()){
                    longLine = line;
                }
           }

           scanner.close();


          FontMetrics fm         = getFontMetrics(font);
          int txtWidth           = fm.stringWidth(longLine);
          int txtHeight          = nRow * fm.getHeight();
          dim.setSize(txtWidth, txtHeight);
      }finally {
          return dim;
      }
  }
   public   Dimension  getTextSizeWithMargins(String txt) {
       Dimension dim     =  getTextSize(txt);
       try{
         Insets margins  =   textPane.getMargin();
         Insets insets  =  textPane.getInsets();
         dim.width      =   dim.width + margins.left + margins.right + insets.left + insets .right;
         dim.height     =   dim.height + margins.bottom + margins.top + insets.top + insets.bottom;
      }finally {
          return dim;
      }
  }

   public static Viewer display(String txt) {
        return  display(txt, "View Text");
  }
   public static Viewer display(String txt, String title) {
        return display(txt, title, false);
  }
   public static Viewer display(String txt, String title, boolean editable) {

    final Viewer pane = new Viewer();
    pane.setText(txt);
    pane.getTextPane ().setEditable(editable);
  // DefaultStyledDocument doc       =  (DefaultStyledDocument)  pane.getTextPane ().getDocument();
   // int firstLineOffste     =  StyleConstants.getFontSize(null)
  //  Style style             =   doc.getStyle("default");
 //   AttributeSet as          =   style.copyAttributes();
 //   float indent               =   StyleConstants.getFirstLineIndent(as);
    
     Dimension screenSize   = Toolkit.getDefaultToolkit().getScreenSize();
     Dimension textSize     = pane. getTextSizeWithMargins(txt);
     Dimension toolSize     = pane.toolPane.getPreferredSize();
     Dimension prefsize     =   pane.getTextPane ().getPreferredSize();
     int maxWidth           = screenSize.width  - X_POS;
     int maxHeight          = screenSize.height - Y_POS;
     int txtWidth           = textSize.width;
     int txtHeight          = textSize.height;
     int width              = Math.min(txtWidth, maxWidth );
     int height             = Math.min(txtHeight, maxHeight);
     width                  = Math.max(width, minWidth ) + 40;
     height                 = Math.max(height,minHeight) + toolSize.height +50;

    
     width                  = Math.min( maxWidth   - 30, width  );
     height                 = Math.min( maxHeight -  30, height  );

    // pane.setPreferredSize(new Dimension (width, height));


     
     pane.frame    = new JFrame(title);
     
      

    pane.frame.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        pane.frame.dispose();
                    }
                });

    pane.frame.add(pane, java.awt.BorderLayout.CENTER);
    pane.frame.setLocation(X_POS, Y_POS);

   
    pane.frame.pack();
    pane.frame.setVisible(true);
    pane.frame.setSize(width, height);

    return pane;
  }


  public void bringForward(){
    this.frame.toFront();
  }

   public static void main(String argv[]) {
         java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                display(" as"  );
                         
                       
                        

      

            }
        });



       
  }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JButton copyToClipboardButton;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JButton printButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextPane textPane;
    private javax.swing.JPanel toolPane;
    // End of variables declaration//GEN-END:variables
    public javax.swing.JTextPane getTextPane () {
        return textPane;
    }
}
