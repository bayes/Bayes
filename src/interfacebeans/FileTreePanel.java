/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FileTreePanel.java
 *
 * Created on Oct 25, 2010, 4:17:24 PM
 */

package interfacebeans;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Rectangle;
import java.io.File;
import java.io.FileFilter;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import javax.swing.Icon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTree;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileSystemView;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import utilities.IO;

/**
 *
 * @author apple
 */
public class FileTreePanel extends javax.swing.JPanel implements Viewable {
       /**
	 * File system view.
	 */
    protected static FileSystemView fsv     = FileSystemView.getFileSystemView();
    private File root                       =  new File(  System.getProperty("user.home"));
    private List<File> highlightFiles       =  new ArrayList<File>();
    private int displayFileSizeLimitKB      =  64;
    private Integer [] displaySizes         = new Integer [] {8,16,32,64,128, 256, 512};
    private boolean scrollNewTextUp = true;

  


    private static FileTreePanel instance   = null;

    public  static FileTreePanel  getInstance(){
        if (instance == null){
             instance  = new FileTreePanel() ;
        }

        return instance;
    }

    /** Creates new form FileTreePanel */
    public FileTreePanel() {
        initComponents();
        updateFiles() ;
    }
    public FileTreePanel(File aroot) {
        root  = aroot;
        initComponents();
        updateFiles() ;
    }
 public Component getMainDisplay(){return this;}
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSplitPane1 = new javax.swing.JSplitPane();
        fileTreePane = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();
        treePaneTools = new javax.swing.JPanel();
        refreshButton = new javax.swing.JButton();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        fileContentTa = new javax.swing.JTextArea();
        fileInfoPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        fileNameTF = new javax.swing.JFormattedTextField();
        jLabel3 = new javax.swing.JLabel();
        fileSizeTF = new javax.swing.JFormattedTextField();
        fileLastModifiedTF = new javax.swing.JFormattedTextField();
        displayFileSizeComboBox = new javax.swing.JComboBox(displaySizes );
        jLabel4 = new javax.swing.JLabel();
        scrollUpCb = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setName("jSplitPane1"); // NOI18N
        jSplitPane1.setOneTouchExpandable(true);

        fileTreePane.setBackground(new java.awt.Color(255, 255, 255));
        fileTreePane.setName("fileTreePane"); // NOI18N
        fileTreePane.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "BAYES FILES", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Lucida Grande", 1, 16))); // NOI18N
        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tree.setFont(new java.awt.Font("Lucida Grande", 0, 13));
        tree.setName("tree"); // NOI18N
        tree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                treeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(tree);

        fileTreePane.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        treePaneTools.setName("treePaneTools"); // NOI18N
        treePaneTools.setLayout(new java.awt.BorderLayout());

        refreshButton.setText("Refresh");
        refreshButton.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nRescan hard disk and refresh files list<br>\nused by this applicaiton.\n\n</font></p><html>"); // NOI18N
        refreshButton.setName("refreshButton"); // NOI18N
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });
        treePaneTools.add(refreshButton, java.awt.BorderLayout.CENTER);

        fileTreePane.add(treePaneTools, java.awt.BorderLayout.PAGE_END);

        jSplitPane1.setLeftComponent(fileTreePane);

        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setName("jSplitPane2"); // NOI18N
        jSplitPane2.setOneTouchExpandable(true);

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        fileContentTa.setColumns(20);
        fileContentTa.setEditable(false);
        fileContentTa.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        fileContentTa.setRows(5);
        fileContentTa.setMargin(new java.awt.Insets(10, 10, 5, 0));
        fileContentTa.setName("fileContentTa"); // NOI18N
        jScrollPane3.setViewportView(fileContentTa);

        jSplitPane2.setRightComponent(jScrollPane3);

        fileInfoPanel.setName("fileInfoPanel"); // NOI18N
        fileInfoPanel.setLayout(new java.awt.GridBagLayout());

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("File Name");
        jLabel1.setName("jLabel1"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        fileInfoPanel.add(jLabel1, gridBagConstraints);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("File Size (bytes)");
        jLabel2.setName("jLabel2"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        fileInfoPanel.add(jLabel2, gridBagConstraints);

        fileNameTF.setEditable(false);
        fileNameTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fileNameTF.setName("fileNameTF"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        fileInfoPanel.add(fileNameTF, gridBagConstraints);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Last Modified");
        jLabel3.setName("jLabel3"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        fileInfoPanel.add(jLabel3, gridBagConstraints);

        fileSizeTF.setEditable(false);
        fileSizeTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0"))));
        fileSizeTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fileSizeTF.setName("fileSizeTF"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        fileInfoPanel.add(fileSizeTF, gridBagConstraints);

        fileLastModifiedTF.setEditable(false);
        fileLastModifiedTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("MMM d, yyyy h:mm:ss a"))));
        fileLastModifiedTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fileLastModifiedTF.setName("fileLastModifiedTF"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        fileInfoPanel.add(fileLastModifiedTF, gridBagConstraints);

        displayFileSizeComboBox.setSelectedItem(new Integer(64));
        displayFileSizeComboBox.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nMaximum size (in kilobytes) of files to display.\n\n</font></p><html>\n\n"); // NOI18N
        displayFileSizeComboBox.setName("displayFileSizeComboBox"); // NOI18N
        displayFileSizeComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                displayFileSizeComboBoxItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        fileInfoPanel.add(displayFileSizeComboBox, gridBagConstraints);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Max Size (kB)");
        jLabel4.setName("jLabel4"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        fileInfoPanel.add(jLabel4, gridBagConstraints);

        scrollUpCb.setSelected( this.isScrollNewTextUp());
        scrollUpCb.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nThis check box controls whether to scroll <br>\ndisplayed file up or down upon display.\n\n\n</p><html>\n"); // NOI18N
        scrollUpCb.setAlignmentX(0.5F);
        scrollUpCb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        scrollUpCb.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        scrollUpCb.setName("scrollUpCb"); // NOI18N
        scrollUpCb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scrollUpCbActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        fileInfoPanel.add(scrollUpCb, gridBagConstraints);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Scroll Up");
        jLabel5.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nThis check box controls whether to scroll <br>\ndisplayed file up or down upon display.\n\n\n</p><html>\n"); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        fileInfoPanel.add(jLabel5, gridBagConstraints);

        jSplitPane2.setLeftComponent(fileInfoPanel);

        jSplitPane1.setRightComponent(jSplitPane2);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void treeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_treeValueChanged
         refreshGui();
    }//GEN-LAST:event_treeValueChanged
    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        this.updateFiles();
    }//GEN-LAST:event_refreshButtonActionPerformed
    private void displayFileSizeComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_displayFileSizeComboBoxItemStateChanged
        Number number = (Number)displayFileSizeComboBox.getSelectedItem();
        displayFileSizeLimitKB  =number.intValue();

        refreshGui();
    }//GEN-LAST:event_displayFileSizeComboBoxItemStateChanged

    private void scrollUpCbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scrollUpCbActionPerformed
        boolean scrollup = scrollUpCb.isSelected();
        this.setScrollNewTextUp( scrollup);
        refreshGui();
}//GEN-LAST:event_scrollUpCbActionPerformed
    public File getSelectedFile(){
        File file               =    null;
        try{
            if (tree.isSelectionEmpty() == false){
                Object o            = tree.getLastSelectedPathComponent();
                FileTreeNode ftn    = (FileTreeNode)o;
                file                =    ftn.file;

            }

        }
        catch (Exception e){
            e.printStackTrace();
        }
        finally{
            return file;
        }


    }
    public void refreshGui(){
        resetGUItoEmpty();
       

        File file       =   this.getSelectedFile();
        if (file != null){

            boolean isFile      =   file.isFile();
            long size           =   file.length();
            long lastModified   =   file.lastModified();
            Date mod            =   new Date(lastModified  );

            fileNameTF.setText(file.getName());
            fileSizeTF.setValue(size);
            fileLastModifiedTF.setValue(mod );


             long displayFileSizeLimitBytes  =  displayFileSizeLimitKB *1024;
             if (file.isDirectory() ){
                String  message = String.format(
                           "%s is a directory",
                            file.getName());
                showText(message, Color.BLUE);
             
             }
             else if(size<displayFileSizeLimitBytes  ){

                    showContent(file);

             }
             else {
                  String  message = String.format(
                          "Only files with sizes less than %d kB are displayed",
                            displayFileSizeLimitKB );
                   showText(message, Color.RED);
             }

        }

    }
    public void resetGUItoEmpty(){
         getFileContentTextArea().setText("");
         fileNameTF.setText("");
         fileSizeTF.setText("");
         fileLastModifiedTF.setText("");
    }
    public void showContent(File file){
           getFileContentTextArea().setText("");

           if (file == null){return;}
           else if (file.exists() == false){return;}
           else if (file.isDirectory()){return;}

           String content = IO.readFileToString(file);
           showText(content);
    }
    public void showText(String text){
           showText(text, Color.BLACK);
    }
    public void showText(String text, Color foreground){
          getFileContentTextArea().setForeground(foreground); 
          getFileContentTextArea().setText(text);
          if (this.isScrollNewTextUp()){
              scrollToTop();
          }
          else {
              scrollToBottom();
          }
    }
    private void scrollToBottom(){
       Rectangle r              =   getFileContentTextArea().getBounds();
       r.y                      =   r.height - r.height/2;
       //  scroll so that the new text is visible
       getFileContentTextArea().scrollRectToVisible(r);
    }
    private void scrollToTop(){
      getFileContentTextArea().setCaretPosition(0);
    }
    
    /**
	 * Creates the file tree panel.
	 */
	public void updateFiles() {
		File[] roots                    =  new File []{root};
		FileTreeNode rootTreeNode       =   new FileTreeNode(roots);

                DefaultTreeModel model     =   ( DefaultTreeModel )tree.getModel();
		model .setRoot(null);

                // rootTreeNode.get
                model.setRoot(rootTreeNode);
                this.tree.setCellRenderer(new FileTreeCellRenderer());
		this.tree.setRootVisible(false);
                tree.expandRow(0);
	}

	public static void main(String[] args) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				JFrame frame = new JFrame("File tree");
				frame.setSize(800, 600);

				frame.setLocationRelativeTo(null);
                                File r  =   new File ("/Users/apple/Bayes/exp2");
                                FileTreePanel ftp =  FileTreePanel.getInstance();
				frame.add(ftp );
				frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
				frame.setVisible(true);
                              
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox displayFileSizeComboBox;
    private javax.swing.JTextArea fileContentTa;
    private javax.swing.JPanel fileInfoPanel;
    private javax.swing.JFormattedTextField fileLastModifiedTF;
    private javax.swing.JFormattedTextField fileNameTF;
    private javax.swing.JFormattedTextField fileSizeTF;
    private javax.swing.JPanel fileTreePane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JButton refreshButton;
    private javax.swing.JCheckBox scrollUpCb;
    private javax.swing.JTree tree;
    private javax.swing.JPanel treePaneTools;
    // End of variables declaration//GEN-END:variables
     public javax.swing.JTextArea getFileContentTextArea() {
        return fileContentTa;
    }
    public File getRoot() {
        return root;
    }
    public void setRoot(File root) {
        this.root = root;
    }

    public List<File> getHighlightFiles() {
        return highlightFiles;
    }
    public void setHighlightFiles(List<File> highlightFiles) {
        this.highlightFiles = highlightFiles;
    }
    public boolean isScrollNewTextUp() {
        return scrollNewTextUp;
    }
    public void setScrollNewTextUp(boolean scrollNewTextUp) {
        this.scrollNewTextUp = scrollNewTextUp;
    }



    	/**
	 * Renderer for the file tree.
	 *
	 * @author Kirill Grouchnikov
	 */
	private class FileTreeCellRenderer extends DefaultTreeCellRenderer {
                private Font font            =   new java.awt.Font("Lucida Grande", 0, 13);
                private Font highlightfont   =   new java.awt.Font("Lucida Grande", 1, 13);

                /**
		 * Icon cache to speed the rendering.
		 */
		private Map<String, Icon> iconCache = new HashMap<String, Icon>();

		/**
		 * Root name cache to speed the rendering.
		 */
		private Map<File, String> rootNameCache = new HashMap<File, String>();

		/*
		 * (non-Javadoc)
		 *
		 * @see javax.swing.tree.DefaultTreeCellRenderer#getTreeCellRendererComponent(javax.swing.JTree,
		 *      java.lang.Object, boolean, boolean, boolean, int, boolean)
		 */
		@Override
		public Component getTreeCellRendererComponent(JTree tree, Object value,
				boolean sel, boolean expanded, boolean leaf, int row,
				boolean hasFocus) {
			FileTreeNode ftn        = (FileTreeNode) value;
			File file               = ftn.file;
			String filename         = "";
                        String iconfilename     = "";
			if (file != null) {
				if (ftn.isFileSystemRoot) {
					filename    = this.rootNameCache.get(file);
					if (filename == null) {
						filename                = fsv.getSystemDisplayName(file);
                                                iconfilename            = file.getAbsolutePath();
						this.rootNameCache.put(file, filename);
					}
				} else {
					filename = file.getName();
                                        iconfilename            = file.getAbsolutePath();
				}
			}
			JLabel result = (JLabel) super.getTreeCellRendererComponent(tree,
					filename, sel, expanded, leaf, row, hasFocus);
			if (file != null) {
				Icon icon = this.iconCache.get(iconfilename );
				if (icon == null) {
					icon = fsv.getSystemIcon(file);
					this.iconCache.put(iconfilename , icon);
				}
				result.setIcon(icon);
			}


                        result.setForeground(Color.BLACK);
                        result.setFont(font);
                      
                        if (highlightFiles.contains(file)){
                          result.setForeground(Color.BLUE);
                          result.setFont(highlightfont);
                        }
                       
			return result;
		}
	}

	/**
	 * A node in the file tree.
	 *
	 * @author Kirill Grouchnikov
	 */
	private static class FileTreeNode implements TreeNode {
		/**
		 * Node file.
		 */
		private File file;

		/**
		 * Children of the node file.
		 */
		private File[] children;

		/**
		 * Parent node.
		 */
		private TreeNode parent;

                private FileFilter fileFilter   =  new ListFileFilter();

		/**
		 * Indication whether this node corresponds to a file system root.
		 */
		private boolean isFileSystemRoot;

		/**
		 * Creates a new file tree node.
		 *
		 * @param file
		 *            Node file
		 * @param isFileSystemRoot
		 *            Indicates whether the file is a file system root.
		 * @param parent
		 *            Parent node.
		 */
		public FileTreeNode(File file, boolean isFileSystemRoot, TreeNode parent) {
			this.file               = file;
			this.isFileSystemRoot   = isFileSystemRoot;
			this.parent             = parent;
			this.children           = this.file.listFiles( fileFilter);
			if (this.children == null){
                            this.children = new File[0];
                        }
				
		}

		/**
		 * Creates a new file tree node.
		 *
		 * @param children
		 *            Children files.
		 */
		public FileTreeNode(File[] children) {
			this.file = null;
			this.parent = null;
			this.children = children;
		}

		/*
		 * (non-Javadoc)
		 *
		 * @see javax.swing.tree.TreeNode#children()
		 */
		public Enumeration<?> children() {
			final int elementCount = this.children.length;
			return new Enumeration<File>() {
				int count = 0;

				/*
				 * (non-Javadoc)
				 *
				 * @see java.util.Enumeration#hasMoreElements()
				 */
				public boolean hasMoreElements() {
					return this.count < elementCount;
				}

				/*
				 * (non-Javadoc)
				 *
				 * @see java.util.Enumeration#nextElement()
				 */
				public File nextElement() {
					if (this.count < elementCount) {
						return FileTreeNode.this.children[this.count++];
					}
					throw new NoSuchElementException("Vector Enumeration");
				}
			};

		}

		/*
		 * (non-Javadoc)
		 *
		 * @see javax.swing.tree.TreeNode#getAllowsChildren()
		 */
		public boolean getAllowsChildren() {
			return true;
		}

		/*
		 * (non-Javadoc)
		 *
		 * @see javax.swing.tree.TreeNode#getChildAt(int)
		 */
		public TreeNode getChildAt(int childIndex) {
			return new FileTreeNode(this.children[childIndex],
					this.parent == null, this);
		}

		/*
		 * (non-Javadoc)
		 *
		 * @see javax.swing.tree.TreeNode#getChildCount()
		 */
		public int getChildCount() {
			return this.children.length;
		}

		/*
		 * (non-Javadoc)
		 *
		 * @see javax.swing.tree.TreeNode#getIndex(javax.swing.tree.TreeNode)
		 */
		public int getIndex(TreeNode node) {
			FileTreeNode ftn = (FileTreeNode) node;
			for (int i = 0; i < this.children.length; i++) {
				if (ftn.file.equals(this.children[i]))
					return i;
			}
			return -1;
		}

		/*
		 * (non-Javadoc)
		 *
		 * @see javax.swing.tree.TreeNode#getParent()
		 */
		public TreeNode getParent() {
			return this.parent;
		}

		/*
		 * (non-Javadoc)
		 *
		 * @see javax.swing.tree.TreeNode#isLeaf()
		 */
		public boolean isLeaf() {
			return (this.getChildCount() == 0);
		}
	}
        public static class ListFileFilter implements java.io.FileFilter{

        public boolean accept(File f) {
            if (f.isHidden()){return false;}
            return true;
        }

    }
}
