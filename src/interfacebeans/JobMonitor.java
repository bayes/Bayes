/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JobMonitor.java
 *
 * Created on Jan 5, 2011, 3:12:45 PM
 */

package interfacebeans;

import java.awt.Rectangle;
import java.io.File;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.SwingWorker;
import javax.swing.text.*;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;
import run.Run;
import run.Run.RUN_STATUS;
import utilities.IO;

/**
 *
 * @author apple
 */
public class JobMonitor extends javax.swing.JPanel {
    private static final long serialVersionUID      =   7526472295622576147L;
    public static double  updateTimeInSecondsDef    =   1;
    private String jobid                            =   null;
    private RUN_STATUS CURRENT_STATUS               =   RUN_STATUS.NOT_RUN;
    JobSwingWorker sw                               =   null;
    private String account                          =   null;
    private    String url                           =   null;
    private    String user                          =   null;
    private    String expName                       =   null;
    private    String analysDir                     =   null;
    private    String password                      =   null;
    private    double updateTimeInSeconds           =   updateTimeInSecondsDef ;
    private    File   statusUpdateFiles             =   null;
    private    boolean  scrollUpdateToBottom        =   false;
    private  JFrame dialog                          =   null;
    long starttime                                  =   (new Date()).getTime();

    StyledDocument document;

     {
        StyleContext context    = new StyleContext();
        document                = new DefaultStyledDocument(context);

        Style style = context.getStyle(StyleContext.DEFAULT_STYLE);
        StyleConstants.setAlignment(style, StyleConstants.ALIGN_LEFT);



    }
    /** Creates new form JobMonitor */
    public JobMonitor() {
        initComponents();
    }

     public void setText(String text, boolean scrollUp){
        if (text == null) {text = "";}
        getTextPane().setText(text);
        if (scrollUp)   {scrollToTop();         }
        else            { scrollToBottom();     }

    }
    public void setText(String text){
         setText(text,!scrollUpdateToBottom);
    }
    public void showFile(File file){
         showFile(file, true);
    }
    public void showFile(File file, boolean scrollUp){
        String text = IO.readFileToString(file);
        setText(text);
    }
    private void scrollToBottom(){
       Rectangle r              =   getTextPane().getBounds();
       r.y                      =   r.height - r.height/2;
       //  scroll so that the new text is visible
       getTextPane().scrollRectToVisible(r);
    }
    private void scrollToTop(){
       getTextPane().setCaretPosition(0);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSplitPane1 = new javax.swing.JSplitPane();
        toolPane = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jobIdTF = new javax.swing.JFormattedTextField();
        serverTF = new javax.swing.JFormattedTextField();
        jobStatusTF = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        updateIntevalSeconds = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        workDirTF = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        scrollUpdateToBottomCheckBox = new javax.swing.JCheckBox();
        exitButton = new javax.swing.JButton();
        messagePane = new javax.swing.JPanel();
        textPaneScrollPane = new javax.swing.JScrollPane();
        textPane =  new interfacebeans.AntiAliasedTextPane(document);
        iconLabel = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setName("jSplitPane1"); // NOI18N

        toolPane.setName("toolPane"); // NOI18N
        toolPane.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Status");
        jLabel1.setName("jLabel1"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        toolPane.add(jLabel1, gridBagConstraints);

        jLabel2.setText("Server");
        jLabel2.setName("jLabel2"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        toolPane.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Job Id");
        jLabel3.setName("jLabel3"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        toolPane.add(jLabel3, gridBagConstraints);

        jobIdTF.setEditable(false);
        jobIdTF.setName("jobIdTF"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        toolPane.add(jobIdTF, gridBagConstraints);

        serverTF.setEditable(false);
        serverTF.setName("serverTF"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        toolPane.add(serverTF, gridBagConstraints);

        jobStatusTF.setEditable(false);
        jobStatusTF.setName("jobStatusTF"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        toolPane.add(jobStatusTF, gridBagConstraints);

        jLabel4.setText("Update Interval (seconds)");
        jLabel4.setName("jLabel4"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        toolPane.add(jLabel4, gridBagConstraints);

        updateIntevalSeconds.setModel(new javax.swing.SpinnerNumberModel(1.0d, 0.5d, 3600.0d, 0.25d));
        updateIntevalSeconds.setName("updateIntevalSeconds"); // NOI18N
        updateIntevalSeconds.setValue(updateTimeInSecondsDef);
        updateIntevalSeconds.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                updateIntevalSecondsStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        toolPane.add(updateIntevalSeconds, gridBagConstraints);

        jLabel6.setText("WorkDir");
        jLabel6.setName("jLabel6"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 5, 0, 0);
        toolPane.add(jLabel6, gridBagConstraints);

        workDirTF.setEditable(false);
        workDirTF.setName("workDirTF"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        toolPane.add(workDirTF, gridBagConstraints);

        jLabel7.setName("jLabel7"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        toolPane.add(jLabel7, gridBagConstraints);

        scrollUpdateToBottomCheckBox.setSelected( scrollUpdateToBottom);
        scrollUpdateToBottomCheckBox.setText("Scroll To Bottom");
        scrollUpdateToBottomCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        scrollUpdateToBottomCheckBox.setName("scrollUpdateToBottomCheckBox"); // NOI18N
        scrollUpdateToBottomCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                scrollUpdateToBottomCheckBoxItemStateChanged(evt);
            }
        });
        scrollUpdateToBottomCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scrollUpdateToBottomCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        toolPane.add(scrollUpdateToBottomCheckBox, gridBagConstraints);

        exitButton.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        exitButton.setText("EXIT");
        exitButton.setName("exitButton"); // NOI18N
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        toolPane.add(exitButton, gridBagConstraints);

        jSplitPane1.setLeftComponent(toolPane);

        messagePane.setName("messagePane"); // NOI18N
        messagePane.setLayout(new java.awt.BorderLayout());

        textPaneScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.gray, java.awt.Color.darkGray), "Live Updates From Server", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Lucida Grande", 0, 14))); // NOI18N
        textPaneScrollPane.setName("textPaneScrollPane"); // NOI18N

        //javax.swing.JTextPan
        textPane.setEditable(false);
        textPane.setFont(new java.awt.Font("Monospaced", 0, 14));
        textPane.setMargin(new java.awt.Insets(20, 20, 10, 10));
        textPane.setName("textPane"); // NOI18N
        textPane.setOpaque(false);
        textPane.setPreferredSize(new java.awt.Dimension(700, 500));
        textPaneScrollPane.setViewportView(textPane);

        messagePane.add(textPaneScrollPane, java.awt.BorderLayout.CENTER);

        iconLabel.setFont(new java.awt.Font("Lucida Grande", 1, 16));
        iconLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        iconLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        iconLabel.setName("iconLabel"); // NOI18N
        iconLabel.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        messagePane.add(iconLabel, java.awt.BorderLayout.SOUTH);

        jSplitPane1.setRightComponent(messagePane);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void updateIntevalSecondsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_updateIntevalSecondsStateChanged
        Double val    = (Double)updateIntevalSeconds.getValue();
        updateTimeInSeconds  = val;
        updateTimeInSecondsDef  = updateTimeInSeconds;
    }//GEN-LAST:event_updateIntevalSecondsStateChanged
    private void scrollUpdateToBottomCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scrollUpdateToBottomCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_scrollUpdateToBottomCheckBoxActionPerformed
    private void scrollUpdateToBottomCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_scrollUpdateToBottomCheckBoxItemStateChanged
         scrollUpdateToBottom = scrollUpdateToBottomCheckBox.isSelected();
    }//GEN-LAST:event_scrollUpdateToBottomCheckBoxItemStateChanged

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        sw.cancel(true);
        dialog.setVisible(false);
        dialog.dispose();
    }//GEN-LAST:event_exitButtonActionPerformed
     public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                runInSeparateWindow();

            }
        });
    }

     public static  JobMonitor runInSeparateWindow(){
        final JobMonitor  monitor          = new JobMonitor();
        JFrame dialog                       =   new JFrame("Job Monitor");
        monitor.dialog                      =    dialog;
        dialog .setLayout(new java.awt.BorderLayout());
        dialog.getContentPane().add(monitor, java.awt.BorderLayout.CENTER);
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent e) {
               if ( monitor.sw != null){
                monitor.sw.cancel(true);
               }
            }
        });
        dialog.pack();
        dialog.setVisible(true);

        dialog.toFront();
        return monitor;
     }
     public void initialize(
                        String id,
                        String account,
                        String url,
                        String user,
                        String experimentDirectory,
                        String analysisDirectory,
                        String password,
                        File   resultFile
             ){
         this.jobid             =   id;
         this.account           =   account;
         this.url               =   url;
         this.user              =   user;
         this.expName           =   experimentDirectory;
         this.analysDir         =   analysisDirectory;
         this.password          =   password;
         this.statusUpdateFiles = resultFile;

         getStatusField ().setText(RUN_STATUS.NOT_RUN.toString());
         getServerField ().setText(url);
         getJobIdField ().setText(jobid );
          getExperimentField ().setText(experimentDirectory);
     }

     public void run(){
        sw = new  JobSwingWorker();
        sw.execute();
     }

     public void setFinaleStage(String txt, ImageIcon icon){
               messagePane.remove(textPaneScrollPane);

               iconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/icons/Success.png"))); // NOI18N
               iconLabel.setText("Job Is Completed");

               messagePane.validate();
               messagePane.repaint();
     }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel iconLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JFormattedTextField jobIdTF;
    private javax.swing.JFormattedTextField jobStatusTF;
    private javax.swing.JPanel messagePane;
    private javax.swing.JCheckBox scrollUpdateToBottomCheckBox;
    private javax.swing.JFormattedTextField serverTF;
    private javax.swing.JTextPane textPane;
    private javax.swing.JScrollPane textPaneScrollPane;
    private javax.swing.JPanel toolPane;
    private javax.swing.JSpinner updateIntevalSeconds;
    private javax.swing.JFormattedTextField workDirTF;
    // End of variables declaration//GEN-END:variables
    public javax.swing.JTextPane getTextPane () {
        return textPane;
    }
    public javax.swing.JFormattedTextField getServerField () {
        return serverTF;
    }
    public javax.swing.JFormattedTextField getJobIdField () {
        return jobIdTF;
    }
    public javax.swing.JFormattedTextField getStatusField () {
        return jobStatusTF;
    }
    public javax.swing.JFormattedTextField getExperimentField () {
        return workDirTF;
    }


    class JobSwingWorker <Void, Sring>extends SwingWorker{
       @Override
       public String doInBackground() {
           System.out.println("Strart Job Monitoring Worker");
           String out                       =    "";
           String defStatus                 =     "Unknown";
           starttime                   =     System.nanoTime();
           
           
           CURRENT_STATUS                   =     RUN_STATUS.NOT_RUN;

           try{
              

               while (  CURRENT_STATUS == RUN_STATUS.ACTIVE
                       ||
                       CURRENT_STATUS == RUN_STATUS.SUBMITTED
                       ||
                       CURRENT_STATUS == RUN_STATUS.NOT_RUN
                       ){


                        List<String> resultsToPublish    =   new ArrayList<String>();
                        int updateTimeInMS            = (int)(updateTimeInSeconds *1000);
                        Thread.sleep(updateTimeInMS);


                       // get job status
                        String status =   Run.getJobStatusOnServer (
                        jobid, defStatus,account,url, user,expName, password);
                        resultsToPublish.add(0, defStatus );
                        CURRENT_STATUS              =   RUN_STATUS.getStatus(status);


                        // get outputs
                        Run.getStatusFileFromServer (jobid, account, url, user, expName, analysDir, password,  statusUpdateFiles  );

                        String report               =   "";
                        if ( statusUpdateFiles .exists() ){
                            report                  = IO.readFileToString( statusUpdateFiles );
                        }

                        publish(report);


                   
                        

               }



              

                 
           }
           catch(Exception e){
               e.printStackTrace();

           }
           finally{

                publish(out);
           }
           return out;
       }
       
       @Override
       protected void done() {
           try {
               String txt           =   "Job Is Completed";
               ImageIcon icon       =   new ImageIcon(getClass().getResource("/bayes/resources/icons/Success.png"));
               
               if ( CURRENT_STATUS  !=  RUN_STATUS.RUN){
                    icon            =   new ImageIcon(getClass().getResource("/bayes/resources/icons/Error.png"));
                    txt             =  "Job Status:"+ CURRENT_STATUS.getName();
               }
               setFinaleStage(txt, icon);
               dialog.toFront();
           } catch (Exception ignore) {
           }
       }

        @Override
       protected void process(List out) {
            String status       =   CURRENT_STATUS.toString();
            String rep         =   "";
            if (out.isEmpty() == false){
                rep             =   out.get(0).toString();
                setText(rep);
                getStatusField ().setText(status);
            }
      }
        
        public void getUptime(){
            long currentttime                   =     System.nanoTime();
            double totalTimeInSec               =      (currentttime - starttime)*(1e-9);

        }
    }
}
