/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JImageFileChooserAccessory.java
 *
 * Created on Feb 10, 2009, 2:01:53 PM
 */

package interfacebeans;

/**
 *
 * @author apple
 */
public class JImageFileChooserAccessory extends javax.swing.JPanel {

    private boolean isPhaseEncodeSetByUser              =   false;
    private boolean isredOutLengthSetByUser             =   false;
    private int     phaseEncodeLengthSetByUser          =   -1;
    private int     redouLengthSetByUser                =   -1;
    private boolean phaseImages                         =   true;
    public final static String defaultValue             =   "default";

    /** Creates new form JImageFileChooserAccessory */
    public JImageFileChooserAccessory() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        RedOutLabel = new javax.swing.JLabel();
        phaseEncodeNumCb = new javax.swing.JComboBox();
        redoutdeNumCb = new javax.swing.JComboBox();
        REadOutLabel = new javax.swing.JLabel();
        phaseImagesCB = new javax.swing.JCheckBox();

        FormListener formListener = new FormListener();

        RedOutLabel.setText("Readout ");
        RedOutLabel.setName("RedOutLabel"); // NOI18N

        phaseEncodeNumCb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { defaultValue, "64", "128", "256", "512", "1024" }));
        phaseEncodeNumCb.setName("phaseEncodeNumCb"); // NOI18N
        phaseEncodeNumCb.addActionListener(formListener);

        redoutdeNumCb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { defaultValue, "64", "128", "256", "512", "1024" }));
        redoutdeNumCb.setName("redoutdeNumCb"); // NOI18N
        redoutdeNumCb.addActionListener(formListener);

        REadOutLabel.setText("Phase Encode ");
        REadOutLabel.setName("REadOutLabel"); // NOI18N

        phaseImagesCB.setSelected(this.isPhaseImages());
        phaseImagesCB.setText("Phase Images");
        phaseImagesCB.setName("phaseImagesCB"); // NOI18N
        phaseImagesCB.addActionListener(formListener);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(28, 28, 28)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(REadOutLabel)
                    .add(RedOutLabel)
                    .add(redoutdeNumCb, 0, 105, Short.MAX_VALUE)
                    .add(phaseEncodeNumCb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(phaseImagesCB)
                .addContainerGap())
        );

        layout.linkSize(new java.awt.Component[] {phaseEncodeNumCb, redoutdeNumCb}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(REadOutLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(phaseEncodeNumCb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 27, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(RedOutLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(redoutdeNumCb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(phaseImagesCB)
                .addContainerGap(35, Short.MAX_VALUE))
        );
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == phaseEncodeNumCb) {
                JImageFileChooserAccessory.this.phaseEncodeNumCbActionPerformed(evt);
            }
            else if (evt.getSource() == redoutdeNumCb) {
                JImageFileChooserAccessory.this.redoutdeNumCbActionPerformed(evt);
            }
            else if (evt.getSource() == phaseImagesCB) {
                JImageFileChooserAccessory.this.phaseImagesCBActionPerformed(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    public void setToDefaults(){
        getRedoutdeNumCb().setSelectedItem(defaultValue);
        getPhaseEncodeNumCb().setSelectedItem(defaultValue);
    }
    private void phaseEncodeNumCbActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phaseEncodeNumCbActionPerformed
        String value = (String)getPhaseEncodeNumCb ().getSelectedItem ();

        if (value.equalsIgnoreCase (defaultValue)){
            this.setIsPhaseEncodeSetByUser (false);
            this.setPhaseEncodeLengthSetByUser (-1);
        } else{
            int val = Integer.valueOf (value);
            this.setIsPhaseEncodeSetByUser (true);
            this.setPhaseEncodeLengthSetByUser (val);
        }
}//GEN-LAST:event_phaseEncodeNumCbActionPerformed

    private void redoutdeNumCbActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoutdeNumCbActionPerformed
        String value = (String)getRedoutdeNumCb ().getSelectedItem ();
        if (value.equalsIgnoreCase (defaultValue)){
            this.setIsRedOutLengthSetByUser (false);
            this.setRedouLengthSetByUser (-1);
        } else{
            int val = Integer.valueOf (value);
            this.setIsRedOutLengthSetByUser (true);
            this.setRedouLengthSetByUser (val);
        }
}//GEN-LAST:event_redoutdeNumCbActionPerformed

    private void phaseImagesCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phaseImagesCBActionPerformed
        boolean isSelected  = phaseImagesCB.isSelected();
        this.setPhaseImages( isSelected );

    }//GEN-LAST:event_phaseImagesCBActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel REadOutLabel;
    private javax.swing.JLabel RedOutLabel;
    private javax.swing.JComboBox phaseEncodeNumCb;
    private javax.swing.JCheckBox phaseImagesCB;
    private javax.swing.JComboBox redoutdeNumCb;
    // End of variables declaration//GEN-END:variables

    public javax.swing.JLabel getREadOutLabel () {
        return REadOutLabel;
    }
    public javax.swing.JLabel getRedOutLabel () {
        return RedOutLabel;
    }
    public javax.swing.JComboBox getPhaseEncodeNumCb () {
        return phaseEncodeNumCb;
    }
    public javax.swing.JComboBox getRedoutdeNumCb () {
        return redoutdeNumCb;
    }

    public void setREadOutLabel ( javax.swing.JLabel REadOutLabel ) {
        this.REadOutLabel = REadOutLabel;
    }
    public void setRedOutLabel ( javax.swing.JLabel RedOutLabel ) {
        this.RedOutLabel = RedOutLabel;
    }
    public void setPhaseEncodeNumCb ( javax.swing.JComboBox phaseEncodeNumCb ) {
        this.phaseEncodeNumCb = phaseEncodeNumCb;
    }
    public void setRedoutdeNumCb ( javax.swing.JComboBox redoutdeNumCb ) {
        this.redoutdeNumCb = redoutdeNumCb;
    }



    public int getRedouLengthSetByUser () {
        return redouLengthSetByUser;
    }
    public int getPhaseEncodeLengthSetByUser () {
        return phaseEncodeLengthSetByUser;
    }
    public boolean isRedOutLengthSetByUser () {
        return isredOutLengthSetByUser;
    }
    public boolean isPhaseEncodeSetByUser () {
        return isPhaseEncodeSetByUser;
    }

    public void setRedouLengthSetByUser ( int redouLengthSetByUser ) {
        this.redouLengthSetByUser = redouLengthSetByUser;
    }
    public void setPhaseEncodeLengthSetByUser ( int phaseEncodeLengthSetByUser ) {
        this.phaseEncodeLengthSetByUser = phaseEncodeLengthSetByUser;
    }
    public void setIsRedOutLengthSetByUser ( boolean isredOutLengthSetByUser ) {
        this.isredOutLengthSetByUser = isredOutLengthSetByUser;
    }
    public void setIsPhaseEncodeSetByUser ( boolean isPhaseEncodeSetByUser ) {
        this.isPhaseEncodeSetByUser = isPhaseEncodeSetByUser;
    }

    public boolean isPhaseImages() {
        return phaseImages;
    }
    public void setPhaseImages(boolean phaseImages) {
        this.phaseImages = phaseImages;
    }

}
