/*
 * JPlotResults.java
 *
 * Created on September 18, 2007, 12:54 PM
 */

package interfacebeans;
import bayes.ApplicationPreferences;
import bayes.DirectoryManager;
import ij.process.FloatProcessor;
import run.RunHistogram;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.*;

import java.awt.image.BufferedImage;
import javax.swing.*;
import java.text.*;
import java.util.*;
import java.io.*;

import org.jfree.chart.*;
import org.jfree.chart.plot.*;
import org.jfree.chart.axis.*;
import org.jfree.data.xy.*;
import org.jfree.chart.renderer.xy.*;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.*;
import org.jfree.data.category.*;
import org.jfree.ui.RectangleInsets;

import java.math.BigDecimal;
import java.util.List;
import org.jfree.chart.renderer.GrayPaintScale;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.data.Range;
import org.jfree.ui.RectangleEdge;
import utilities.PlotInfo.RESULTS_PLOT_TYPE;
import utilities.*;
import utilities.PlotInfo.EXTRA_TYPE;

public class ResultsViewer extends javax.swing.JPanel implements Viewable {
    private static  ResultsViewer instance;
    public  static final String PLOT_LIST_FILE_NAME         =   "Bayes.Plot.List";
    public static final String REGEX                        =   java.util.regex.Pattern.compile("\\s+").pattern();
    public static final String OUTLIERS_TRACE_NAME          =  "Outliers";
    private long loadFileTimeStamp                          =   0;
    public static   ResultsViewer getInstance(){
        if (instance == null){
            instance  = new  ResultsViewer();
        }
        return instance;
    }
    public static ChartPanel makeEmptyChartPanel(){
       ChartPanel cp    = new ChartPanel(ChartFactory.createXYLineChart(
                                            null,null,null,null,
                                            PlotOrientation.VERTICAL,
                                             true,true,true));
       return cp;
    }
    
    /** Creates new form JPlotResults */

    private ResultsViewer () {
        initComponents ();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane = new javax.swing.JSplitPane();
        plotPane = new javax.swing.JPanel();
        setup_pane = new javax.swing.JPanel();
        tools = new javax.swing.JPanel();
        runHist_btn = new javax.swing.JButton();
        viewSmpl_btn = new javax.swing.JButton();
        msg = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        plotJList = new javax.swing.JList();

        FormListener formListener = new FormListener();

        setLayout(new java.awt.BorderLayout());

        jSplitPane.setContinuousLayout(true);
        jSplitPane.setOneTouchExpandable(true);

        plotPane.add (chartPanel);
        plotPane.setLayout(new javax.swing.BoxLayout(plotPane, javax.swing.BoxLayout.LINE_AXIS));
        jSplitPane.setRightComponent(plotPane);

        setup_pane.setPreferredSize(new java.awt.Dimension(200, 800));
        setup_pane.setLayout(new java.awt.BorderLayout());

        tools.setLayout(new java.awt.GridLayout(3, 0));

        runHist_btn.setText("Get MaxEnt Histogram");
        runHist_btn.setToolTipText("Generate error bar plot for selected parameter."); // NOI18N
        runHist_btn.setEnabled(false);
        runHist_btn.addActionListener(formListener);
        tools.add(runHist_btn);

        viewSmpl_btn.setText("View Samples");
        viewSmpl_btn.setToolTipText("View MCMC samples for selected parameter."); // NOI18N
        viewSmpl_btn.setEnabled(false);
        viewSmpl_btn.addActionListener(formListener);
        tools.add(viewSmpl_btn);

        msg.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        msg.setForeground(new java.awt.Color(204, 0, 0));
        tools.add(msg);

        setup_pane.add(tools, java.awt.BorderLayout.SOUTH);

        plotJList.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Output Plots", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Lucida Grande", 1, 14))); // NOI18N
        plotJList.addMouseListener(formListener);
        plotJList.addListSelectionListener(formListener);
        jScrollPane1.setViewportView(plotJList);

        setup_pane.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jSplitPane.setLeftComponent(setup_pane);

        add(jSplitPane, java.awt.BorderLayout.CENTER);
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.MouseListener, javax.swing.event.ListSelectionListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == runHist_btn) {
                ResultsViewer.this.runHist_btnActionPerformed(evt);
            }
            else if (evt.getSource() == viewSmpl_btn) {
                ResultsViewer.this.viewSmpl_btnActionPerformed(evt);
            }
        }

        public void mouseClicked(java.awt.event.MouseEvent evt) {
        }

        public void mouseEntered(java.awt.event.MouseEvent evt) {
        }

        public void mouseExited(java.awt.event.MouseEvent evt) {
        }

        public void mousePressed(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == plotJList) {
                ResultsViewer.this.plotJListMousePressed(evt);
            }
        }

        public void mouseReleased(java.awt.event.MouseEvent evt) {
        }

        public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
            if (evt.getSource() == plotJList) {
                ResultsViewer.this.plotJListValueChanged(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

private void runHist_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runHist_btnActionPerformed
    setMessage(START_HISTOGRAM);
    RunHistogram.execute(this.getCurrentPlotName());
}//GEN-LAST:event_runHist_btnActionPerformed
private void viewSmpl_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewSmpl_btnActionPerformed
    PlotInfo pi             =  getSelectedPlotInfo();
    boolean isViewSamples   =   pi.isViewSampels();
    boolean isHistogram     =   pi.isHistogram();
    
    if (isHistogram == false) {return; /* do nothing */}
   
    pi.setViewSampels(!isViewSamples);
    update();
}//GEN-LAST:event_viewSmpl_btnActionPerformed
private void plotJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_plotJListValueChanged
     if (evt.getValueIsAdjusting() )  { return;}
    update();
}//GEN-LAST:event_plotJListValueChanged
private void plotJListMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_plotJListMousePressed
    if(SwingUtilities.isRightMouseButton (evt) || evt.isControlDown()){
        final PlotInfo pi              =    getSelectedPlotInfo();
            if (pi == null){return;}

           JPopupMenu popup        = new JPopupMenu ();

           JMenuItem infoMenuItem   = new JMenuItem ("Plot Info");
           infoMenuItem.addActionListener (new ActionListener (){
            public void actionPerformed (ActionEvent e) {
               Viewer.display(pi.getPlotInstuctions().toString());
            }
             });
            popup.add(  infoMenuItem);


            JMenuItem showDataMenuItem   = new JMenuItem ("Show Data From Plot");
            showDataMenuItem.addActionListener (new ActionListener (){
            public void actionPerformed (ActionEvent e) {
                Viewer.display(getPlottedData().toString(), pi.getInfo() );

            }
             });
            popup.add(  showDataMenuItem);

            JMenuItem showPlotFileMenuItem   = new JMenuItem ("Show Source File for Plot");
            showPlotFileMenuItem .addActionListener (new ActionListener (){
            public void actionPerformed (ActionEvent e) {
                File file                   =    getFileForPlotting();
                if (file != null){
                   String content              =   IO.readFileToString(file);
                    Viewer.display(content , file.getName() );
                }


            }
             });
            popup.add(  showPlotFileMenuItem );

            popup.show (evt.getComponent (), evt.getX (), evt.getY ());

    }




}//GEN-LAST:event_plotJListMousePressed

    private void update(){
    PlotInfo pi             =   getSelectedPlotInfo();
    if (pi == null) {return;}
    boolean isViewSamples   =   pi.isViewSampels();
    boolean isHistogram     =   pi.isHistogram();   
       
       getViewSampleButton ().setEnabled(isHistogram); 
       setMessage("");
       if (pi.getPlotType() == RESULTS_PLOT_TYPE.ERROR_BARS){
            getRunHistogramButton().setEnabled(false);
       }
       else {
            getRunHistogramButton().setEnabled(isHistogram);
       }
      
      
      if (isHistogram ){
             if (isViewSamples){
                setViewSampleOrHistogramTitle(VIEW_HISTOGRAM);
             }
             else {
                setViewSampleOrHistogramTitle(VIEW_SAMPLES);
             }
                                
       }
       
       
       File file = getFileForPlotting();
       if (! file.exists()) { 
           DisplayText.popupErrorMessage("File "+ file.getAbsoluteFile()+ " doesn't exist.");
           return;}
       
       Plot       plot     =  getChartPanel().getChart().getPlot();
       if (plot instanceof  XYPlot){
            plot         =  ( XYPlot) plot;
            NumberAxis x_axis   = (NumberAxis)chartPanel.getChart().getXYPlot().getDomainAxis();
            x_axis.setInverted(false);
       }
       
     RESULTS_PLOT_TYPE type = (isViewSamples) ? RESULTS_PLOT_TYPE.MCMC_SAMPLES : getType();
     switch( type){


         case LINE          :   getPlotPanel().remove (getChartPanel());
                                removeAllDataSetListeners();
                                do_line_XYdataset();
                                makeXYLinePlot();
                                getPlotPanel().add (getChartPanel());
                                setup_line_Plot();
                                break;
                                
         case SCATTER       :   getPlotPanel().remove (getChartPanel());
                                removeAllDataSetListeners();
                                do_scatter_XYdataset();
                                makeScatterPlot();
                                getPlotPanel().add (getChartPanel());
                                setup_scatter_Plot(); 
                                break;
                                
         case SCATTER_SMALL :   getPlotPanel().remove (getChartPanel());
                                removeAllDataSetListeners();
                                do_scatter_XYdataset();
                                makeScatterPlot();
                                getPlotPanel().add (getChartPanel());
                                setup_scatter_small_Plot(); 
                                break;
                                
         case SIMS           :
                                getPlotPanel().remove (getChartPanel());
                                removeAllDataSetListeners();
                                do_sims_XYdataset();
                                makeXYLinePlot();
                                getPlotPanel().add (getChartPanel());
                                setup_sims_Plot();
    
                                break;                          
                                
         case BARCHART        :  getPlotPanel().remove (getChartPanel());
                                 removeAllDataSetListeners();
                                 do_barChart_dataset();
                                 makeBarChatPlot();
                                 getPlotPanel().add (getChartPanel());
                                 
                                 setup_barChart(); 
                                 break;

        case MCMC_SAMPLES     : getPlotPanel().remove (getChartPanel());
                                 removeAllDataSetListeners();
                                 do_MCMCSamples_XYdataset();
                                 makeScatterPlot();
                                 setup_scatter_MCMC_Plot();
                                 getPlotPanel().add (getChartPanel());
                                 break;   
                                 
         case ERROR_BARS       :  getPlotPanel().remove (getChartPanel());
                                  removeAllDataSetListeners();
                                 do_errorBar_XYdataset();
                                 makeErrorPlot();
                                 getPlotPanel().add (getChartPanel());
                                 setup_errorBar_Plot();
                                 break;


       case CONTOUR          :  getPlotPanel().remove (getChartPanel());
                                 removeAllDataSetListeners();
                                 do_ContourDataset();
                                makeScatterPlot();
                                 getPlotPanel().add (getChartPanel());
                                 setup_xyz_Plot();
                                 break;
        }
     
       revalidate();
   
 
    }
    public void checkAndload(File dir){
        File curPlotFile        =   new File(dir, PLOT_LIST_FILE_NAME);
        long currenttime        =   curPlotFile.lastModified();
        if (currenttime != loadFileTimeStamp){
            load (dir);
        }
    }
    private void load (File dir){
         File plotFile       =  getLoadFile(dir);
         resetToEmpty();

         if (plotFile .exists() == true){
            plot_file = plotFile;
            read (plot_file);
            this.getPlotJList().setSelectedIndex(0);

            loadFileTimeStamp  = plotFile.lastModified();

         }

    }
    private File getLoadFile(File dir){
         File plotFile       =  new File(dir, PLOT_LIST_FILE_NAME);
         return plotFile;
    }
    
    
    public Component getMainDisplay(){return this.plotPane;}
    public  boolean  read(File plotListFile){

       Scanner  scanner = null;

       String line  = "";
       try {
            scanner  =  new Scanner(plotListFile);

            while(scanner.hasNextLine()){
                PlotInfo plotInfo   =    new PlotInfo();
                StringBuilder sb    = new StringBuilder();
                scanner.nextLine();    //skip blank line 1


                line                = scanner.nextLine() ;      // line 2
                String type         = line;
                sb.append( line + "\n");


                line                =  scanner.nextLine().trim()  ;// line 3
                sb.append( line + "\n");
                plotInfo.setBin     (  line );     // line 3

                line                =  scanner.nextLine().trim()  ;// line 4
                sb.append( line + "\n");
                plotInfo.setName       (  line );


                line                =  scanner.nextLine().trim()  ;// line 5
                sb.append( line + "\n");
                plotInfo.setTitle   (line);


                line                =  scanner.nextLine().trim()  ;// line6
                sb.append( line + "\n");
                plotInfo.setInfo   (line);


                line                =  scanner.nextLine().trim()  ;// line7
                sb.append( line + "\n");
                plotInfo.setX_label    (line);

                line                =  scanner.nextLine().trim()  ;// line8
                sb.append( line + "\n");
                plotInfo.setY_label    (line);

                line                =  scanner.nextLine()  ;// line9
                sb.append( line + "\n");
                String  extra       = line;

                plotInfo.setPlotInstuctions(sb);
                PlotInfo.parseTypePlotInfo(  plotInfo, type);

                PlotInfo.parseExtraPlotInfo(  plotInfo, extra );
                getPlotInfos().add(plotInfo);

            }

        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
            return false;
        } catch (IOException ex){
             ex.printStackTrace();
             return false;
        } finally{
             scanner.close();
        }

      
        updatePlotList();
        return true;
      }

    public  void resetToEmpty(){
        try{
          cleanDataSets();
          //getPlotPanel().remove (getChartPanel());
          setEmptyPlot();
          getPlotPanel().revalidate();
          getPlotPanel().repaint();
          getPlotInfos().clear();
          
          updatePlotList();
        }
        finally{
            loadFileTimeStamp = 0;
        }
          
    }
    public void setEmptyPlot(){
        getPlotPanel().remove (getChartPanel());
        removeAllDataSetListeners();
        chartPanel                           =   makeEmptyChartPanel();
        getPlotPanel().add (getChartPanel());
    }

    public  static void reset(){
         if (instance != null){
            instance = null;
         }
    }
    private void updatePlotList(){
        ListModel model          =   getPlotJList().getModel();
       if (model instanceof  DefaultListModel == false){
            model               =   new  DefaultListModel();
            getPlotJList().setModel(model);
        }
        DefaultListModel dlm    =   (DefaultListModel)getPlotJList().getModel();
        dlm.clear();
          for (PlotInfo plotInfo : plotInfos) {
                dlm .addElement(plotInfo);
          }
    }
    public  void  updateAfterHistogramRun(File plotListFile, String plotname){
       boolean shouldUpdateDisplay      =   false;
       Scanner scanner                  =   null;
       PlotInfo selectedPlotInfo        =   getSelectedPlotInfo();

      if (selectedPlotInfo!= null){
            shouldUpdateDisplay = selectedPlotInfo.getInfo().equals(plotname );
       }


       try {
            scanner  =  new Scanner(plotListFile);

            while(scanner.hasNextLine()){

                PlotInfo plotInfo   =    new PlotInfo();
                scanner.nextLine();                 //skip blank line 1
                String type         = scanner.nextLine() ;    // line 2
                plotInfo.setBin     ( scanner.nextLine().trim());     // line 3
                plotInfo.setName    ( scanner.nextLine());     // line 4
                plotInfo.setTitle   ( scanner.nextLine());    // line 5
                plotInfo.setInfo    ( scanner.nextLine());     // line 6
                plotInfo.setX_label ( scanner.nextLine());  // line 7
                plotInfo.setY_label ( scanner.nextLine());  // line 8
                String  extra       = scanner.nextLine() ;  // line 9

                PlotInfo.parseTypePlotInfo(  plotInfo, type);
                PlotInfo.parseExtraPlotInfo(  plotInfo, extra );


                boolean isUpdate            =   plotInfo.getInfo().equals( plotname);

                if (isUpdate   == false) {continue;}

                for (PlotInfo pi: getPlotInfos()) {
                    if (pi.getInfo().equals ( plotname)){
                        PlotInfo.parseTypePlotInfo( pi, type );
                        pi.setViewSampels(false);
                    }
                }
         }

          if (shouldUpdateDisplay){
                 update();
          }

        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex){
             ex.printStackTrace();
        } finally{
             scanner.close();
        }
      }

    public void addOutlierSeries() {
           File outfilename     =   getAdditionalFilForPlotting();
           String content       =   IO.readFileToString(outfilename);
           if (content == null) {return;}

           double [] TimeOut    =   readColumn(content, 1);
           double [] Outliers   =   readColumn(content, 2);
           XYSeries series      =   createXYSeries( TimeOut,Outliers, OUTLIERS_TRACE_NAME);
           getXydataset().addSeries(series);

    }
    public void do_line_XYdataset() {
        try {
            String filename         =   getFileForPlotting().getPath();

            String  content         =   IO.readFileToString(filename);
            List <String> labels    =    getSelectedPlotInfo().getLablesForLinePlot ();
            boolean lablesGiven     =   !labels.isEmpty();
            boolean isOutlier       =   getSelectedPlotInfo().getExtra().isOutlier();
            int xcol                =   getSelectedPlotInfo().getAbscissaColumnForLinePlot ();
            List<Integer> ycols     =   getSelectedPlotInfo().getOrdinataColumnsForLinePlot();


            cleanDataSets();

            double [] dataX     =   readColumn(content,xcol);

            for (int i = 0; i < ycols.size(); i++) {
                int curY            = ycols.get(i);
                double [] dataY     =   readColumn(content, curY);
                
                String defaultLabel               = "Set "+ i;
                String label                      =  defaultLabel;
                if( lablesGiven){
                    try{
                        label       = labels.get(i);
                        if (i < ycols.size() - 1 || isOutlier == true){
                            label   =   label + ",";
                        }
                      

                    }catch(Exception e){e.printStackTrace();}

                }
                
                XYSeries series     =   createXYSeries( dataX,dataY,  label   );
                getXydataset().addSeries(series) ;
            }


          
            if (isOutlier){ addOutlierSeries();}

         }

         catch (Exception ex) {
           // ex.printStackTrace();
             cleanDataSets();
        }
   
    
    
    }
    public void do_ContourDataset() {
        try {
            String filename     =   getFileForPlotting().getPath();
            File datefile       =   getAdditionalFilForPlotting();
            String  bgcontent   =   IO.readFileToString(filename);
            String  content     =   IO.readFileToString(datefile);
            List <String> labels=     getSelectedPlotInfo().getLablesForLinePlot ();


             cleanDataSets();


            ArrayList <Float> ylist = new ArrayList <Float>();
            ArrayList <Float> xlist = new ArrayList <Float>();
            Scanner scanner         = new Scanner(bgcontent );


            while(scanner.hasNext()){
                xlist.add(scanner.nextFloat());
                ylist.add(scanner.nextFloat());
                scanner.next(); //skip
            }

            prodDist  = new    ProbabilityDistribution ();
            prodDist.setParameterValues(xlist);
            prodDist.setProbilityValues(ylist);
            prodDist.initialize();


            //int xcol            =   getSelectedPlotInfo().getAbscissaColumnForLinePlot ();
           // List<Integer> ycols =   getSelectedPlotInfo().getOrdinataColumnsForLinePlot();
            List<Integer> ycols   = new ArrayList<Integer>();
            ycols.add(2);
            int xcol                  = 1;



            double [] dataX     =   readColumn(content,xcol);

            for (int i = 0; i < ycols.size(); i++) {
                int curY            = ycols.get(i);
                double [] dataY     =   readColumn(content, curY);

                String label               = ""+ i;
                if ( labels.size() == ycols.size()){ label = labels.get(i);}

                XYSeries series     =   createXYSeries( dataX,dataY, label);
                getXydataset().addSeries(series) ;
            }




         }

         catch (Exception ex) {
             ex.printStackTrace();
        }



    }
    public void do_scatter_XYdataset(){
        String filename = getFileForPlotting().getPath();
        
        int index1   =   getSelectedPlotInfo().getAbscissaForScatterPlot();
        int index2   =   getSelectedPlotInfo().getOrdinataForScatterPlot();
        try {
            
            double [] dataX    =   IO.nASCI2double(filename,index1);
            double [] dataY    =   IO.nASCI2double(filename, index2);
            XYSeries series    =  createXYSeries( dataX,dataY, "");
       
            cleanDataSets();
            getXydataset().addSeries(series) ;
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
    public void do_sims_XYdataset() {
    
        File   file         = getFileForPlotting();
        

        cleanDataSets();
        try {
            

            int col         =   IO.getNumberOfColumns(file);
            int row         =   IO.getNumberOfLines(file.getPath());

           
            String fileData =   IO.readFileToString(file);
            double [] x     =   new double [row];
            for (int i = 0; i < x.length; i++) { x[i] = i + 1.0;}
  
             
            XYSeries [] series       =  new  XYSeries[col];
            for (int i = 0; i < series.length; i++) {
                series[i] =  new XYSeries("sim " + i) ;
                
            }
    
             
            Scanner scanner = new Scanner (fileData);
            for (int i = 0; i < col; i++) {
                for (int j = 0; j < row; j++) {
                    double y    = scanner.nextDouble(); 
                    series[i].add(j, y);
                }
            }
  
            scanner.close();

    

            for (XYSeries ser : series) {
                getXydataset().addSeries(ser);
            }
   
        }
         catch (FileNotFoundException ex) {
            ex.printStackTrace();
            cleanDataSets();
        }
        catch (IOException ex) {
            ex.printStackTrace();
            cleanDataSets();
        }

         
    
    }
    public void do_barChart_dataset() {
        File datafile                           =   getFileForPlotting();
        String content                          =   IO.readFileToString(datafile);
        Scanner scanner                         =   new Scanner(content);
        cleanDataSets();
        
            
        while (scanner.hasNextLine()){
            scanner.next(); //ignore first token
            Double y            = scanner.nextDouble();
            String x            = scanner.next();
            barChartDataset.addValue(y, "",x);
            scanner.nextLine();

        }

      
    }
    public void do_errorBar_XYdataset() {
        File datafile                           =   getFileForPlotting();
        String content                          =   IO.readFileToString(datafile);
        Scanner scanner                         =   new Scanner(content);
        
            ArrayList <Integer> traces              =   getSelectedPlotInfo().getTraces();
            int numTraces                           =   traces.size()/ numDataColumnPerTrace ;

            cleanDataSets();

            for (int i = 0; i < numTraces; i++) {
                 YIntervalSeries series             =   new YIntervalSeries(""); 
                  yIntervalDataset.addSeries(series);
            }
        
           
            while (scanner.hasNextLine()){
                String line         = scanner.nextLine(); 
                for (int i = 0; i < numTraces; i++) {
                    int x_ind         =   traces.get(i* numDataColumnPerTrace) ;
                    int y_ind         =   traces.get(i* numDataColumnPerTrace+1) ;
                    int err_ind       =   traces.get(i*  numDataColumnPerTrace+2) ;
                    
                    double x          = readValue(line, x_ind );
                    double y          = readValue(line, y_ind );
                    double err        = readValue(line, err_ind );
                    
                     yIntervalDataset.getSeries(i).add(x, y, y - err, y + err); 
                }
            }
       
    }
    public void do_MCMCSamples_XYdataset() {
        int sims            =   ApplicationPreferences.getMcmcSims();
        int reps            =   ApplicationPreferences.getMcmcReps();
        int paramInd        =   Integer.valueOf(getCurrentHistogramNumber ()); 
        File file           =   DirectoryManager.getMcmcSamplesFile();
        double [] dataY     =   ReadMcmcSamples.read(file, paramInd, sims, reps);
        double [] dataX     =   new double [dataY.length];
        cleanDataSets();
         
        if (dataY == null) {
            String message = String.format("Error occured while parsing\n %s file\n", file.getPath());
            DisplayText.popupErrorMessage(message);
            return ;
        
        }
        
        for (int i = 0; i < dataX.length; i++) {dataX[i] = i+1;}
        XYSeries series    =  createXYSeries( dataX,dataY, "");
        
        
        getXydataset().addSeries(series) ;
    }


    public static XYSeries createXYSeries (double [] dataX,
                                           double [] dataY,
                                           String xySeriesName){
        if (dataX.length != dataY.length)
        {
            System.out.println("Exiting.  dataX.length != dataY.length");
            return null;
        }

        XYSeries series = new XYSeries	(xySeriesName, false /* autosort*/);
        for (int i = 0; i < dataX.length;  i++ ){series.add(dataX[i], dataY[i]);}

		
        return series;
    }
 

    public void setup_line_Plot(){
        JFreeChart chart    =  getChartPanel () .getChart();
        XYPlot plot         =  chart.getXYPlot();
        NumberAxis x_axis   = (NumberAxis)plot.getDomainAxis();
        NumberAxis y_axis   = (NumberAxis)plot.getRangeAxis();
        XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot.getRenderer(); 

        renderer.setSeriesPaint(0, c1);
        renderer.setSeriesPaint(1, c2);
        renderer.setSeriesPaint(2, ResidualColor);

        String title        =    getSelectedPlotInfo().getTitle();
        EXTRA_TYPE extra    =    getSelectedPlotInfo().getExtra();
        if (extra == EXTRA_TYPE.MEAN){ 
            title = title +"\n" + getSelectedPlotInfo().getDataInfo();
        }
        chart.setTitle(title);

        List <String> labels     =     getSelectedPlotInfo().getLablesForLinePlot ();
        if (labels.isEmpty()) {chart.removeLegend();}
        else { LegendTitle legend = chart.getLegend();
           if (legend != null)legend.setPosition(RectangleEdge.BOTTOM);
/*
            int nseries             =    getXydataset().getSeries().size();
            int lastPos             =    0;
            for (int i = 0; i < nseries ; i++) {

              XYSeries ser          =   ( XYSeries)getXydataset().getSeries().get(i);
              String des            =    ser.getKey().toString();
              int isize             =    ser .getItemCount();
              int pos               =    lastPos + 10;

              if (pos > isize ){
                pos = 5;
              }
              lastPos               =    pos;
              double x              =    ser.getX(pos ).doubleValue();
              double y              =    ser.getY(pos ).doubleValue();
              double a              =    -Math.PI/3;
              XYPointerAnnotation pointer = new XYPointerAnnotation( des,x,y,a );

                Paint paint         =   renderer.getSeriesPaint(i);
                pointer.setBaseRadius(35.0);
                pointer.setTipRadius(10.0);
                pointer.setToolTipText(des);
                pointer.setURL(des);
                pointer.setFont(new Font("SansSerif", Font.PLAIN, 14));
                pointer.setPaint(paint);
                pointer.setArrowPaint(paint);
                pointer.setTextAnchor(TextAnchor.BOTTOM_CENTER);
                plot.addAnnotation(pointer);
                plot.getRenderer().addAnnotation(pointer);
            }
  */
        }

        

       // plot.setBackgroundPaint(Color.white);
        plot.setBackgroundPaint(plotColor);
        plot.setRangeGridlinePaint(gridColor  );
        plot.setDomainGridlinePaint(gridColor  );

       
        plot.setDomainCrosshairVisible(true);
        plot.setDomainCrosshairValue(50.0, true);
        plot.setRangeCrosshairVisible(true);
        plot.setInsets(new RectangleInsets (20,20,20, 30), true);
       
        if (this.isInvertAxis()) {x_axis.setInverted(true);}
        x_axis.setLabelInsets (new RectangleInsets (10,0,0,0));
        y_axis.setLabelInsets (new RectangleInsets (10,0,0,10));
        x_axis.setLabelFont(new Font("Helvetica", Font.BOLD, 20));
        y_axis.setLabelFont(new Font("Helvetica", Font.BOLD, 20));
      // y_axis.setNumberFormatOverride(new DecimalFormat ("#0.##E0"));
        x_axis.setAutoRange(true);
        
       
        

        y_axis.setLabel ( getSelectedPlotInfo().getY_label());
        x_axis.setLabel ( getSelectedPlotInfo().getX_label());
        
        x_axis.setTickLabelFont(new Font("Helvetica", Font.PLAIN, 14));
        y_axis.setTickLabelFont(new Font("Helvetica", Font.PLAIN, 14));
       // y_axis.setLabelAngle(PI/2);




        List <XYSeries> series = getXydataset().getSeries();
        for (int i = 0; i <series.size(); i++) {
            renderer.setSeriesStroke(i, new BasicStroke(2));
            XYSeries s = series.get(i);
            if( s.getKey().equals(OUTLIERS_TRACE_NAME)){
                int outlierSeriesIndex      =   i;
                int outsize                 =   8;
                Shape shape = new Ellipse2D.Double(-outsize/2,-outsize/2,outsize,outsize);
                renderer.setSeriesShape(outlierSeriesIndex, shape);
                renderer.setSeriesPaint(outlierSeriesIndex, Color.RED);
                renderer.setSeriesStroke(outlierSeriesIndex, new BasicStroke(5));
                renderer.setSeriesLinesVisible(outlierSeriesIndex, false);
                renderer.setSeriesShapesFilled(outlierSeriesIndex,true);
                renderer.setSeriesShapesVisible(outlierSeriesIndex, true) ;
            }

        }

        boolean isResidualOnly =  getSelectedPlotInfo().isResidualOnly();
        if (isResidualOnly ){
           renderer.setSeriesPaint(0, ResidualColor);
            Range   datarange           = getDataAndModelRange();
            Range range                 =  y_axis.getRange();

            if (datarange == null){
                range                 =  Range.scale(range, 5.0);
            }
            else {
                 double lowerBound  = datarange.getLowerBound();
                 double upperBound  = datarange.getUpperBound();
                 double length      = Math.abs(upperBound - lowerBound);
                 upperBound         = upperBound  + y_axis.getUpperMargin() * length;
                 lowerBound         = lowerBound -  y_axis.getLowerMargin() * length;
                 range              = new Range (lowerBound, upperBound );
            }
            y_axis.setAutoRange(false);
            y_axis.setRange(range);
        }
        else{
                y_axis.setAutoRange(true);
                y_axis.setAutoRangeIncludesZero(false);
        }

    }
    public void setup_xyz_Plot(){
        JFreeChart chart    =  getChartPanel () .getChart();
        XYPlot plot         =  chart.getXYPlot();
        NumberAxis x_axis   = (NumberAxis)plot.getDomainAxis();
        NumberAxis y_axis   = (NumberAxis)plot.getRangeAxis();
        XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot.getRenderer();

        

        String title        =    getSelectedPlotInfo().getTitle();
        EXTRA_TYPE extra    =    getSelectedPlotInfo().getExtra();
        if (extra == EXTRA_TYPE.MEAN){
            title = title +"\n" + getSelectedPlotInfo().getDataInfo();
        }
        chart.setTitle(title);

        List <String> labels     =     getSelectedPlotInfo().getLablesForLinePlot ();
        if (labels.isEmpty()) {chart.removeLegend();}
        else { LegendTitle legend = chart.getLegend();
              if (legend != null)legend.setPosition(RectangleEdge.BOTTOM);
        }



       // plot.setBackgroundPaint(Color.white);
        plot.setBackgroundPaint(plotColor);
        plot.setRangeGridlinePaint(gridColor  );
        plot.setDomainGridlinePaint(gridColor  );


        plot.setDomainCrosshairVisible(true);
        plot.setDomainCrosshairValue(50.0, true);
        plot.setRangeCrosshairVisible(true);
        plot.setInsets(new RectangleInsets (20,20,20, 30), true);

        x_axis.setLabelInsets (new RectangleInsets (10,0,0,0));
        y_axis.setLabelInsets (new RectangleInsets (10,0,0,10));
        x_axis.setLabelFont(new Font("Helvetica", Font.BOLD, 20));
        y_axis.setLabelFont(new Font("Helvetica", Font.BOLD, 20));
      // y_axis.setNumberFormatOverride(new DecimalFormat ("#0.##E0"));
        x_axis.setAutoRange(true);

       




        y_axis.setLabel ( getSelectedPlotInfo().getY_label());
        x_axis.setLabel ( getSelectedPlotInfo().getX_label());



        x_axis.setTickLabelFont(new Font("Helvetica", Font.PLAIN, 14));
        y_axis.setTickLabelFont(new Font("Helvetica", Font.PLAIN, 14));
       // y_axis.setLabelAngle(PI/2);
        renderer.setSeriesStroke(0, new BasicStroke(6));
        renderer.setSeriesPaint(0, Color.BLUE);
        renderer.setSeriesShapesFilled(0,false);
        renderer.setDrawOutlines(true);
        renderer.setSeriesShape(0, new Ellipse2D.Double(-3.0, -3.0, 6.0, 6.0));

        if (prodDist != null){

            plot.setBackgroundImage(prodDist.image);
            y_axis.setAutoRange(false);
            y_axis.setRange(new Range(prodDist.getLowerBound(), prodDist.getUpperBound()));


            NumberAxis scaleAxis = new NumberAxis("Probability Map");
              scaleAxis.setUpperBound(100);
              scaleAxis.setAxisLinePaint(Color.white);
              scaleAxis.setTickMarkPaint(Color.white);
              scaleAxis.setTickLabelFont(new Font("Dialog", Font.PLAIN, 12));
              GrayPaintScale ps = new GrayPaintScale(prodDist.getMinProbability(),prodDist.getMaxProbability());
              PaintScaleLegend ps_legend = new PaintScaleLegend(ps, scaleAxis);
              ps_legend.setAxisLocation(AxisLocation.BOTTOM_OR_LEFT);
              ps_legend.setPadding(new RectangleInsets(5, 5,10, 5));
              ps_legend.setStripWidth(50);
              ps_legend.setPosition(RectangleEdge.RIGHT);
              ps_legend.setBackgroundPaint(Color.white);

              chart.addSubtitle(ps_legend);
              chart.setBackgroundPaint(Color.white);
/*

               y_axis.addChangeListener(new AxisChangeListener(){
              public void axisChanged(AxisChangeEvent event){
                if (event.getType().equals(ChartChangeEventType.GENERAL)){
                    Range newRange = ((NumberAxis)event.getAxis()).getRange();

                }
                
                }


               });

*/

        }




      


}
    public void setup_scatter_Plot(){ 
        JFreeChart chart    =  chartPanel.getChart();
        XYPlot plot         =  chart.getXYPlot();
        NumberAxis x_axis = (NumberAxis)plot.getDomainAxis();
        NumberAxis y_axis = (NumberAxis)plot.getRangeAxis();
        XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot.getRenderer(); 


        String title        =    getSelectedPlotInfo().getTitle();
        EXTRA_TYPE extra    =    getSelectedPlotInfo().getExtra();
        if (extra == EXTRA_TYPE.MEAN){
            title = title +"\n" + getSelectedPlotInfo().getDataInfo();
        }
        chart.setTitle(title);


        chart.removeLegend();
       // plot.setBackgroundPaint(Color.white);
        plot.setBackgroundPaint(plotColor);
        plot.setRangeGridlinePaint(gridColor  );
        plot.setDomainGridlinePaint(gridColor  );
        
        plot.setDomainCrosshairVisible(true);
        plot.setDomainCrosshairValue(50.0, true);
        plot.setRangeCrosshairVisible(true);

        x_axis.setLabelFont(new Font("Helvetica", Font.BOLD, 20));
        y_axis.setLabelFont(new Font("Helvetica", Font.BOLD, 20));
      // y_axis.setNumberFormatOverride(new DecimalFormat ("#0.##E0"));
        
         y_axis.setAutoRangeIncludesZero(false);
        
        y_axis.setLabel ( getSelectedPlotInfo().getY_label());
        x_axis.setLabel ( getSelectedPlotInfo().getX_label());
        
        x_axis.setTickLabelFont(new Font("Helvetica", Font.PLAIN, 14));
        y_axis.setTickLabelFont(new Font("Helvetica", Font.PLAIN, 14));
       // y_axis.setLabelAngle(PI/2);
        //y_axis.autoAdjustRange();
       //chartPane.doEditChartProperties();
        renderer.setSeriesStroke(0, new BasicStroke(6));
        renderer.setSeriesPaint(0, Color.BLACK);
        renderer.setSeriesShapesFilled(0,false);
        renderer.setDrawOutlines(true);
        renderer.setSeriesShape(0, new Ellipse2D.Double(-3.0, -3.0, 6.0, 6.0));
    }
    public void setup_scatter_small_Plot(){ 
        setup_scatter_Plot();
        XYPlot plot         =   getChartPanel().getChart().getXYPlot();
        
        XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot.getRenderer(); 
        renderer.setSeriesShape(0, new Ellipse2D.Double(-1.0, -1.0, 2.0, 2.0));
    }
    public void setup_scatter_MCMC_Plot(){
        setup_scatter_small_Plot();
        JFreeChart chart    =  chartPanel.getChart();
        XYPlot plot         =  chart.getXYPlot();
        NumberAxis x_axis   = (NumberAxis)plot.getDomainAxis();
        NumberAxis y_axis   = (NumberAxis)plot.getRangeAxis();

        String title        =  String.format("MCMC SAMPLES FOR %s",  getSelectedPlotInfo().getX_label()) ;
        EXTRA_TYPE extra    =    getSelectedPlotInfo().getExtra();
        if (extra == EXTRA_TYPE.MEAN){
            title = title +"\n" + getSelectedPlotInfo().getDataInfo();
        }
        chart.setTitle(title);

        y_axis.setLabel ( "Sample Value");
        x_axis.setLabel ( "Sample Number");


    }
    public void setup_sims_Plot(){
        JFreeChart chart    =  chartPanel.getChart();
        XYPlot plot         =  chart.getXYPlot();
        NumberAxis x_axis = (NumberAxis)plot.getDomainAxis();
        NumberAxis y_axis = (NumberAxis)plot.getRangeAxis();
        XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot.getRenderer(); 
        
       chart.removeLegend();
       // plot.setBackgroundPaint(Color.white);
        plot.setBackgroundPaint(plotColor);
        plot.setRangeGridlinePaint(gridColor  );
        plot.setDomainGridlinePaint(gridColor  );

         chart.getLegend();
        chart.setTitle( getSelectedPlotInfo().getTitle());
        plot.setDomainCrosshairVisible(true);
        plot.setDomainCrosshairValue(50.0, true);
        plot.setRangeCrosshairVisible(true);

        x_axis.setLabelFont(new Font("Helvetica", Font.BOLD, 20));
        y_axis.setLabelFont(new Font("Helvetica", Font.BOLD, 20));
      // y_axis.setNumberFormatOverride(new DecimalFormat ("#0.##E0"));
        
        y_axis.setLabel ( getSelectedPlotInfo().getY_label());
        x_axis.setLabel  (getSelectedPlotInfo().getX_label());
        y_axis.setAutoRangeIncludesZero(false);
        x_axis.setTickLabelFont(new Font("Helvetica", Font.PLAIN, 14));
        y_axis.setTickLabelFont(new Font("Helvetica", Font.PLAIN, 14));
       // y_axis.setLabelAngle(PI/2);
        //y_axis.autoAdjustRange();
       //chartPane.doEditChartProperties();
    }
    public void setup_barChart(){
        JFreeChart chart            =  chartPanel.getChart();
        final CategoryPlot plot     = chart.getCategoryPlot();
        final CategoryAxis x_axis   = plot.getDomainAxis();
        final NumberAxis y_axis     = (NumberAxis)plot.getRangeAxis();
     
        final BarRenderer3D renderer = (BarRenderer3D) plot.getRenderer();
       
        //  y_axis.setAutoTickUnits(false);
        setupAxisTicks (y_axis, 0.24);
        renderer.setDrawBarOutline(false);
       // renderer.setMaximumBarWidth(0.10);

        chart.getLegend();
        chart.removeLegend();
        chart.setTitle( getSelectedPlotInfo().getTitle());
 
        // set the background color for the chart...
       // chart.setBackgroundPaint(Color.white);
        plot.setBackgroundPaint(null);
       // plot.setDomainGridlinePaint(Color.white);
        //plot.setRangeGridlinePaint(Color.white); 
       
       // plot.setDomainCrosshairVisible(true);
       // plot.setDomainCrosshairValue(50.0, true);
       // plot.setRangeCrosshairVisible(true);
        
        // set the range axis to display integers only...
       // y_axis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

        x_axis.setLabelFont(new Font("Helvetica", Font.BOLD, 20));
        y_axis.setLabelFont(new Font("Helvetica", Font.BOLD, 20));
      // y_axis.setNumberFormatOverride(new DecimalFormat ("#0.##E0"));
        
        y_axis.setLabel ( getSelectedPlotInfo().getY_label());
        x_axis.setLabel ( getSelectedPlotInfo().getX_label());
        y_axis.setAutoRangeIncludesZero(false);
        x_axis.setTickLabelFont(new Font("Helvetica", Font.PLAIN, 14));
        y_axis.setTickLabelFont(new Font("Helvetica", Font.PLAIN, 14));
       // y_axis.setLabelAngle(PI/2);
        //y_axis.autoAdjustRange();
        
        // set up gradient paints for series...
        final GradientPaint gp0 = new GradientPaint(
            0.0f, 0.0f, new Color(0, 0, 155), 
            0.0f, 0.0f,new Color(50, 50, 255) 
        );
        final GradientPaint gp1 = new GradientPaint(
            0.0f, 0.0f, Color.green, 
            0.0f, 0.0f, Color.lightGray
        );
        final GradientPaint gp2 = new GradientPaint(
            0.0f, 0.0f, Color.red, 
            0.0f, 0.0f, Color.lightGray
        );
        renderer.setSeriesPaint(0, gp0);
        renderer.setSeriesPaint(1, gp1);
        renderer.setSeriesPaint(2, gp2);

       
      /*
        domainAxis.setCategoryLabelPositions(
            CategoryLabelPositions.createUpRotationLabelPositions(Math.PI / 6.0)
        );
       */
    }
    public void setup_errorBar_Plot(){
        JFreeChart chart            =  chartPanel.getChart(); 
        XYPlot plot                 = (XYPlot) chart.getPlot(); 
        NumberAxis x_axis           = (NumberAxis)plot.getDomainAxis();
        NumberAxis y_axis           = (NumberAxis)plot.getRangeAxis();
        
        plot.setBackgroundPaint(Color.lightGray); 
        //plot.setBackgroundPaint(Color.white); 
        plot.setAxisOffset(new RectangleInsets(5.0, 5.0, 5.0, 5.0)); 
        plot.setDomainGridlinePaint(Color.white); 
        plot.setRangeGridlinePaint(Color.white); 
        
      
        chart.setTitle( getSelectedPlotInfo().getTitle());
        y_axis.setLabel ( getSelectedPlotInfo().getY_label());
        x_axis.setLabel ( getSelectedPlotInfo().getX_label());
        
        x_axis.setLabelInsets (new RectangleInsets (10,0,0,0));
        y_axis.setLabelInsets (new RectangleInsets (10,0,0,10));
        x_axis.setLabelFont(new Font("Helvetica", Font.BOLD, 20));
        y_axis.setLabelFont(new Font("Helvetica", Font.BOLD, 20));
        
        DeviationRenderer renderer = new DeviationRenderer(true, false); 
        renderer.setSeriesStroke(0, new BasicStroke(3.0f, BasicStroke.CAP_ROUND, 
                BasicStroke.JOIN_ROUND)); 
        renderer.setSeriesStroke(0, new BasicStroke(3.0f)); 
        renderer.setSeriesStroke(1, new BasicStroke(3.0f)); 
        renderer.setSeriesFillPaint(0, new Color(50, 50, 155));
        renderer.setSeriesFillPaint(1, new Color(255, 200, 200)); 
        plot.setRenderer(renderer); 

        // change the auto tick unit selection to integer units only... 
        y_axis.setAutoRangeIncludesZero(false); 
       // y_axis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
        
      //  double rng  = y_axis.getRange().getLength();
      //  rng         = round(rng,1);
        
      //  NumberTickUnit u = new NumberTickUnit(rng/10);
      //  y_axis.setTickUnit(u);
        chart.removeLegend();
        
    }
    
    public void makeXYLinePlot(){ 
       
        JFreeChart chart = ChartFactory.createXYLineChart(
                    null,null,null,getXydataset(),
                    PlotOrientation.VERTICAL,
                    true,true,true);
     

        ChartPanel chartPane   =  new ChartPanel(chart);
        chartPane.setMouseZoomable(true);
        chartPane.setMouseWheelEnabled(true);
        XYPlot plot              = chart.getXYPlot();
        boolean isPannable = ( plot instanceof Pannable);
        if (isPannable ){
                plot.setDomainPannable(true);
                plot.setRangePannable(true);
         }

        setChartPanel(chartPane);
    }

    public void makeErrorPlot(){ 
         JFreeChart chart = ChartFactory.createXYLineChart(    
                    null,null,null, yIntervalDataset,  
                    PlotOrientation.VERTICAL,
                    true,true,true);					
        setChartPanel(new ChartPanel (chart)); 
    }
    public void makeScatterPlot(){ 
        JFreeChart chart = ChartFactory.createScatterPlot(    
                    null,null,null,getXydataset(),
                    PlotOrientation.VERTICAL,
                    true,true,true);
       

        ChartPanel chartPane   =  new ChartPanel(chart);
        chartPane.setMouseZoomable(true);
        chartPane.setMouseWheelEnabled(true);
        XYPlot plot              = chart.getXYPlot();
        boolean isPannable = ( plot instanceof Pannable);
        if (isPannable ){
                plot.setDomainPannable(true);
                plot.setRangePannable(true);
         }




       JPopupMenu popup =   chartPane.getPopupMenu();
       popup.addSeparator();
       JMenuItem viewAndSaveSamples   = new JMenuItem ("View and Save Samples");
       viewAndSaveSamples .addActionListener (new ActionListener (){
                public void actionPerformed (ActionEvent e) {
                   viewMCMCSampleData();
                }
            });
       popup .add(  viewAndSaveSamples );
/*
       JMenuItem loadSamples   = new JMenuItem ("Load Samples");
       loadSamples .addActionListener (new ActionListener (){
                public void actionPerformed (ActionEvent e) {
                   loadData();
                }
            });
       popup .add(  loadSamples );
*/

        setChartPanel(chartPane);
    }
    public void makeBarChatPlot(){                 
        JFreeChart chart = ChartFactory.createBarChart3D(    
                    null,null,null, barChartDataset,  
                    PlotOrientation.VERTICAL,
                    true,true,false);
        ChartPanel chartPane   =  new ChartPanel(chart);
        chartPane.setMouseZoomable(true);
        chartPane.setMouseWheelEnabled(true);
        CategoryPlot plot              = chart.getCategoryPlot();
        boolean isPannable = ( plot instanceof Pannable);
        if (isPannable ){
                plot.setRangePannable(true);
         }

        setChartPanel(chartPane);
    }
    
    public void setupAxisTicks(NumberAxis axis, double tickPercent){
        double fullrange    =   axis.getRange().getLength();
        double ticksize     =   fullrange* tickPercent;
        DecimalFormat f     =   new DecimalFormat("#.00");

        ticksize            =   Double.parseDouble(f.format(ticksize));
        axis.setTickUnit(new NumberTickUnit(ticksize)); 
    }
    public void showGUI (JComponent  pane) {   
       if (pane == null) return;
       pane.removeAll();
       pane.add (this);
       pane.revalidate();
    }
    public void showGUI (JFrame frame) {   
        
        if (this.isShowing ()) return;
        if (frame == null ) {
          frame = new JFrame ();
          frame.setDefaultCloseOperation (JFrame.DISPOSE_ON_CLOSE);
        }
         
       frame.setContentPane (this);

       frame.pack ();
       frame.setVisible (true);
              
    }


    public void cleanDataSets(){
         xydataset.removeAllSeries();
         barChartDataset.clear();
         yIntervalDataset.removeAllSeries();
    }
    public StringBuilder getPlottedData(){
        StringBuilder sb = new StringBuilder();
        String eol                  =   System.getProperty("line.separator"  );
        String tmp                  =   null;
        String pad                  =   "\t";
        double val                  =   0;
        String format               =   "%+04.8E";


        if (xydataset.getSeriesCount() > 0){
           int nseries              =   xydataset.getSeriesCount() ;
           int nitems               =   xydataset.getItemCount(0);

            for (int curItem = 0; curItem <  nitems ; curItem++) {
                val                 =   xydataset.getXValue(0, curItem);
                tmp                 =   String.format(format,val );
                sb.append(tmp  );
                for (int curSeries = 0; curSeries < nseries; curSeries++) {
                    val             =   xydataset.getYValue(curSeries, curItem);
                    tmp             =   String.format(format,val );
                    sb.append(pad );
                    sb.append(tmp );
                }
                sb.append(eol );
            }

        }
        else if (yIntervalDataset.getSeriesCount() > 0){
           int nseries              =   yIntervalDataset.getSeriesCount() ;
           int nitems               =   yIntervalDataset.getItemCount(0);

            for (int curItem = 0; curItem <  nitems ; curItem++) {
                val                 =  yIntervalDataset.getXValue(0, curItem);
                tmp                 =   String.format(format,val );
                sb.append(tmp  );
                for (int curSeries = 0; curSeries < nseries; curSeries++) {
                    val             =   yIntervalDataset.getYValue(curSeries, curItem);
                    tmp             =   String.format(format,val );
                    sb.append(pad );
                    sb.append(tmp );

                    val             =   yIntervalDataset.getStartYValue(curSeries, curItem);
                    tmp             =   String.format(format,val );
                    sb.append(pad );
                    sb.append(tmp );

                    val             =   yIntervalDataset.getEndYValue(curSeries, curItem);
                    tmp             =   String.format(format,val );
                    sb.append(pad );
                    sb.append(tmp );

                }
                      sb.append(eol );
                }
              
            }
        else if(barChartDataset.getColumnCount() > 0){
           int size                =  barChartDataset.getColumnCount() ;

            for (int curItem = 0; curItem < size     ; curItem++) {
                tmp                 =   barChartDataset.getColumnKey(curItem).toString();
                sb.append(tmp  );
                Number n            =   barChartDataset.getValue(0, curItem);
                val                 =   n.doubleValue();
                tmp                 =   String.format(format,val );
                sb.append(pad );
                sb.append(tmp );
                sb.append(eol );
            }
        }




            //barChartDataset.clear();
            //yIntervalDataset.removeAllSeries();

         return sb;
    }


    public StringBuilder getFistMCMCSampleDatasetAsString(){
        StringBuilder sb = new StringBuilder();

        int nseries = xydataset.getSeriesCount();
        if (nseries < 1){ sb.append("No data is plotted.");}

        XYSeries ser = xydataset.getSeries(0);
        int nitem    = ser.getItemCount();
        for (int curItem = 0; curItem < nitem; curItem++) {
            sb.append(ser.getX(curItem)  + "   "+ ser.getY(curItem));
            sb.append("\n");

        }

        return sb;

    }
    public void                 viewMCMCSampleData() {
         StringBuilder sb = getFistMCMCSampleDatasetAsString();
         Viewer.display( sb.toString(),  getCurrentPlotName ());


    }

    private static void createAndShowGUI () {
        //Disable boldface controls.
        UIManager.put ("swing.boldMetal", Boolean.FALSE);
        
        //Create and set up the window.
        JFrame frame = new JFrame ("");
        frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
     
        //Create and set up the content pane.
      //  JPlotResults newContentPane = new JPlotResults( new File("exp2/BayesOtherAnalysis/Bayes.Plot.List"));

        ResultsViewer newContentPane = new ResultsViewer( );
        newContentPane.setOpaque (true); //content panes must be opaque
        frame.setContentPane (newContentPane);
       
        
        //Display the window.
        frame.pack ();
        frame.setVisible (true);
       }
    public void removeAllDataSetListeners(){
        Plot plot = this.getChartPanel().getChart().getPlot();

        if (plot instanceof  XYPlot){
            XYPlot xyplot = (XYPlot)plot;
            xyplot.setDataset(0, null);
        }
        else if (plot instanceof CategoryPlot){
            CategoryPlot catplot = (CategoryPlot)plot;
             catplot.setDataset(0, null);
        }
        else if (plot instanceof FastScatterPlot){
            FastScatterPlot fplot = (FastScatterPlot)plot;
            fplot.setData(null);
        }

    }
    public Range getDataAndModelRange() {
       double min          =   Double.MAX_VALUE;
       double max          =   -Double.MAX_VALUE;

        try {
            String filename     =   getFileForPlotting().getPath();
            String  content     =   IO.readFileToString(filename);

            List<Double> values = readAllDataExceptAbscissa(content );
            min                 =   Double.MAX_VALUE;
            max                 =   -Double.MAX_VALUE;
            for (Double val : values) {

                min                = Math.min(min,  val);
                max                = Math.max(max, val);


            }

         }

         catch (Exception ex) {
            return null;
        }

        return new Range (min, max);
    }
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane;
    private javax.swing.JLabel msg;
    private javax.swing.JList plotJList;
    private javax.swing.JPanel plotPane;
    private javax.swing.JButton runHist_btn;
    private javax.swing.JPanel setup_pane;
    private javax.swing.JPanel tools;
    private javax.swing.JButton viewSmpl_btn;
    // End of variables declaration//GEN-END:variables
    public javax.swing.JPanel getPlotPanel () { return plotPane;}
    public javax.swing.JButton getRunHistogramButton () {
        return runHist_btn;
    }
    public javax.swing.JList getPlotJList() {
        return plotJList;
    }

    private  File  plot_file =  new File("exp2/BayesOtherAnalysis/Bayes.Plot.List");
    
    
    private List<PlotInfo> plotInfos                        =   new ArrayList<PlotInfo>();
    private Color c1                                        =   new Color(200, 20,20);
    private Color c2                                        =   new Color(33, 33,100);
    private Color ResidualColor                             =   new Color(33, 100,33);
    private Color gridColor                                 =   Color.BLACK;
    private Color plotColor                                 =   Color.WHITE;
    
    private final  int numDataColumnPerTrace                =   3;
    private final XYSeriesCollection  xydataset             =   new XYSeriesCollection ();
    private final DefaultCategoryDataset barChartDataset    =   new DefaultCategoryDataset() ;
    private final YIntervalSeriesCollection yIntervalDataset=   new YIntervalSeriesCollection(); 


    ProbabilityDistribution prodDist                        =   null;

    private ChartPanel chartPanel                           =   makeEmptyChartPanel();



    boolean listenToEvents                                  =   true;
    public static String START_HISTOGRAM                    =   "Histogram is being generated";
    public static String END_HISTOGRAM                      =   "MaxEnt histogram is run";
    public static String VIEW_SAMPLES                       =   "View Samples";
    public static String VIEW_HISTOGRAM                     =   "View Histogram";
    
// *************    setters and getters     ********************/
   
    public PlotInfo getSelectedPlotInfo(){
        if (plotJList.isSelectionEmpty()){
            return null;
        }
        else{
            return (PlotInfo)plotJList.getSelectedValue();
        }
    }
    
    public boolean isInvertAxis (){
        boolean invert = false;
        int n =  getXydataset().getSeries(0).getItemCount();
        if (  n > 1){
        
            double x1 = getXydataset().getSeries(0).getDataItem(0).getXValue();
            double x2 = getXydataset().getSeries(0).getDataItem(1).getXValue();
            if (x2 < x1) {invert = true;}

        }
       
        
        return invert;
        
    }
  
    public static  double round(double val,  int decimalPlace){
   
        BigDecimal bd   = new BigDecimal(val);
        bd              = bd.setScale(decimalPlace,BigDecimal.ROUND_UP);
        return  bd.doubleValue();
    }
    
    public  void setBayesplot_file (File aBayesplot_file) { this.plot_file = aBayesplot_file;}
    public ChartPanel   getChartPanel () { return chartPanel;}
    public JButton      getViewSampleButton () {
        return viewSmpl_btn;
    }
   
    public File getAdditionalFilForPlotting(){
        String  filename      =    getSelectedPlotInfo().getDataInfo();
        return  getFileForPlotting (filename);
    }
    public File getFileForPlotting(){
        String filename         = getFileNameForPlotting();
        return  getFileForPlotting (  filename ) ;
    }
    public File getFileForPlotting(String filename){
        File    asciiDir      =     DirectoryManager.getBayesOtherAnalysisDir();
        return new File (asciiDir,filename);
    }
    public String getFileNameForPlotting(){
        String  filename      =    getSelectedPlotInfo().getName();
        return filename;
    }
  



    public XYSeriesCollection getXydataset () {
        return xydataset;
    }

    

    public RESULTS_PLOT_TYPE getType () {
        return  getSelectedPlotInfo().getPlotType();
    }
   
    public String getCurrentHistogramNumber () {
        return getSelectedPlotInfo().getBin();
    }
    public String getCurrentPlotName () {
        return getSelectedPlotInfo().getInfo();
    }
    public String getCurrentPlotTitle () {
        return getSelectedPlotInfo().getTitle();
    }
    public String getCurrentPlotXLabel () {
        return getSelectedPlotInfo().getX_label();
    }
    public String getCurrentPlotYLabel () {
        return getSelectedPlotInfo().getY_label();
    }
  

    public double readValue(String line, int tokennumber){
            String [] strArray = line.trim().split("\\s+");
            double val         = Double.valueOf(strArray [tokennumber - 1]);
            return val;
    }

    public void setChartPanel (ChartPanel chartPanel) {this.chartPanel = chartPanel;}
    public void setMessage ( String message ) {
         msg.setText(message);
    }
    public void setViewSampleOrHistogramTitle ( String message ) {
         getViewSampleButton ().setText(message);
    }

   
    public static BufferedImage toBufferedImage(Image image) {
        if (image instanceof BufferedImage) {
            return (BufferedImage)image;
        }

        // This code ensures that all the pixels in the image are loaded
        image = new ImageIcon(image).getImage();

        // Determine if the image has transparent pixels; for this method's
        // implementation, see e661 Determining If an Image Has Transparent Pixels
        boolean hasAlpha =  false;//hasAlpha(image);

        // Create a buffered image with a format that's compatible with the screen
        BufferedImage bimage = null;
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        try {
            // Determine the type of transparency of the new buffered image
            int transparency = Transparency.OPAQUE;
            if (hasAlpha) {
                transparency = Transparency.BITMASK;
            }

            // Create the buffered image
            GraphicsDevice gs = ge.getDefaultScreenDevice();
            GraphicsConfiguration gc = gs.getDefaultConfiguration();
            bimage = gc.createCompatibleImage(
                image.getWidth(null), image.getHeight(null), transparency);
        } catch (HeadlessException e) {
            // The system does not have a screen
        }

        if (bimage == null) {
            // Create a buffered image using the default color model
            int type = BufferedImage.TYPE_INT_RGB;
            if (hasAlpha) {
                type = BufferedImage.TYPE_INT_ARGB;
            }
            bimage = new BufferedImage(image.getWidth(null), image.getHeight(null), type);
        }

        // Copy image to buffered image
        Graphics g = bimage.createGraphics();

        // Paint the image onto the buffered image
        g.drawImage(image, 0, 0, null);
        g.dispose();

        return bimage;
    }
    public static double[] readColumn (String text, int k) {

        ArrayList <String> array    =   new  ArrayList<String>();
        Scanner scanner             =   new Scanner(text);
        String regex                =  "\\s+"; // white space
        while (scanner.hasNextLine()){
                    String line    = scanner.nextLine().trim();
                    String [] strs = line.split (regex);
                    array.add( strs[k-1]);
        }

       scanner.close();
       double [] data               = new double [array.size()];
       for (int i = 0; i < data.length; i++){
                     data[i]        = Double.parseDouble(array.get (i));
       }

     return data;
  }
    public static List<Double> readAllDataExceptAbscissa (String text) {
        List <Double> array         =   new  ArrayList<Double>();

        try{
           Scanner scanner             =   new Scanner(text);
           while (scanner.hasNextLine()){
                Scanner linescanner    =   new Scanner(scanner.nextLine());


                 // skip abscissa
                if (linescanner.hasNext()){
                   
                    linescanner.next();
                }
                // read values
                while (linescanner.hasNext()){
                    array.add(  linescanner.nextDouble());
                    
                }
                linescanner.close();
            }
        }
        catch (Exception e){e.printStackTrace();}
        finally{
             return array  ;
        }



  }


    public static void main (String[] args) {
         //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
       javax.swing.SwingUtilities.invokeLater (new Runnable () {
            public void run () {
                createAndShowGUI ();
            }
      });
    }

    public List<PlotInfo> getPlotInfos() {
        return plotInfos;
    }
    public void setPlotInfos(List<PlotInfo> plotInfos) {
        this.plotInfos = plotInfos;
    }


    public class ProbabilityDistribution {
        private double lowerBound = 0.0;
        private double upperBound = 0.0;
        private double minProbability = 0.0;
        private double maxProbability = 0.0;
        private ArrayList<Float> probilityValues = new ArrayList<Float>();
        private ArrayList<Float> parameterValues = new ArrayList<Float>();
        private Image   image                    = null;




       void initialize(){
            int size            =   getProbilityValues().size();
            float [][] values   =   new float  [1][size];
            float xmin           =   +Float.MAX_VALUE;
            float xmax           =   -Float.MAX_VALUE;
            float pmin           =   +Float.MAX_VALUE;
            float pmax           =   -Float.MAX_VALUE;

            for (int curPix = 0; curPix < size; curPix++) {

                    float val                   =  getProbilityValues().get(curPix);
                    int ind                     =   size - curPix -1;
                    values [0][ind]             =   val ;
                    if (val < pmin) {pmin = val; }
                    if (val > pmax) {pmax = val;}


                    float x                     =  getParameterValues().get(curPix);
                    if (x < xmin) {xmin = x; }
                    if (x > xmax) {xmax = x;}

                   // System.out.println( curPix +" x = "+ x + "  xmax ="+xmax);

           }

            FloatProcessor fp = new FloatProcessor(values);
            fp.setInterpolate(false);
            fp.setMinAndMax(pmin, pmax);

            this.setImage(fp.createImage());
            this.setUpperBound(xmax);
            this.setLowerBound(xmin);
            this.setMaxProbability(pmax);
            this.setMinProbability(pmin);

        }
      



        public double getLowerBound() {
            return lowerBound;
        }
        public void setLowerBound(double lowerBound) {
            this.lowerBound = lowerBound;
        }

        public double getUpperBound() {
            return upperBound;
        }
        public void setUpperBound(double upperBound) {
            this.upperBound = upperBound;
        }

        public double getMinProbability() {
            return minProbability;
        }
        public void setMinProbability(double minProbability) {
            this.minProbability = minProbability;
        }

        public double getMaxProbability() {
            return maxProbability;
        }
        public void setMaxProbability(double maxProbability) {
            this.maxProbability = maxProbability;
        }

        public ArrayList<Float> getProbilityValues() {
            return probilityValues;
        }
        public void setProbilityValues(ArrayList<Float> probilityValues) {
            this.probilityValues = probilityValues;
        }

        public ArrayList<Float> getParameterValues() {
            return parameterValues;
        }
        public void setParameterValues(ArrayList<Float> parameterValues) {
            this.parameterValues = parameterValues;
        }

        public void setImage(Image image) {
            this.image = image;
        }

     }
   

}
