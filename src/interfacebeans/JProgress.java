/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JProgress.java
 *
 * Created on Sep 30, 2009, 3:58:04 PM
 */

package interfacebeans;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JProgressBar;

/**
 *
 * @author apple
 */
public class JProgress extends javax.swing.JPanel {
    private JFrame frame  = new JFrame();

    private JProgress(boolean indeterminate) {
        pbar = new  JProgressBar();
        setIndeterminate(indeterminate);
        initComponents();
    }
    private JProgress(int min, int max) {
        pbar = new  JProgressBar(min, max);
        initComponents();
    }

    public static JProgress getIndeterminateProgressBar(String title, String mesage){
        JProgress progress = new JProgress( true );
        progress.setIndeterminate(true);
        progress.setMessage(mesage);
        progress.getFrame().setTitle(title);
        progress.getFrame().add(progress);
        progress.getFrame().pack();
        progress.getFrame().setVisible(true);


      
        return progress;
    }
    public static JProgress getDeterminateProgressBar(String title,int min, int max){
        JProgress progress = new JProgress(min, max);
        progress.getFrame().setTitle(title);
        progress.getFrame().add(progress);
        progress.getFrame().setVisible(true);

      
        return progress;
    }

    public static StartTread startProgress(String title, String message){
        StartTread runnable  = new StartTread();
        runnable.title       = title;
        runnable.message      = message;

        Thread thread       = new Thread(runnable);
        java.awt.EventQueue.invokeLater(thread);
        try {
            thread.join();
        } catch (InterruptedException ex) {
            Logger.getLogger(JProgress.class.getName()).log(Level.SEVERE, null, ex);
        }
        return runnable;
    }
    public static void updateProgress(JProgress pr, String msg){

        UpdateTread thread  = new UpdateTread(pr, msg);
        java.awt.EventQueue.invokeLater(thread);

    }
    public static void closeProgress(JProgress pr){

        CloseTread thread  = new CloseTread(pr);
        java.awt.EventQueue.invokeLater(thread);
        pr = null;

    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        messageLabel = new javax.swing.JLabel();
        pbar = pbar;

        setName("Form"); // NOI18N

        messageLabel.setName("messageLabel"); // NOI18N

        pbar.setName("pbar"); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(messageLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
                        .addContainerGap(26, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(pbar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 349, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(31, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(16, 16, 16)
                .add(messageLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(4, 4, 4)
                .add(pbar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public static void main (String args []){
         startProgress("Progress Monitor", "");
        /*
                java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               getIndeterminateProgressBar("Progress Monitor");
            }
        });
         */
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel messageLabel;
    private javax.swing.JProgressBar pbar;
    // End of variables declaration//GEN-END:variables

    public javax.swing.JLabel getMessageLabel() {
        return messageLabel;
    }
    public void setMessageLabel(javax.swing.JLabel messageLabel) {
        this.messageLabel = messageLabel;
    }
    public javax.swing.JProgressBar getPbar() {
        return pbar;
    }


    public void setMessage(String message){
        if(getMessageLabel() != null){
             getMessageLabel().setText(message);
        }
    }
    public void setString(String message){
        getPbar().setString(message);
    }
    public void setStringPainted(boolean paintString){
         getPbar().setStringPainted(paintString);
    }
    public void setIndeterminate(boolean indeterminate){
        getPbar().setIndeterminate(indeterminate);
    }
    public void setValue(int val){
        getPbar().setValue(val);
    }
    public void setMinimum(int n){
        getPbar().setMinimum(n);
    }
    public void setMaximum(int n){
        getPbar().setMaximum(n);
    }
    private boolean isIndeterminate(){
        return getPbar().isIndeterminate();
    }

    public JFrame getFrame() {
        return frame;
    }
    public void setFrame(JFrame frame) {
        this.frame = frame;
    }



    public static class StartTread implements Runnable {
       public JProgress pr;
       String title;
       String message;
       public void run() {
                pr =getIndeterminateProgressBar(title, message);
                
       }
    }
    public static class UpdateTread implements Runnable {
        public JProgress pr;
        String message;
        UpdateTread(JProgress apr, String amsg){
            pr = apr;
            message = amsg;
       }


       public void run() {
           if(pr == null){return;}
                pr.setMessage(message);
                pr.validate();
       }
    }
    public static class CloseTread implements Runnable {
        public JProgress pr;
        String message;
        CloseTread(JProgress apr){
            pr = apr;
       }


       public void run() {
           if(pr == null){return;}
              pr.getFrame().setVisible(false);
              pr.getFrame().dispose();
              pr = null;
       }
    }
}
