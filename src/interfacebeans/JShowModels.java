/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JShowModels.java
 *
 * Created on Nov 19, 2009, 4:12:37 PM
 */

package interfacebeans;

import utilities.PanelUtility;
import java.awt.Component;
import java.awt.MouseInfo;
import java.awt.Point;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import bayes.DirectoryManager;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;
import load.LoadAsciiModels;
import load.gui.JRemoteFileChooser;
import run.RunCompile;
import utilities.AsciiModelList;
import utilities.BayesFileFilters;
import utilities.DisplayText;
import utilities.EnterAsciiModel;
import utilities.IO;
import utilities.Server;
import static load.gui.JRemoteFileChooser.*;
/**
 *
 * @author apple
 */
public class JShowModels extends javax.swing.JPanel implements Viewable {
   public static final String ASCII_MODEL_IS_LOADED = "Enter Ascii Model is Loaded";
   public static final String NO_ASCII_MODEL_LOADED = "No Enter Ascii Model is Loaded";
   public static final String COMPILE_IS_RUN        = "Compile Fortran has been run by JRUN";

   private static JShowModels instance              =   null;
   private AsciiModelList models                    =   new  AsciiModelList();
   private EnterAsciiModel editModel                =   null;
   public static final String EXAMPLE_MODEL         =  "/interfacebeans/EnterAsciiExampleFortanFile";
   public static final String EXAMPLE_PARAMS        =  "/interfacebeans/EnterAsciiExampleParamsFile";


   StyleContext context                             = new StyleContext();
   StyledDocument     document                      = new DefaultStyledDocument(context);
   Style style                                      = context.getStyle(StyleContext.DEFAULT_STYLE);
   private boolean singleMode                       =   true;


   {
        StyleConstants.setAlignment(style, StyleConstants.ALIGN_LEFT);

   }

   public static JShowModels getInstance() {
      if(instance == null) {
         instance = new  JShowModels();
      }
      return instance;
   }
   private JShowModels() {
        initComponents();
        
    }
   static public void     reset(){
         if (instance == null) {return;}
         instance.models.clear();

         PropertyChangeListener[]  lis =   instance.getPropertyChangeListeners();
         for (PropertyChangeListener listener : lis) {
             instance.removePropertyChangeListener(listener);
         }
         instance = null;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSplitPane1 = new javax.swing.JSplitPane();
        ModelTabbedPane = new javax.swing.JTabbedPane();
        codeScrollPane = new javax.swing.JScrollPane();
        codeTextPane = new interfacebeans.AntiAliasedTextPane(document);
        paramsPane = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        paramsTextPane = new interfacebeans.AntiAliasedTextPane(document);
        generalSettingsPane = new javax.swing.JPanel();
        list_scroll_pane = new javax.swing.JScrollPane();
        JModelList = new javax.swing.JList();
        removeModel_btn = new javax.swing.JButton();
        createModelButton = new javax.swing.JButton();

        setName("Form"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setName("jSplitPane1"); // NOI18N
        jSplitPane1.setOneTouchExpandable(true);

        ModelTabbedPane.setAutoscrolls(true);
        ModelTabbedPane.setName("ModelTabbedPane"); // NOI18N

        codeScrollPane.setName("codeScrollPane"); // NOI18N

        codeTextPane.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), java.awt.Color.darkGray, null, null));
        codeTextPane.setEditable(false);
        codeTextPane.setFont(new java.awt.Font("Monospaced", 0, 18));
        codeTextPane.setName("codeTextPane"); // NOI18N
        codeScrollPane.setViewportView(codeTextPane);

        ModelTabbedPane.addTab("Code", codeScrollPane);

        paramsPane.setName("paramsPane"); // NOI18N
        paramsPane.setLayout(new java.awt.BorderLayout());

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        paramsTextPane.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        paramsTextPane.setEditable(false);
        paramsTextPane.setFont(new java.awt.Font("Monospaced", 1, 16));
        paramsTextPane.setName("paramsTextPane"); // NOI18N
        jScrollPane3.setViewportView(paramsTextPane);

        paramsPane.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        ModelTabbedPane.addTab("Parameters", paramsPane);

        jSplitPane1.setRightComponent(ModelTabbedPane);

        generalSettingsPane.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(204, 198, 198), new java.awt.Color(204, 204, 204), null));
        generalSettingsPane.setName("generalSettingsPane"); // NOI18N
        generalSettingsPane.setLayout(new java.awt.GridBagLayout());

        list_scroll_pane.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.lightGray, null, null), "Ascii Models"));
        list_scroll_pane.setMinimumSize(new java.awt.Dimension(33, 200));
        list_scroll_pane.setName("list_scroll_pane"); // NOI18N
        list_scroll_pane.setPreferredSize(new java.awt.Dimension(270, 300));

        JModelList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        JModelList.setName("JModelList"); // NOI18N
        JModelList.setPreferredSize(new java.awt.Dimension(0, 250));
        JModelList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                JModelListValueChanged(evt);
            }
        });
        list_scroll_pane.setViewportView(JModelList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 3.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 5, 5);
        generalSettingsPane.add(list_scroll_pane, gridBagConstraints);

        removeModel_btn.setText("Remove Selected  Model");
        removeModel_btn.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nRemove selected model.\n\n\n</font></p><html>\n\n"); // NOI18N
        removeModel_btn.setName("removeModel_btn"); // NOI18N
        removeModel_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeModel_btnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalSettingsPane.add(removeModel_btn, gridBagConstraints);

        createModelButton.setText("Edit/Create New Model");
        createModelButton.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nCreate new or edit currently selected model.<br>\n\n\n\n</font></p><html>\n"); // NOI18N
        createModelButton.setName("createModelButton"); // NOI18N
        createModelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createModelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalSettingsPane.add(createModelButton, gridBagConstraints);

        jSplitPane1.setLeftComponent(generalSettingsPane);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void removeModel_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeModel_btnActionPerformed
        removeModel(getCurrentlyListedModel());
    }//GEN-LAST:event_removeModel_btnActionPerformed
    private void JModelListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_JModelListValueChanged
      if  (evt.getValueIsAdjusting()) {return;}
      updateGUIFromModel();
    }//GEN-LAST:event_JModelListValueChanged
    private void createModelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createModelButtonActionPerformed

        EnterAsciiModel listedModel     =     getCurrentlyListedModel();
        EnterAsciiModel edModel         =     null;

        if (listedModel  != null){
            edModel                     =    listedModel.cloneModel();
            setEditModel(edModel );
        }
        else {
            setEditModel(getExampeModel());
        }

       JEditModel.display(editModel);
    }//GEN-LAST:event_createModelButtonActionPerformed


    public void     updateGUIFromModel(){

      EnterAsciiModel model         =   this.getCurrentlyListedModel();
       if (model  == null){return;}
       try{

        setGUICode                  (   model.getCode());
        setGUIParamsText            (   model.writeParamsContent().toString());


       }
       finally {
       }
    }
    

    public void     build(){

        EnterAsciiModel model       =    getCurrentlyListedModel();
        if (model == null){
             String error = String.format("No model is selected");
             DisplayText.popupErrorMessage(error);
             return;
        }
        if( model.isLoaded() == false){
             String error = String.format("No valid model is selected");
             DisplayText.popupErrorMessage(error);
             return;
        }
    
       
        RunCompile runcompile = new  RunCompile(model);
        runcompile .submitCompileFortran();
        
        if (runcompile.isCanceled() == false){
            AllViewers.showCompileResults();
            firePropertyChange (COMPILE_IS_RUN, false, true);
        }

        

    }

    public void     updateGUIFromModels(){
       if (getModels() == null){return;}
       try{
             getJModelList().setListData(getModels().getAsciiModels());
              if(getModels().isEmpty() == false){
                    getJModelList().setSelectedIndex(0);
               }
              else{ updateNoModelSet();  }
                   
             
       }
       finally {
       }
    }

    public void     updateNoModelSet(){

       try{

       setGUICode                  ( "");
       setGUIParamsText            ( "");
 
       }
       finally {}

    }





    public void removeModel(EnterAsciiModel model){
        if (model == null){return;}
        getModels().remove(model);
        updateGUIFromModels();
        
        
         if (getModels().isEmpty() == true){
                 updateNoModelSet();
                 firePropertyChange(NO_ASCII_MODEL_LOADED, false, true);
        }
       
    }
    public void removeAllModels(){
        getModels().clear();
        getJModelList().setListData(getModels().getAsciiModels());
        updateNoModelSet();

        firePropertyChange(NO_ASCII_MODEL_LOADED, false, true);
    }
 

    public  void showCodePanel(){
        Component c         =   getCodeScrollPane();
        getModelTabbedPane().setSelectedComponent( c);
    }
    public  void showPriorsPanel(){
        Component c         =  getParamsPane();
        getModelTabbedPane().setSelectedComponent( c);
    }
    public static void showCode(){
         JShowModels.getInstance().showCodePanel();
    }
    public static void showPriors(){
       JShowModels.getInstance(). showPriorsPanel();
    }
    public static void display(   int x, int y){
        JShowModels inst =  JShowModels.getInstance();
        if (inst.isShowing ()) { return ;}
        JFrame frame = new JFrame ();
        frame.setDefaultCloseOperation (JFrame.DISPOSE_ON_CLOSE);

       frame.setContentPane (inst);
       frame.pack ();
       frame.setVisible (true);

       frame.setLocation(x, y);
       frame.setVisible(true);
    }
    public static void display( ){
        Point p = MouseInfo.getPointerInfo().getLocation();
        display (p.x, p.y);
    }



    public void loadSysModel(){
      String password               =   JServerPasswordDialog.getServerPassword();
      int    usrOption              =   JServerPasswordDialog.getInstance().getOption();
      if(   usrOption == JServerPasswordDialog.CANCEL ) {return ;}

      Server server                 =   JServer.getInstance().getServer();
      String url                    =   server.getHttpURL();
      String pathToListDir          =   server.getRelativePathToModelDir();
      String user                   =   server.getUser();


       try {

           callRemoteFileChooserSysModel(url ,pathToListDir  ,user, password);

           if ( JRemoteFileChooser.filename == null){return;}

           loadSysModel( JRemoteFileChooser.filename);
       }
       catch (FileNotFoundException ex) {
            DisplayText.popupErrorMessage("Failed to download enter ascii file\n" +
                                          "at url =  "+url+".");
           return;
       }

    }
    public void loadSysModel(String modelFileName){
         String systemModelDir      =   DirectoryManager.getSystemModelURL();
         boolean copyParamsFile     =   true;

         try{

            EnterAsciiModel eamodel = LoadAsciiModels.loadRemoteSystemModel(systemModelDir,
                                               modelFileName,copyParamsFile);
            boolean isNewModelAdded = addModel(eamodel);
           
         }catch(Exception exp){
             exp.printStackTrace();
             String exception = exp.getMessage();
             String error     =  "Failed to load the model.";
             if (exception != null){ error += "\n"+exception;}
             DisplayText.popupErrorMessage(error);
             return;
         }
    }
    public void loadUserModel(){
        //  bring up the file selectior showing only .f and .c files
        File bayesModelDir =  DirectoryManager. getUserModelDir();
        if(!bayesModelDir.exists ()){  bayesModelDir.mkdirs(); }


        JFileChooser fc             = new JFileChooser(bayesModelDir);
        fc.setMultiSelectionEnabled(false);
        fc.addChoosableFileFilter(new BayesFileFilters.SelectFortranAndCFiles());
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int returnVal               =   fc.showOpenDialog (fc);
        if (returnVal              !=   JFileChooser.APPROVE_OPTION) { return;}
        File selectedModelFile      =   fc.getSelectedFile();
        loadUserModel(selectedModelFile);

    }
    public void loadUserModel(File modelFile){
        EnterAsciiModel eamodel     =   LoadAsciiModels.loadUserModel(modelFile);
        boolean isNewModelAdded     =  addModel(eamodel);
    }


   public Component getMainDisplay(){return this;}

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               display( );
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList JModelList;
    private javax.swing.JTabbedPane ModelTabbedPane;
    private javax.swing.JScrollPane codeScrollPane;
    private javax.swing.JTextPane codeTextPane;
    private javax.swing.JButton createModelButton;
    private javax.swing.JPanel generalSettingsPane;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JScrollPane list_scroll_pane;
    private javax.swing.JPanel paramsPane;
    private javax.swing.JTextPane paramsTextPane;
    private javax.swing.JButton removeModel_btn;
    // End of variables declaration//GEN-END:variables
    public javax.swing.JButton getRemoveModelButton () {
        return removeModel_btn;
    }
    public javax.swing.JList getJModelList() {
        return JModelList;
    }
    public javax.swing.JTextPane getCodePane() {
        return codeTextPane;
    }
    public javax.swing.JPanel getGeneralSettingsPane() {
        return generalSettingsPane;
    }
    public javax.swing.JTabbedPane getModelTabbedPane() {
        return ModelTabbedPane;
    }
    public javax.swing.JScrollPane getCodeScrollPane() {
        return codeScrollPane;
    }
    public javax.swing.JPanel getParamsPane() {
        return paramsPane;
    }
    public javax.swing.JTextPane getParamsTextPane() {
        return paramsTextPane;
    }
    public javax.swing.JTextPane getCodeTextPane() {
        return codeTextPane;
    }
    public javax.swing.JScrollPane getModelListScrollPane() {
        return list_scroll_pane;
    }
    public void setGUICode(String acode){
       this.getCodeTextPane().setText(acode);
       this.getCodeTextPane().setCaretPosition(0);
    }
    public void setGUIParamsText(String paramsText){
        getParamsTextPane().setText(paramsText);
    }

    public EnterAsciiModel      getCurrentlyListedModel() {
        int nModels  =  getJModelList().getModel().getSize();

        if (nModels < 1) {
            updateNoModelSet();
            return null;}
        if (getJModelList().isSelectionEmpty()){
            return (EnterAsciiModel  )getJModelList().getModel().getElementAt(0);
        }
        else{
            return (EnterAsciiModel)getJModelList().getSelectedValue();
        }
    }

    // for single mode - this method returns currently loaded model or a dummy model
    // for multu mode  - this method returns first model from the model list or dummy model
    public EnterAsciiModel      getSingleModel() {
        AsciiModelList   mdls =     getModels();
        if (mdls.isEmpty()){ return new EnterAsciiModel();}
        else{return mdls.get(0) ; }


    }

    public boolean addModel(     EnterAsciiModel amodel  ){
        if ( amodel == null){return false;}
        if ( amodel.isLoaded() == false){
               String error = amodel.getLoadErrorMessage();
               if (error != null){ DisplayText.popupErrorMessage(error);   }
            return false;
        }
        if (isSingleModel()){ getModels().clear(); }
            
        boolean isAdded = getModels().addModel(amodel);
        updateGUIFromModels();
        if (isAdded){
              
                getJModelList().setSelectedValue(amodel, true);

              //  AllViewers.showCodeViewer();
                firePropertyChange(ASCII_MODEL_IS_LOADED, null,amodel );

        }
        else {
               String error = getModels().getErrorMesage();
               if (error != null){ DisplayText.popupErrorMessage(error);   }
        }
        if(getModels().isEmpty() == true){
                 firePropertyChange(NO_ASCII_MODEL_LOADED, false, true);
               
        }
            

       return isAdded;
    
    }
    public AsciiModelList       getModels() {
        return models;
    }
    public void setModels(AsciiModelList models) {
       if (getModels() == null) {return;}

        this.models = models;
        updateGUIFromModels();
        if(models.isEmpty() == true){
        }
        else {
        EnterAsciiModel model = models.get(0);
        getJModelList().setSelectedValue(model, true);
        }

    }



    public boolean              isSingleModel() {
        return singleMode;
    }
    public void                 setSingleMode(boolean singleMode) {
        this.singleMode = singleMode;
    }

    public void                 setActive(boolean enabled){
        PanelUtility.setEnabled(this, enabled);
      //  getRemoveModelButton().setEnabled(enabled);
     //   saveModelButton.setEnabled(enabled);
      //  getJModelList().setEnabled(enabled);
      //  setEditMode(false);


    }

  
    public EnterAsciiModel      getEditModel() {
        return editModel;
    }
    public void                 setEditModel(EnterAsciiModel editModel) {
        this.editModel = editModel;
    }


    public EnterAsciiModel getExampeModel(){
          InputStream is                =  getClass().getResourceAsStream(EXAMPLE_MODEL);
          String acode                  =  IO.readInputStreamToString(is);
          InputStream ps                =   getClass().getResourceAsStream(EXAMPLE_PARAMS );
          String params                 =   IO.readInputStreamToString(ps);
          EnterAsciiModel examplemodel  =   new  EnterAsciiModel(acode, params);

          return   examplemodel;

    }

  
 

 

   
}
