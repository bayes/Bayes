/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JSetServers.java
 *
 * Created on Jan 27, 2009, 7:06:46 PM
 */

package interfacebeans;
import bayes.ApplicationPreferences;
import javax.swing.*;
import java.util.*;
import utilities.Server;
import bayes.InstallationInfo;
import utilities.URLManager;
import utilities.DisplayText;

import java.awt.MouseInfo;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
/**
 *
 * @author apple
 */
public class JEditServers extends javax.swing.JDialog  {
    public static final boolean modal           =   false;
    public static final JFrame parent           =   null;
    private static  JEditServers instance       =   new JEditServers();
    private JEditServers() {
           super(parent, modal);
           initComponents();
    }

    public static JEditServers getInstance(){

        if (instance == null ){instance = new JEditServers();}
        return instance;
    }

 

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        removerButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        serverList = new javax.swing.JList();
        serverInfoPane = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        server_textField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        port_formattedText = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        account_textField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        user_textField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        email_textField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        queue_textField = new javax.swing.JFormattedTextField();
        javax.swing.JLabel max_cpu_label = new javax.swing.JLabel();
        max_cpu_formattedText = new javax.swing.JFormattedTextField();
        javax.swing.JLabel cpu_label = new javax.swing.JLabel();
        cpu_formattedText = new javax.swing.JFormattedTextField();
        password_checkBox = new javax.swing.JCheckBox();
        closeButton = new javax.swing.JButton();
        autoConfigSerevrButton = new javax.swing.JButton();
        serverInstallInfoButton = new javax.swing.JButton();

        FormListener formListener = new FormListener();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Setup Servers"); // NOI18N
        setResizable(false);
        addWindowListener(formListener);

        removerButton.setText("Remove server"); // NOI18N
        removerButton.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nRemove selected server.\n\n\n</font></p><html>\n\n\n"); // NOI18N
        removerButton.setName("removerButton"); // NOI18N
        removerButton.addActionListener(formListener);

        addButton.setText("Add server"); // NOI18N
        addButton.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nAdd new server.\n\n\n</font></p><html>\n\n\n"); // NOI18N
        addButton.setName("addButton"); // NOI18N
        addButton.addActionListener(formListener);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        serverList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        serverList.setName("serverList"); // NOI18N
        serverList.addListSelectionListener(formListener);
        jScrollPane1.setViewportView(serverList);

        serverInfoPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        serverInfoPane.setName("serverInfoPane"); // NOI18N
        serverInfoPane.setLayout(new java.awt.GridLayout(17, 1, 0, 1));

        jLabel8.setText("Server"); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N
        serverInfoPane.add(jLabel8);

        server_textField.setBackground(new java.awt.Color(192, 192, 192));
        server_textField.setEditable(false);
        server_textField.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nServer hostname.\n\n\n</font></p><html>"); // NOI18N
        server_textField.setName("server_textField"); // NOI18N
        serverInfoPane.add(server_textField);

        jLabel5.setText("Port"); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N
        serverInfoPane.add(jLabel5);

        port_formattedText.setBackground(new java.awt.Color(192, 192, 192));
        port_formattedText.setEditable(false);
        port_formattedText.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0"))));
        port_formattedText.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nServer port.\n\n\n</font></p><html>"); // NOI18N
        port_formattedText.setName("port_formattedText"); // NOI18N
        port_formattedText.addPropertyChangeListener(formListener);
        serverInfoPane.add(port_formattedText);

        jLabel2.setText("Remote Processing Account"); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        serverInfoPane.add(jLabel2);

        account_textField.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nAccount on server that is setup to<br>\nrun Bayesian Analysis Software.\n\n\n</font></p><html>\n\n"); // NOI18N
        account_textField.setName("account_textField"); // NOI18N
        account_textField.addKeyListener(formListener);
        serverInfoPane.add(account_textField);

        jLabel7.setText("User"); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N
        serverInfoPane.add(jLabel7);

        user_textField.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nCurrent user account (on local machine).\n\n\n</font></p><html>\n"); // NOI18N
        user_textField.setName("user_textField"); // NOI18N
        user_textField.addKeyListener(formListener);
        serverInfoPane.add(user_textField);

        jLabel4.setText("Email"); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N
        serverInfoPane.add(jLabel4);

        email_textField.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nEmail account that will be used<br>\nto send job status notifications.\n\n\n</font></p><html>\n\n\n"); // NOI18N
        email_textField.setInputVerifier(new  EmailInputVerifier());
        email_textField.setName("email_textField"); // NOI18N
        email_textField.addPropertyChangeListener(formListener);
        email_textField.addKeyListener(formListener);
        serverInfoPane.add(email_textField);

        jLabel6.setText("Queue"); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N
        serverInfoPane.add(jLabel6);

        queue_textField.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nQueue type for scheduling job on server.<br>\nQueue type varies from server  to server. <br>\nBy defautl queue is set to None.\n\n\n\n</font></p><html>\n\n\n"); // NOI18N
        queue_textField.setInputVerifier(new  QueueInputVerifier());
        queue_textField.setName("queue_textField"); // NOI18N
        queue_textField.addPropertyChangeListener(formListener);
        queue_textField.addKeyListener(formListener);
        serverInfoPane.add(queue_textField);

        max_cpu_label.setText("Maximum  CPUs"); // NOI18N
        max_cpu_label.setName("max_cpu_label"); // NOI18N
        serverInfoPane.add(max_cpu_label);

        max_cpu_formattedText.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat(""))));
        max_cpu_formattedText.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nNumber of CPUs for current server.<br>\nPress TAB button after new value is set<br>\nto save it.\n\n\n</font></p><html>\n\n\n"); // NOI18N
        max_cpu_formattedText.setName("max_cpu_formattedText"); // NOI18N
        max_cpu_formattedText.setValue(1);
        max_cpu_formattedText.addPropertyChangeListener(formListener);
        max_cpu_formattedText.addKeyListener(formListener);
        serverInfoPane.add(max_cpu_formattedText);

        cpu_label.setText("Use CPUs"); // NOI18N
        cpu_label.setName("cpu_label"); // NOI18N
        serverInfoPane.add(cpu_label);

        cpu_formattedText.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0"))));
        cpu_formattedText.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\n\nNumber of server CPUs that will be used <br>\nin Bayesian analysis calculations.<br>\nPress TAB button after new value is set<br>\nto save it.\n\n\n</font></p><html>\n\n</font></p><html>\n\n"); // NOI18N
        cpu_formattedText.setName("cpu_formattedText"); // NOI18N
        cpu_formattedText.setValue(1);
        cpu_formattedText.addPropertyChangeListener(formListener);
        cpu_formattedText.addKeyListener(formListener);
        serverInfoPane.add(cpu_formattedText);

        password_checkBox.setText("Password required "); // NOI18N
        password_checkBox.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nCheckbox that controls whether a password<br>\nverificaton is required on the server.\n\n\n</font></p><html>\n\n\n"); // NOI18N
        password_checkBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        password_checkBox.setName("password_checkBox"); // NOI18N
        password_checkBox.addActionListener(formListener);
        serverInfoPane.add(password_checkBox);

        closeButton.setFont(new java.awt.Font("Lucida Grande", 1, 18));
        closeButton.setText("OK"); // NOI18N
        closeButton.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\n\nSave server information <br>\nand close the window.\n\n\n</font></p><html>\n\n"); // NOI18N
        closeButton.setName("closeButton"); // NOI18N
        closeButton.addActionListener(formListener);

        autoConfigSerevrButton.setText("Auto Configure Server"); // NOI18N
        autoConfigSerevrButton.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nConfigure server in accordance with the server<br>\ninstallation settings retrieved over the network<br>\n\n\n\n</font></p><html>\n\n"); // NOI18N
        autoConfigSerevrButton.setName("autoConfigSerevrButton"); // NOI18N
        autoConfigSerevrButton.addActionListener(formListener);

        serverInstallInfoButton.setText("View Server Installation Info"); // NOI18N
        serverInstallInfoButton.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nRetrieve installation information<br>\nfor currently selected server. <br>\n\n\n</font></p><html>\n\n"); // NOI18N
        serverInstallInfoButton.setName("serverInstallInfoButton"); // NOI18N
        serverInstallInfoButton.addActionListener(formListener);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(addButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(removerButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE))
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(serverInfoPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 229, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(serverInstallInfoButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                            .add(autoConfigSerevrButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)))
                    .add(layout.createSequentialGroup()
                        .add(394, 394, 394)
                        .add(closeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 113, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        layout.linkSize(new java.awt.Component[] {autoConfigSerevrButton, serverInfoPane, serverInstallInfoButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.linkSize(new java.awt.Component[] {addButton, jScrollPane1, removerButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(serverInfoPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 479, Short.MAX_VALUE)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(removerButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(serverInstallInfoButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(autoConfigSerevrButton)))
                .add(17, 17, 17)
                .add(closeButton))
        );

        layout.linkSize(new java.awt.Component[] {addButton, removerButton}, org.jdesktop.layout.GroupLayout.VERTICAL);

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.KeyListener, java.awt.event.WindowListener, java.beans.PropertyChangeListener, javax.swing.event.ListSelectionListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == removerButton) {
                JEditServers.this.removerButtonActionPerformed(evt);
            }
            else if (evt.getSource() == addButton) {
                JEditServers.this.addButtonActionPerformed(evt);
            }
            else if (evt.getSource() == password_checkBox) {
                JEditServers.this.password_checkBoxActionPerformed(evt);
            }
            else if (evt.getSource() == closeButton) {
                JEditServers.this.closeButtonActionPerformed(evt);
            }
            else if (evt.getSource() == autoConfigSerevrButton) {
                JEditServers.this.autoConfigSerevrButtonActionPerformed(evt);
            }
            else if (evt.getSource() == serverInstallInfoButton) {
                JEditServers.this.serverInstallInfoButtonActionPerformed(evt);
            }
        }

        public void keyPressed(java.awt.event.KeyEvent evt) {
        }

        public void keyReleased(java.awt.event.KeyEvent evt) {
            if (evt.getSource() == account_textField) {
                JEditServers.this.account_textFieldKeyReleased(evt);
            }
            else if (evt.getSource() == user_textField) {
                JEditServers.this.user_textFieldKeyReleased(evt);
            }
            else if (evt.getSource() == email_textField) {
                JEditServers.this.email_textFieldKeyReleased(evt);
            }
            else if (evt.getSource() == queue_textField) {
                JEditServers.this.queue_textFieldKeyReleased(evt);
            }
            else if (evt.getSource() == max_cpu_formattedText) {
                JEditServers.this.max_cpu_formattedTextKeyReleased(evt);
            }
            else if (evt.getSource() == cpu_formattedText) {
                JEditServers.this.cpu_formattedTextKeyReleased(evt);
            }
        }

        public void keyTyped(java.awt.event.KeyEvent evt) {
            if (evt.getSource() == account_textField) {
                JEditServers.this.account_textFieldKeyTyped(evt);
            }
            else if (evt.getSource() == user_textField) {
                JEditServers.this.user_textFieldKeyTyped(evt);
            }
            else if (evt.getSource() == email_textField) {
                JEditServers.this.email_textFieldKeyTyped(evt);
            }
            else if (evt.getSource() == queue_textField) {
                JEditServers.this.queue_textFieldKeyTyped(evt);
            }
            else if (evt.getSource() == max_cpu_formattedText) {
                JEditServers.this.max_cpu_formattedTextKeyTyped(evt);
            }
            else if (evt.getSource() == cpu_formattedText) {
                JEditServers.this.cpu_formattedTextKeyTyped(evt);
            }
        }

        public void windowActivated(java.awt.event.WindowEvent evt) {
        }

        public void windowClosed(java.awt.event.WindowEvent evt) {
        }

        public void windowClosing(java.awt.event.WindowEvent evt) {
            if (evt.getSource() == JEditServers.this) {
                JEditServers.this.formWindowClosing(evt);
            }
        }

        public void windowDeactivated(java.awt.event.WindowEvent evt) {
        }

        public void windowDeiconified(java.awt.event.WindowEvent evt) {
        }

        public void windowIconified(java.awt.event.WindowEvent evt) {
        }

        public void windowOpened(java.awt.event.WindowEvent evt) {
        }

        public void propertyChange(java.beans.PropertyChangeEvent evt) {
            if (evt.getSource() == port_formattedText) {
                JEditServers.this.port_formattedTextfield_propertChanged(evt);
            }
            else if (evt.getSource() == email_textField) {
                JEditServers.this.email_textFieldPropertyChange(evt);
            }
            else if (evt.getSource() == queue_textField) {
                JEditServers.this.queue_textFieldPropertyChange(evt);
            }
            else if (evt.getSource() == max_cpu_formattedText) {
                JEditServers.this.max_cpu_formattedTextPropertyChange(evt);
            }
            else if (evt.getSource() == cpu_formattedText) {
                JEditServers.this.cpu_formattedTextPropertyChange(evt);
            }
        }

        public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
            if (evt.getSource() == serverList) {
                JEditServers.this.serverListValueChanged(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private void removerButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerButtonActionPerformed
        if(getServerList ().isSelectionEmpty () )  { return;}

        int index = getServerList ().getSelectedIndex();
       DefaultListModel model  = ( DefaultListModel)getServerList ().getModel();
       model.remove(index );


        int size = getServerList ().getModel().getSize();
        if (size > 0){
            getServerList ().setSelectedIndex (0);
        } 
        saveServersFromGUI();
        repaint ();
}//GEN-LAST:event_removerButtonActionPerformed
    private void addButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed

        JAddNewServer dialog = JAddNewServer.showDialog(getGuiServers());
        Server server        =  dialog.getServer();
        dialog.dispose();
        if (server == null) {return;}



        DefaultListModel model =  (DefaultListModel) getServerList ().getModel();
        model.addElement(server );
        getServerList ().setSelectedValue (server, true);

        autoConfigServer();

         saveServersFromGUI();
    }//GEN-LAST:event_addButtonActionPerformed
    private void serverListValueChanged (javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_serverListValueChanged
        if (evt.getValueIsAdjusting () == true) {
            return;
        }
        updateGUI ();
}//GEN-LAST:event_serverListValueChanged
    private void port_formattedTextfield_propertChanged (java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_port_formattedTextfield_propertChanged
       if (evt.getPropertyName().equalsIgnoreCase("value")){
        update ();
       }

}//GEN-LAST:event_port_formattedTextfield_propertChanged
    private void password_checkBoxActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_password_checkBoxActionPerformed
        update ();
}//GEN-LAST:event_password_checkBoxActionPerformed
    private void closeButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        close ();
}//GEN-LAST:event_closeButtonActionPerformed
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        close();
    }//GEN-LAST:event_formWindowClosing
    private void autoConfigSerevrButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoConfigSerevrButtonActionPerformed
        autoConfigServer();

    }//GEN-LAST:event_autoConfigSerevrButtonActionPerformed
    private void serverInstallInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverInstallInfoButtonActionPerformed
         displayServerInfo();
    }//GEN-LAST:event_serverInstallInfoButtonActionPerformed
    private void queue_textFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_queue_textFieldKeyTyped
       
    }//GEN-LAST:event_queue_textFieldKeyTyped
    private void email_textFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_email_textFieldKeyTyped
       update();
    }//GEN-LAST:event_email_textFieldKeyTyped
    private void user_textFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_user_textFieldKeyTyped
         update();
    }//GEN-LAST:event_user_textFieldKeyTyped
    private void account_textFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_account_textFieldKeyTyped
        update();
    }//GEN-LAST:event_account_textFieldKeyTyped
    private void max_cpu_formattedTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_max_cpu_formattedTextKeyTyped
   
    }//GEN-LAST:event_max_cpu_formattedTextKeyTyped
    private void cpu_formattedTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cpu_formattedTextKeyTyped
    }//GEN-LAST:event_cpu_formattedTextKeyTyped
    private void queue_textFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_queue_textFieldKeyReleased
        update();
    }//GEN-LAST:event_queue_textFieldKeyReleased
    private void account_textFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_account_textFieldKeyReleased
          update();
    }//GEN-LAST:event_account_textFieldKeyReleased
    private void user_textFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_user_textFieldKeyReleased
          update();
    }//GEN-LAST:event_user_textFieldKeyReleased
    private void email_textFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_email_textFieldKeyReleased
          update();
    }//GEN-LAST:event_email_textFieldKeyReleased
    private void max_cpu_formattedTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_max_cpu_formattedTextKeyReleased
    }//GEN-LAST:event_max_cpu_formattedTextKeyReleased
    private void cpu_formattedTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cpu_formattedTextKeyReleased
         
    }//GEN-LAST:event_cpu_formattedTextKeyReleased
    private void max_cpu_formattedTextPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_max_cpu_formattedTextPropertyChange
       if (evt.getPropertyName().equalsIgnoreCase("value")){
            updateMaxCPU();
       }
    }//GEN-LAST:event_max_cpu_formattedTextPropertyChange
    private void cpu_formattedTextPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_cpu_formattedTextPropertyChange
         if (evt.getPropertyName().equalsIgnoreCase("value")){
                updateCPU();
       }
    }//GEN-LAST:event_cpu_formattedTextPropertyChange
    private void queue_textFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_queue_textFieldPropertyChange
         if (evt.getPropertyName().equalsIgnoreCase("value")){update();}
    }//GEN-LAST:event_queue_textFieldPropertyChange
    private void email_textFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_email_textFieldPropertyChange
          if (evt.getPropertyName().equalsIgnoreCase("value")){update();}
    }//GEN-LAST:event_email_textFieldPropertyChange
  
    public void close() {
         saveServersFromGUI();
         saveCurrentServerFromGUI();
        
         JServer.getInstance().updateGuiServers();

         this.setVisible(false);
    }
    private void saveServersFromGUI(){
        List<Server> servers       =  getGuiServers();
        ApplicationPreferences.saveAsServers(servers);
    }
    private void saveCurrentServerFromGUI(){
         Server         server      =  (Server)getServerList ().getSelectedValue();
          ApplicationPreferences.saveAsCurrentServer(server);
    }

    private void updateGUI(){
        if (getServerList().isSelectionEmpty() )  { return;}
            setIgnoreEvent (true);
            Server server = getSelectedServer();

            getServerTextField ()   .setText(server.getName());
            getAccount_textField()  .setText(server.getAccount());
            getUserTextField().setText(server.getUser());
            getEmail_textField()    .setText(server.getEmail());
            getPort_formattedText() .setValue(server.getPort());
            getMax_cpu_formattedText().setValue(server.getMaxCpu());
            getCpuformattedTextField().setValue(server.getCpu());
            getPassword_checkBox()  .setSelected(server.isPassword());
            getQueueTextField().setText(server.getQueue());
            setIgnoreEvent (false);
    }
  

    private void updateMaxCPU(){
        try{
            int max    =   getGuiMaxCPU();
            int cpu    =   getGuiCPU();
            if (cpu == max) {return;}
            if (cpu > max ){  getCpuformattedTextField().setValue(max);}
            update ();
        }catch (Exception e){e.printStackTrace();}
    }
     private void updateCPU(){
         try{
           int val     =  getGuiCPU();
            int max     =  getGuiMaxCPU();
            int min     =  1;

            if      (val  < min)    {val = min;}
            else if (val > max){val = max;}
            getCpuformattedTextField ().setValue (val);


            update ();

         }catch (Exception e){e.printStackTrace();}
            
    }

    private void update(){
            Server server       = (Server)getServerList().getSelectedValue();
            update(server);
        
    }
    private void update( Server server ){
            if (server == null  )   {return;}
            if ( isIgnoreEvent ()) {return;}
            if (getServerList().isSelectionEmpty() ) { return;}

            String email        =  getEmail_textField().getText();
            if (email != null || email.length() < 3){email           = Server.NOEMAIL;}

            server.setAccount   (this.getGuiAccount());
            server.setUser      (this.getGuiUser());
            server.setEmail     (this.getGuiEmail());
            server.setPort      (this.getGuiPort());
            server.setMaxCpu    (this.getGuiMaxCPU());
            server.setCpu       (this.getGuiCPU());
            server.setIsPassword(this.getGuiIsPassword());
            server.setQueue     (this.getGuiQueue());
            //JServerPasswordDialog.getInstance().reset();
    }


    private void autoConfigServer(){
       Server server =  getSelectedServer();
       if (server  == null) {return;}

      InstallationInfo ii = URLManager.getInstallationInfoForServer(server);
      if (ii.isLoaded() == false){
        String message = String.format("Failed to auto configure server\n" +
                                        "%s.\n", server.getName())   ;
          DisplayText.popupErrorMessage(message);
          return;
      }

         
          server.setUser            ( getUserTextField().getText());
          server.setAccount         (ii.getAccount());
          server.setMaxCpu          (ii.getCpu());
          server.setCpu             (ii.getCpu());
          server.setIsPassword      (ii.isPassword());
          server.setFortanCompiler  (ii.isFortanCompiler());
          server.setcCompiler       (ii.isCCompiler());
          server.setQueue           (ii.getQueue());

          updateGUI();
    }
    private void displayServerInfo(){
       Server server =  getSelectedServer();

       StringBuilder sb  = new StringBuilder();
       sb.append("NOTIFICATION EMAIL          =  "+server.getEmail());
       URLManager. displayServerInfo(server, sb.toString());
    }

    public void updateServers(){
           DefaultListModel model = new DefaultListModel ();

           for (Server server : getServers()) {
                model.addElement(server);
          }

          getServerList ().setModel( model );
          getServerList ().setSelectedValue(getServer(), true);

          JServerPasswordDialog.getInstance().resetIfNewServer(getServer().getName());
    }

   public static JEditServers showDialog(){
        JEditServers sereverEdit =  JEditServers.getInstance();
        sereverEdit.updateServers();

        Server curSer           = JServer.getInstance().getServer();
        if (curSer!= null){sereverEdit.setSelectedServer( curSer);}
    

        
        sereverEdit.setLocation(MouseInfo.getPointerInfo().getLocation());

        sereverEdit.setVisible(true);
         return sereverEdit;
    }


   public List<Server> getGuiServers(){
         ArrayList<Server> servers  = new ArrayList<Server> () ;
         ListModel model        =   getServerList ().getModel();

         for (int i = 0; i < model.getSize(); i++) {
           Server server = (Server) model.getElementAt(i);
           servers.add(server);

       }

         return servers;

   }

    public Server getServer(){
        return ApplicationPreferences.getCurrentServer();
    }
    public List<Server> getServers(){
        return ApplicationPreferences. getServers();
    }

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                 JEditServers dialog = showDialog();
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField account_textField;
    private javax.swing.JButton addButton;
    private javax.swing.JButton autoConfigSerevrButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JFormattedTextField cpu_formattedText;
    private javax.swing.JTextField email_textField;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JFormattedTextField max_cpu_formattedText;
    private javax.swing.JCheckBox password_checkBox;
    private javax.swing.JFormattedTextField port_formattedText;
    private javax.swing.JTextField queue_textField;
    private javax.swing.JButton removerButton;
    private javax.swing.JPanel serverInfoPane;
    private javax.swing.JButton serverInstallInfoButton;
    private javax.swing.JList serverList;
    public javax.swing.JTextField server_textField;
    private javax.swing.JTextField user_textField;
    // End of variables declaration//GEN-END:variables
    private static final long serialVersionUID = 7526422295622576147L;
    protected boolean ignoreEvent        = false;


      // *************** GETTERS AND SETTERS **********************//
    public Server                           getSelectedServer(){return (Server)getServerList().getSelectedValue();}
    public void                             setSelectedServer(Server sr){
        getServerList().setSelectedValue(sr, true);
    }
    public boolean                          isIgnoreEvent () {
        return ignoreEvent;
    }
    public void                             setIgnoreEvent ( boolean ignoreEvent ) {
        this.ignoreEvent = ignoreEvent;
    }

    public javax.swing.JTextField           getAccount_textField () {
        return account_textField;
    }
    public javax.swing.JTextField           getEmail_textField () {
        return email_textField;
    }
    public javax.swing.JFormattedTextField  getMax_cpu_formattedText () {
        return max_cpu_formattedText;
    }
    public javax.swing.JCheckBox            getPassword_checkBox () {
        return password_checkBox;
    }
    public javax.swing.JFormattedTextField  getPort_formattedText () {
        return port_formattedText;
    }

    public javax.swing.JList                getServerList () {
        return serverList;
    }
    public javax.swing.JTextField           getServerTextField () {
        return server_textField;
    }
    public javax.swing.JFormattedTextField  getCpuformattedTextField () {
        return cpu_formattedText;
    }
    public javax.swing.JTextField           getUserTextField () {
        return user_textField;
    }
    public javax.swing.JTextField           getQueueTextField () {
        return queue_textField;
    }


    public String   getGuiAccount(){
          String out = getAccount_textField ().getText();
          return out;
    }
    public String   getGuiEmail(){
          String out =  getEmail_textField ().getText();
          return out;
    }
    public String   getGuiUser(){
          String out =  getUserTextField ().getText();
          return out;
    }
    public String   getGuiQueue(){
          String out =  getQueueTextField ().getText();
          return out;
    }
    public int      getGuiCPU(){

          int out =  ((Number)getCpuformattedTextField ().getValue()).intValue();
          return out;
    }
    public int      getGuiMaxCPU(){
          int out =  ((Number)getMax_cpu_formattedText ().getValue()).intValue();
          return out;
    }
    public int      getGuiPort(){
          int out =  ((Number)getPort_formattedText ().getValue()).intValue();
          return out;
    }
    public  boolean getGuiIsPassword(){
          boolean out =  getPassword_checkBox ().isSelected();
          return  out;
    }

    public class EmailInputVerifier extends InputVerifier {

    @Override
     public boolean verify(JComponent input) {
        boolean verify = false;

        if (input instanceof JTextField) {
               JTextField c  = (JTextField)input;
               String text = c.getText();

               if (text.equals( Server.NOEMAIL)){return true;}
               if (text.contains("@")){return true;}
               else {
                    c.setText(Server.NOEMAIL);
                    return false;
               }
           
        }
        return verify;
    }

}
    public class QueueInputVerifier extends InputVerifier {

    @Override
     public boolean verify(JComponent input) {
        boolean verify = false;
        if (input instanceof JTextField) {
               JTextField c  = (JTextField)input;
               String text = c.getText();

               if (text.equals( Server.DEFAULT_QUEUE)){return true;}
               else if ( isValidQuewueName(text) == false){
                    c.setText(Server.DEFAULT_QUEUE);
                    return false;
               }
               else {
                return true;
               }

        }
        return verify;
    }
     public  boolean isValidQuewueName(String name ){

        Pattern p = Pattern.compile("\\w+");

        Matcher m = p.matcher(name );
        boolean b = m.matches();

        return  b;
  }

}
}
