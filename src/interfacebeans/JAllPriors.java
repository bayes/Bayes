/*
 * JAllPriors.java
 *
 * Created on April 4, 2008, 2:46 PM
 */

package interfacebeans;

import java.awt.*;
import javax.swing.*;
import java.util.*;

import org.jfree.chart.*;
import org.jfree.chart.plot.*;
import org.jfree.chart.axis.*;
import org.jfree.data.xy.*;
import org.jfree.chart.renderer.xy.*;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.ui.RectangleInsets;

import  java.beans.PropertyChangeListener;
import  javax.swing.text.DefaultFormatterFactory;
import  javax.swing.text.NumberFormatter;
import  java.text.DecimalFormat;

import java.util.Vector;
import fid.FidViewer;
import fid.Units;
import applications.model.*;
import bayes.ParameterPrior;
import bayes.BayesManager;
import static java.lang.Math.*;
import static bayes.Enums.*;
import bayes.PackageManager;
import java.awt.event.*;
import java.awt.geom.Ellipse2D;
import bayes.ParameterPrior.ORDER_TYPE;
import bayes.ParameterPrior.PRIOR_TYPE;
import bayes.ParameterPrior.PARAMETER_TYPE;
import utilities.PanelUtility;


/**
 *
 * @author  apple
 */
public class JAllPriors extends javax.swing.JPanel 
                implements PropertyChangeListener, bayes.ApplicationConstants, Viewable
{
  private static JAllPriors instance                = null;
  private static final long serialVersionUID        = 7626472295622576147L;

   
  public static JAllPriors  getInstance() {
      if(instance == null) {
         instance = new JAllPriors();
      }
      return instance;
   }
  public static boolean     isDisplayed(){
          return getInstance().isShowing();
    }
  public static void        updatePriors( java.util.List <ParameterPrior> priors){
          getInstance().setParams(priors);
    }

    /** Creates new form JAllPriors */
    private JAllPriors () {
        initComponents ();
        updateGUI ();
        BayesManager.pcs.addPropertyChangeListener(this);
    }
    public static void reset () {
         if (instance == null) {return;}
         PropertyChangeListener[]  lis =   instance.getPropertyChangeListeners();
         for (PropertyChangeListener listener : lis) {
             instance.removePropertyChangeListener(listener);
        }
        instance = null;
    }

    public void resetToEmpty(){
           Vector <ParameterPrior> parameters  = new Vector <ParameterPrior>();
            setParams(parameters);
    }
    
    static   {
        NumberFormatter nf      =   new NumberFormatter(new DecimalFormat("0.0##E0"));
        scienceDecimalFormat    =   new DefaultFormatterFactory(nf);

    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        ParameterPrior curParam = (params != null && params.size() > 0)
        ?params.get(0) : new ParameterPrior();
        priorOrder_buttonGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        horiz_splitPane = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane = new javax.swing.JScrollPane();
        paramsName_list = new javax.swing.JList();
        vert_splitPane = new javax.swing.JSplitPane();
        plot = chartPanel;
        tool_pane = new javax.swing.JPanel();
        PriorTypePane = new javax.swing.JPanel();
        comboBox_PriorType = new JComboBox(PRIOR_TYPE.values());
        NotOrdered = new JRadioButton();
        LowHigh = new JRadioButton();
        HighLow = new JRadioButton();
        boundPane = new javax.swing.JPanel();
        lowLabel = new javax.swing.JLabel();
        lowField = new JFormattedTextField(scienceDecimalFormat);
        meanLabel = new javax.swing.JLabel();
        meanField = new JFormattedTextField(scienceDecimalFormat);
        highLabel = new javax.swing.JLabel();
        highField = new JFormattedTextField(scienceDecimalFormat);
        ;
        sdevLabel = new javax.swing.JLabel();
        sdevField = new JFormattedTextField(scienceDecimalFormat);
        messageLabel = new javax.swing.JLabel();

        FormListener formListener = new FormListener();

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 24));
        jLabel1.setText("Priors Viewer is DIsabled");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 715, Short.MAX_VALUE)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel1Layout.createSequentialGroup()
                    .add(49, 49, 49)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 562, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(104, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 325, Short.MAX_VALUE)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel1Layout.createSequentialGroup()
                    .add(59, 59, 59)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 166, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(100, Short.MAX_VALUE)))
        );

        setPreferredSize(new java.awt.Dimension(400, 400));
        setLayout(new java.awt.BorderLayout());

        horiz_splitPane.setDividerLocation(140);
        horiz_splitPane.setContinuousLayout(true);
        horiz_splitPane.setOneTouchExpandable(true);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Parameters", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Lucida Grande", 1, 14))); // NOI18N
        jScrollPane.setAutoscrolls(true);
        jScrollPane.setInheritsPopupMenu(true);
        jScrollPane.setMaximumSize(new java.awt.Dimension(250, 32767));
        jScrollPane.setMinimumSize(new java.awt.Dimension(0, 23));
        jScrollPane.setPreferredSize(new java.awt.Dimension(150, 130));

        paramsName_list.setListData((Vector<ParameterPrior> )params);
        paramsName_list.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        paramsName_list.setCellRenderer(new JAllPriorsCellRenderer());
        paramsName_list.setDragEnabled(true);
        paramsName_list.addMouseListener(formListener);
        paramsName_list.addListSelectionListener(formListener);
        jScrollPane.setViewportView(paramsName_list);

        jPanel2.add(jScrollPane, java.awt.BorderLayout.CENTER);

        horiz_splitPane.setLeftComponent(jPanel2);

        vert_splitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        vert_splitPane.setContinuousLayout(true);
        vert_splitPane.setOneTouchExpandable(true);

        plot.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.gray, java.awt.Color.gray));
        plot.setLayout(new javax.swing.BoxLayout(plot, javax.swing.BoxLayout.LINE_AXIS));
        vert_splitPane.setBottomComponent(plot);

        PriorTypePane.setAutoscrolls(true);
        PriorTypePane.setMinimumSize(new java.awt.Dimension(70, 50));
        PriorTypePane.setPreferredSize(new java.awt.Dimension(150, 100));
        PriorTypePane.setLayout(new java.awt.GridLayout(4, 0, 0, 1));

        setPriorType(curParam.priorType);
        comboBox_PriorType.setDoubleBuffered(true);
        comboBox_PriorType.setRenderer(new PriorTypeCellRenderer());
        comboBox_PriorType.addItemListener(formListener);
        comboBox_PriorType.addActionListener(formListener);
        PriorTypePane.add(comboBox_PriorType);

        priorOrder_buttonGroup.add(NotOrdered);
        NotOrdered.setText("Not Ordered");
        NotOrdered.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rb.gif"))); // NOI18N
        NotOrdered.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rb.gif"))); // NOI18N
        NotOrdered.setMargin(new java.awt.Insets(0, 0, 0, 0));
        NotOrdered.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbp.gif"))); // NOI18N
        NotOrdered.setRolloverEnabled(true);
        NotOrdered.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbr.gif"))); // NOI18N
        NotOrdered.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbrs.gif"))); // NOI18N
        NotOrdered.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbs.gif"))); // NOI18N
        NotOrdered.addActionListener(formListener);
        PriorTypePane.add(NotOrdered);

        priorOrder_buttonGroup.add(LowHigh);
        LowHigh.setText("LowHigh");
        LowHigh.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rb.gif"))); // NOI18N
        LowHigh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rb.gif"))); // NOI18N
        LowHigh.setMargin(new java.awt.Insets(0, 0, 0, 0));
        LowHigh.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbp.gif"))); // NOI18N
        LowHigh.setRolloverEnabled(true);
        LowHigh.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbr.gif"))); // NOI18N
        LowHigh.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbrs.gif"))); // NOI18N
        LowHigh.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbs.gif"))); // NOI18N
        LowHigh.addActionListener(formListener);
        PriorTypePane.add(LowHigh);

        priorOrder_buttonGroup.add(HighLow);
        HighLow.setText("HighLow");
        HighLow.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rb.gif"))); // NOI18N
        HighLow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rb.gif"))); // NOI18N
        HighLow.setMargin(new java.awt.Insets(0, 0, 0, 0));
        HighLow.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbp.gif"))); // NOI18N
        HighLow.setRolloverEnabled(true);
        HighLow.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbr.gif"))); // NOI18N
        HighLow.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbrs.gif"))); // NOI18N
        HighLow.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbs.gif"))); // NOI18N
        HighLow.addActionListener(formListener);
        PriorTypePane.add(HighLow);

        boundPane.setFocusCycleRoot(true);
        boundPane.setMinimumSize(new java.awt.Dimension(70, 50));
        boundPane.setPreferredSize(new java.awt.Dimension(150, 100));
        boundPane.setVerifyInputWhenFocusTarget(false);
        boundPane.setLayout(new java.awt.GridBagLayout());

        lowLabel.setText("LOW ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 1.0;
        boundPane.add(lowLabel, gridBagConstraints);

        lowField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        lowField.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.weightx = 1.3;
        gridBagConstraints.weighty = 1.0;
        boundPane.add(lowField, gridBagConstraints);

        meanLabel.setText("MEAN");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 1.0;
        boundPane.add(meanLabel, gridBagConstraints);

        meanField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        meanField.addPropertyChangeListener(formListener);
        meanField.addKeyListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.weightx = 1.3;
        gridBagConstraints.weighty = 1.0;
        boundPane.add(meanField, gridBagConstraints);

        highLabel.setText("HIGH");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        boundPane.add(highLabel, gridBagConstraints);

        highField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        highField.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.weightx = 1.3;
        gridBagConstraints.weighty = 1.0;
        boundPane.add(highField, gridBagConstraints);

        sdevLabel.setText("SDEV");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 1.0;
        boundPane.add(sdevLabel, gridBagConstraints);

        sdevField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        sdevField.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.weightx = 1.3;
        gridBagConstraints.weighty = 1.0;
        boundPane.add(sdevField, gridBagConstraints);

        messageLabel.setFont(new java.awt.Font("Dialog", 1, 14));
        messageLabel.setForeground(new java.awt.Color(255, 51, 51));

        org.jdesktop.layout.GroupLayout tool_paneLayout = new org.jdesktop.layout.GroupLayout(tool_pane);
        tool_pane.setLayout(tool_paneLayout);
        tool_paneLayout.setHorizontalGroup(
            tool_paneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(tool_paneLayout.createSequentialGroup()
                .addContainerGap()
                .add(tool_paneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, messageLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                    .add(tool_paneLayout.createSequentialGroup()
                        .add(PriorTypePane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 111, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(boundPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 145, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        tool_paneLayout.setVerticalGroup(
            tool_paneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(tool_paneLayout.createSequentialGroup()
                .add(20, 20, 20)
                .add(tool_paneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(PriorTypePane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(boundPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(messageLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        tool_paneLayout.linkSize(new java.awt.Component[] {PriorTypePane, boundPane}, org.jdesktop.layout.GroupLayout.VERTICAL);

        vert_splitPane.setLeftComponent(tool_pane);

        horiz_splitPane.setRightComponent(vert_splitPane);

        add(horiz_splitPane, java.awt.BorderLayout.CENTER);
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.ItemListener, java.awt.event.KeyListener, java.awt.event.MouseListener, java.beans.PropertyChangeListener, javax.swing.event.ListSelectionListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == comboBox_PriorType) {
                JAllPriors.this.comboBox_PriorTypeActionPerformed(evt);
            }
            else if (evt.getSource() == NotOrdered) {
                JAllPriors.this.NotOrderedActionPerformed(evt);
            }
            else if (evt.getSource() == LowHigh) {
                JAllPriors.this.LowHighActionPerformed(evt);
            }
            else if (evt.getSource() == HighLow) {
                JAllPriors.this.HighLowActionPerformed(evt);
            }
        }

        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            if (evt.getSource() == comboBox_PriorType) {
                JAllPriors.this.comboBox_PriorTypeItemStateChanged(evt);
            }
        }

        public void keyPressed(java.awt.event.KeyEvent evt) {
        }

        public void keyReleased(java.awt.event.KeyEvent evt) {
        }

        public void keyTyped(java.awt.event.KeyEvent evt) {
            if (evt.getSource() == meanField) {
                JAllPriors.this.meanFieldKeyTyped(evt);
            }
        }

        public void mouseClicked(java.awt.event.MouseEvent evt) {
        }

        public void mouseEntered(java.awt.event.MouseEvent evt) {
        }

        public void mouseExited(java.awt.event.MouseEvent evt) {
        }

        public void mousePressed(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == paramsName_list) {
                JAllPriors.this.paramsName_listMousePressed(evt);
            }
        }

        public void mouseReleased(java.awt.event.MouseEvent evt) {
        }

        public void propertyChange(java.beans.PropertyChangeEvent evt) {
            if (evt.getSource() == lowField) {
                JAllPriors.this.textFieldChanged(evt);
            }
            else if (evt.getSource() == meanField) {
                JAllPriors.this.textFieldChanged(evt);
            }
            else if (evt.getSource() == highField) {
                JAllPriors.this.textFieldChanged(evt);
            }
            else if (evt.getSource() == sdevField) {
                JAllPriors.this.textFieldChanged(evt);
            }
        }

        public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
            if (evt.getSource() == paramsName_list) {
                JAllPriors.this.paramsName_listValueChanged(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents
    public void propertyChange ( java.beans.PropertyChangeEvent evt ) {


       if(evt.getPropertyName().equals(BayesManager.FID_UNITS_ARE_CHANGED)  ){
             UNITS newUnits  = (UNITS)evt.getNewValue();
             UNITS oldUnits  = (UNITS)evt.getOldValue();
             updateFreqPriorsWhenUnitsChanged(oldUnits, newUnits);
             updateGUI ();
             return;
      }
      else if (evt.getPropertyName().equals(bayes.BayesManager.JRUN_JOB_START)){
           // setActive(false);
      }

      else if (evt.getPropertyName().equals(bayes.BayesManager.JRUN_JOB_END)){
           // setActive(true);
      }

      else if (evt.getPropertyName().equals(bayes.BayesManager.JRUN_JOB_CANCELED)){
           // setActive(true);
      }

    }
    public Component getMainDisplay(){ return this.plot;}
    
    private void paramsName_listValueChanged (javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_paramsName_listValueChanged
        if (evt.getValueIsAdjusting()  == true ){return;}
        ignoreEvents = true;
            updateGUI() ;
        ignoreEvents = false;
        
        ParameterPrior prior = this.getSelectedParameter();
        if (prior != null){
            this.firePropertyChange(PARAMETER_IS_SELECTED ,null,prior);
        }
        
}//GEN-LAST:event_paramsName_listValueChanged
    private void textFieldChanged (java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_textFieldChanged
        if (ignoreEvents ) {return;}
        
        ParameterPrior curParam = getSelectedParameter();
        if (curParam == null) { return;}
        
        if (evt.getPropertyName().equalsIgnoreCase("value") == false ) {  return;}
        
        else if (evt.getSource()==getHighField()){
            
            curParam.high = ((Number) getHighField().getValue()).doubleValue ();
        }
        else if (evt.getSource()==getLowField()){
            curParam.low = ((Number) getLowField().getValue()).doubleValue ();
        }
        else if (evt.getSource()==getMeanField()){
            curParam.mean = ((Number) getMeanField().getValue()).doubleValue ();
        }
       
        else if(evt.getSource()==getSdevField()){
            curParam.sdev = ((Number) getSdevField().getValue()).doubleValue ();
        }
        
        else if (curParam.getParameterType() == PARAMETER_TYPE.Frequency){
           this.firePropertyChange (BayesManager.FREQ_PARAM_MODIFIED, null,"Frequency paramter is modified in JAllPriors");
        }
        else if (curParam.isCouplingConstant ==  true){
           FidViewer.getInstance().updatePlot();
        }
        update();
        
        // reset package.
        resetModel();
    }//GEN-LAST:event_textFieldChanged
    private void comboBox_PriorTypeActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_PriorTypeActionPerformed
       /* if (ignoreEvents ) {return;}
        ignoreEvents = true;
     
        ParameterPrior curParam = getSelectedParameter();
        if (curParam == null)  { return;}
        
        priorType               =   getGuiPriorType();
        curParam.priorType      =   priorType ;
        
        if (priorType  == PRIOR_TYPE.FIXED_PARAMETER ){
            curParam.low       =    curParam.mean;
            curParam.high      =    curParam.mean;
            getLowField().setValue       ( curParam.mean);
            getHighField().setValue      ( curParam.mean);
        } 
        
        update ();
        ignoreEvents = false;
        
        // reset package.
        resetModel();
         * 
         */
    }//GEN-LAST:event_comboBox_PriorTypeActionPerformed
    private void NotOrderedActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NotOrderedActionPerformed
        ParameterPrior curParam = getSelectedParameter();
        if (curParam == null) { return;}
        curParam.order = ORDER_TYPE.NotOrdered;
        
      // reset package.
        resetModel();
    }//GEN-LAST:event_NotOrderedActionPerformed
    private void LowHighActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LowHighActionPerformed
        ParameterPrior curParam = getSelectedParameter();
        if (curParam == null){  return;}
        curParam.order = ORDER_TYPE.LowHigh;
        
        
        // reset package.
        resetModel();
    }//GEN-LAST:event_LowHighActionPerformed
    private void HighLowActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HighLowActionPerformed
        ParameterPrior curParam = getSelectedParameter();
        if (curParam == null) { return;}
        curParam.order = ORDER_TYPE.HighLow;
       
        // reset package. 1) true - don't delete data.  2) false  - dont switch display
        resetModel();
        
    }//GEN-LAST:event_HighLowActionPerformed
    private void paramsName_listMousePressed (java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paramsName_listMousePressed
     if(!SwingUtilities.isRightMouseButton (evt) )  { return;}
      final ParameterPrior prm    = (ParameterPrior)getParametersJList().getSelectedValue();
      boolean isDelitable   = isDeletableParameter(prm);

      if (isAllowDeleteParameters()  && isDelitable ){
      JPopupMenu popup        = new JPopupMenu ();

        JMenuItem delteMenuItem   = new JMenuItem ("Delete");
        delteMenuItem.addActionListener (new ActionListener (){
            public void actionPerformed (ActionEvent e) {
               removeParameter(prm);
            }
        });
        popup.add( delteMenuItem);
        popup.show (evt.getComponent (), evt.getX (), evt.getY ());
      }
    }//GEN-LAST:event_paramsName_listMousePressed
    private void meanFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_meanFieldKeyTyped
        if (ignoreEvents ) {return;}
        PRIOR_TYPE  type           =   getGuiPriorType();
       

        if ( type  == PRIOR_TYPE.FIXED_PARAMETER ){
            ParameterPrior curPr        =   getSelectedParameter();

             
            if (curPr != null){
                double curValue             =   curPr.mean;
                double value                =   getGuiMeanValue();
                    curPr.low               =    value ;
                    curPr.mean              =    value ;
                    curPr.high              =    value ;
                    getLowField().setValue       ( value);
                    getHighField().setValue      ( value);

            }
            
        }

    }//GEN-LAST:event_meanFieldKeyTyped

    private void comboBox_PriorTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBox_PriorTypeItemStateChanged
        if (ignoreEvents ) {return;}
        ignoreEvents = true;
     
        if (evt.getStateChange() == ItemEvent.DESELECTED){
             prevParam = getSelectedParameter();
             ignoreEvents = false;
             return;
        }
        else if (evt.getStateChange() == ItemEvent.SELECTED){
             ParameterPrior curParam = getSelectedParameter();
            if (curParam == null)  { return;}

            priorType               =   getGuiPriorType();
            curParam.priorType      =   priorType ;

            if (priorType  == PRIOR_TYPE.FIXED_PARAMETER ){
                curParam.low       =    curParam.mean;
                curParam.high      =    curParam.mean;
                getLowField().setValue       ( curParam.mean);
                getHighField().setValue      ( curParam.mean);
            } 

            update ();
            ignoreEvents = false;

            // reset package.
            resetModel();
            return;
        }
        
       
    }//GEN-LAST:event_comboBox_PriorTypeItemStateChanged

    public void resetModel(){
         Model model         = PackageManager.getCurrentApplication();
         if (model != null){ model.clearPreviousRun(); }
         AllViewers.showPriorsViewer();
    }

    public void updateReferenceFrequency ( float refFreqInHertz ){
        if ( isUpdateFreqPriors() == true){
                updateFreqPriorsWhenRefFrequencyChanged(refFreqInHertz);
                updateGUI ();
        }
    }
  //********** update and check for constraints ************//
    public  void  update (){
         setMessage("");
         setConstraints();
         updatePlot();
    }
    public  void  updateGUI (){
        ParameterPrior curParam = getSelectedParameter();
        if (curParam == null) { return;}

        showPriorSetters(true);

        setPriorType ( curParam.priorType );
        
        
        if (priorType  == PRIOR_TYPE.FIXED_PARAMETER ){
            curParam.low       =    curParam.mean;
            curParam.high      =    curParam.mean;
            getLowField().setValue       ( curParam.mean);
            getHighField().setValue      ( curParam.mean);
        } 
        
        
        getHighField().setValue(curParam.high);
        getLowField().setValue( curParam.low);
        getMeanField().setValue(curParam.mean);
        getSdevField().setValue(curParam.sdev);
     
         switch (curParam.order){ 
             case LowHigh       :      getLowHigh().setSelected(true);       break;
             case HighLow       :      getHighLow().setSelected(true);       break;
             case NotOrdered    :      getNotOrdered().setSelected(true);    break;
               
        }



        if (isShowAmplitudePriors()== false && curParam.getParameterType()  == PARAMETER_TYPE.Amplitude ){
            String message  = String.format("%s will be marginalized. Can not be modified" ,curParam.name);
            setMessage(message);
             showPriorSetters(false);
        }
        else {
            setMessage("");
            setConstraints();
        }

        
        updatePlot();
 
    }


    private void  updatePlot(){
        ParameterPrior curParam = getSelectedParameter();
        if (curParam == null) { return;}

        // remove old series
        XYSeries sr = makeSeries(curParam);
        xydataset.removeAllSeries ();


       
        XYPlot plot         = chartPanel.getChart().getXYPlot();
        NumberAxis x_axis   = (NumberAxis)plot.getDomainAxis();
        NumberAxis y_axis   = (NumberAxis)plot.getRangeAxis();
        x_axis.setAutoRangeIncludesZero(false);
        y_axis.setAutoRange(true);
        x_axis.setAutoRange(true);
        setRendererer();
      
        
        xydataset.addSeries (sr);
      
       
        x_axis.setLabel (curParam.name);
        y_axis.setLabel (String.format ("P(%s|I)",  curParam.name));

        int numberOfTicks       =   1;
        switch(curParam.priorType){
            case FIXED_PARAMETER: numberOfTicks       =   1;break;
            case UNIFORM        : numberOfTicks       =   10;break;
            default             : numberOfTicks       =   10;break;

        }
        /*
        if (curParam.priorType  == PRIOR_TYPE.UNIFORM){
            double upper        =   Math.max(curParam.high, curParam.low);
            double lower        =   Math.min(curParam.high, curParam.low);
          //  Range range         =   new Range(lower, upper);
          //  x_axis.setRange(range);
        }
        */
        double xrange                   =    x_axis.getRange().getLength();
        if ( xrange > 1000000){
             DecimalFormat df               = new DecimalFormat ("0.0#E0");
             double        size             =  x_axis.getRange().getLength()/numberOfTicks  ;
             NumberTickUnit ntu             = new  NumberTickUnit (size,df);
             x_axis.setTickUnit(ntu);
             x_axis.setNumberFormatOverride(df);
        }
        else if ( xrange < 0.01){
             DecimalFormat df     = new DecimalFormat ("0.0E0#");
             df.setMinimumFractionDigits(1);
             df.setMinimumIntegerDigits(1);
             //df.setMaximumFractionDigits(12);

           
             double        size         =  x_axis.getRange().getLength()/numberOfTicks  ;
             NumberTickUnit ntu     = new  NumberTickUnit (size,df);
             x_axis.setTickUnit(ntu);
             x_axis.setNumberFormatOverride(df);
        }
        else {
             DecimalFormat df               = new DecimalFormat ("0.0E0#");
             double        size             =  x_axis.getRange().getLength()/numberOfTicks  ;
             NumberTickUnit ntu             = new  NumberTickUnit (size,df);
             x_axis.setTickUnit(ntu);
             x_axis.setNumberFormatOverride(df);
        }



        

        if (isShowAmplitudePriors() == false && curParam.getParameterType()  == PARAMETER_TYPE.Amplitude ){
            x_axis.setTickLabelsVisible(false);
            y_axis.setTickLabelsVisible(false);
        }
        else {
             x_axis.setTickLabelsVisible(true);
             y_axis.setTickLabelsVisible(true);
        }

    }
    public  void  setRendererer(){
         ParameterPrior p = getSelectedParameter();
         if ( chartPanel == null){return;}

         if (p == null) {
             setGeneralRenderer();
         }
         else if (p.priorType == PRIOR_TYPE.FIXED_PARAMETER ){
            setFixedParameterRenderer();
         }
         else{
              setGeneralRenderer();
         }
    }
    public  void  setGeneralRenderer(){
        JFreeChart  chart               = chartPanel.getChart ();
        XYPlot plot                     = chart.getXYPlot();
        XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot.getRenderer();
        renderer.setSeriesStroke(0, new BasicStroke(3 ));
        renderer.setSeriesPaint(0, Color.RED);
        renderer.setSeriesShapesFilled(0,false);
         renderer.setBaseShapesVisible(false);
        renderer.setDrawOutlines(false);
    }
    public  void  setFixedParameterRenderer(){
        JFreeChart  chart               = chartPanel.getChart ();
        XYPlot plot                     = chart.getXYPlot();
        XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot.getRenderer();
        int s                           =   12;
        renderer.setSeriesStroke(0, new BasicStroke(s));
        renderer.setSeriesPaint(0, Color.BLUE);
        renderer.setSeriesShapesFilled(0,  true);
        renderer.setBaseShapesVisible(true);
        renderer.setDrawOutlines(true);
        renderer.setSeriesShape(0, new Ellipse2D.Double(-s/2, -s/2, s, s));



      //  NumberAxis x_axis               = (NumberAxis)plot.getDomainAxis();
      //  NumberTickUnit ntu = x_axis.getTickUnit();
        //x_axis.setTickUnit(new NumberTickUnit(0.001, new DecimalFormat("##0.00#####")));
        //Range xrange  = x_axis.getRange();
      //  System.out.println(xrange.getLowerBound());
       // System.out.println(xrange.getUpperBound());

    }
    public static XYSeries  makeSeries(ParameterPrior param){
        if (param == null) { return  new  XYSeries("");}

        double [] plotX =  makeXcoord(param);
        double [] plotY =  makeYcoord(param);

        XYSeries series = new  XYSeries("");
        for (int i = 0; i <plotX.length;  i++ ){
            series.add(plotX[i], plotY[i]);
        }
        return series;
    }
    public static double [] makeXcoord(ParameterPrior param){
        if (param == null)  { return  new double [0];}
        double [] plotX         =   new double [NUMBER_POINTS_IN_PLOT];

        if ( param.priorType ==  PRIOR_TYPE.FIXED_PARAMETER ){
            plotX          =   new double [1];
            plotX[0]       =    param.mean;
        }
        else {
            plotX                   =   new double [NUMBER_POINTS_IN_PLOT];
            double step             =   (param.high - param.low)/(NUMBER_POINTS_IN_PLOT-1);
            int    meanLoc          =   (int)floor(abs(param.mean - param.low)/step);
            for (int i = 0; i <  plotX.length; i++){
                    int k           = (i - meanLoc);
                    plotX[i]        = param.mean + k*step;
            }
            plotX[0]                = param.low;
            plotX[plotX.length -1]  = param.high;
            
        }


        return plotX;
    }
    public static double [] makeYcoord(ParameterPrior param){
        if (param == null)  { return  new double [0];}
        double [] plotX         =   makeXcoord(param);
        double [] plotY         =   new double [plotX.length];
        PRIOR_TYPE type        =   param.priorType;

        switch (type) {

            case GAUSSIAN :
                double maxy           =  -Double.MAX_VALUE;
                double miny           =  +Double.MAX_VALUE;
                double logNorm        =  log(1/(sqrt(2*PI))*param.sdev);
                for (int i = 0; i <  plotY.length; i++){

                    double x         =  plotX [i];
                    double nmt       = (x - param.mean);
                    double dnm       =  param.sdev;
                    double pwN       =  pow( nmt, 2);
                    double pwD       =  2*pow(dnm , 2);
                    double logy      =  logNorm -pwN/pwD;
                    maxy             =  max(maxy,logy);
                    miny             =  min(miny,logy);

                    plotY[i]         =  exp(logy) ;
                }

              
                break;



           case UNIFORM :

                 for (int i = 0; i <   plotY.length; i++){
                    double x        = plotX [i];
                    plotY[i] = 1.0;
                    plotY[i] = plotY[i] * exp(param.norm);
                }
                break;

            case EXPONENTIAL :

                 for (int i = 0; i <   plotY.length; i++){
                    double x         = plotX [i];
                    plotY[i] = exp(-param.mean*x);
                    plotY[i] = plotY[i] * exp(param.norm);
                }
                break;


            case POSITIVE :

                 for (int i = 0; i <   plotY.length; i++){
                    double x        = plotX [i];
                    plotY[i] = (param.mean*param.mean)*x/(param.mean*param.mean + x*x);
                   // plotY[i] = plotY[i] * exp(param.norm);
                }
                 break;


            case FIXED_PARAMETER :

                for (int i = 0; i <   plotY.length; i++){
                    double x         = plotX [i];
                    plotY[i] = param.mean;
                }
                break;


            default :

                 for (int i = 0; i <   plotY.length; i++){
                    double x        = plotX [i];
                    plotY[i] = param.mean;
                }

        }

        double max       = -Double.MAX_VALUE;
        for (double y : plotY) { max = max(y, max);}

        max              =  abs (max);
    
       if(max == 0 &&  plotY.length ==1){
            plotY[0]   =   1;
       }
       else{
            for (int i = 0; i < plotY.length; i++) {
              plotY[i]   =   plotY[i]/max ;
            }
       }
        return plotY;
    }



    private void   setConstraints(){

        ParameterPrior curParam = getSelectedParameter();
        if (curParam == null)  { return ; }
         
     
        
        if (!curParam.isOrderEditable){
            
            getNotOrdered().setEnabled(false);
            getLowHigh().setEnabled( false);
            getHighLow().setEnabled( false);
            
            getNotOrdered().setVisible(false);
            getLowHigh().setVisible( false);
            getHighLow().setVisible( false);

            
        } else {
            
            getNotOrdered().setEnabled(true);
            getLowHigh().setEnabled(true);
            getHighLow().setEnabled(true);
           
            getNotOrdered().setVisible(true);
            getLowHigh().setVisible(true);
            getHighLow().setVisible(true);
        
        }

      

        if (!curParam.isPriorTypeEditable){
            comboBox_PriorType.setEnabled(false);
        } else {
            comboBox_PriorType.setEnabled(true);
        }


       getSdevField().setVisible(false);
       getSdevLabel().setText("");

        PRIOR_TYPE type =  this.getPriorType();
       
        switch (type){
            
              
          case GAUSSIAN : 
                getLowField().setEnabled(true);
                getLowLabel().setEnabled(true);
                getMeanField().setEnabled(true);
                getMeanLabel().setEnabled(true);
                getHighField().setEnabled(true);
                getHighLabel().setEnabled(true);
                getSdevField().setEnabled(true);
                getSdevLabel().setEnabled(true);
                getSdevField().setVisible(true);
                getSdevLabel().setText("SDEV");
                getMeanLabel().setText("MEAN");
                if(curParam.mean > curParam.high){
                  setMessage("MEAN greater than HIGH");
                }
                else if(curParam.norm > 0.0){
                  setMessage("NORM greater than zero");
                }
                else if(curParam.mean < curParam.low){
                   setMessage("MEAN less than LOW");
                }
                else if(curParam.sdev <= 0.0){
                   setMessage("SDEV less than or equal to zero");
                }  
                break;
                
                
          case UNIFORM : 
                getLowField().setEnabled(true);
                getLowLabel().setEnabled(true);
                getMeanField().setEnabled(false);
                getMeanLabel().setEnabled(false);
                getHighField().setEnabled(true);
                getHighLabel().setEnabled(true);
                getSdevField().setEnabled(false);
                getSdevLabel().setEnabled(false);
                getMeanLabel().setText("MEAN");


                if(curParam.low >= curParam.high){
                  setMessage("LOW greater than or equal to HIGH");
                }
                else if(curParam.norm > 0.0){
                  setMessage("NORM greater than zero");
                }
                break;
                
          case EXPONENTIAL :
                getLowField().setEnabled(true);
                getLowLabel().setEnabled(true);
                getMeanField().setEnabled(true);
                getMeanLabel().setEnabled(true);
                getHighField().setEnabled(true);
                getHighLabel().setEnabled(true);
                getSdevField().setEnabled(false);
                getSdevLabel().setEnabled(false);
                getMeanLabel().setText("RATE");
                if(curParam.mean <= 0.0){
                   setMessage("RATE is less or equal to zero");
                } 
                else if(curParam.low < 0.0){
                   setMessage("LOW rate less than zero");
                }
                else if(curParam.norm > 0.0){
                  setMessage("NORM greater than zero");
                }
                break;
                
                
          case POSITIVE :
                getLowField().setEnabled(true);
                getLowLabel().setEnabled(true);
                getMeanField().setEnabled(true);
                getMeanLabel().setEnabled(true);
                getHighField().setEnabled(true);
                getHighLabel().setEnabled(true);
                getSdevField().setEnabled(false);
                getSdevLabel().setEnabled(false);
                getMeanLabel().setText("PEAK");

                if(curParam.mean < curParam.low){
                   setMessage("PEAK less than LOW");
                } 
                else if(curParam.mean > curParam.high){
                   setMessage("PEAK greater than HIGH");
                } 
                else if(curParam.low < 0.0){
                   setMessage("LOW less than zero");
                }
                else if(curParam.norm > 0.0){
                  setMessage("NORM greater than zero");
                }
                break;
                
          case    FIXED_PARAMETER :
                getLowField().setEnabled(false);
                getLowLabel().setEnabled(false);
                getMeanField().setEnabled(true);
                getMeanLabel().setEnabled(true);
                getHighField().setEnabled(false);
                getHighLabel().setEnabled(false);
                getSdevField().setEnabled(false);
                getSdevLabel().setEnabled(false);
                getMeanLabel().setText("PARAM");
                if(curParam.norm > 0.0){
                  setMessage("NORM greater than zero");
                }
                break;
        
         }
        
        
      
        
         
    }
    public  void  setNoParams(){
         getParams().clear();
         
         emptyPlot();

         setRendererer();

         setMessage("");

         clearAllGuiFields();

         setActive(false);

         revalidate();
                
    }
    public  void  emptyPlot(){
         xydataset.removeAllSeries ();
         XYPlot plot         = chartPanel.getChart().getXYPlot();
         plot.getDomainAxis().setLabel ("");
         plot.getRangeAxis() .setLabel ("");
    }
    public  void  clearAllGuiFields(){
                paramsName_list.setModel (new  DefaultListModel());

                getLowField().setText("");
                getMeanField().setText("");
                getHighField().setText("");
                getSdevField().setText("");
                getHighField().setText("");
           
                getNotOrdered().setSelected(false);
                getLowHigh().setSelected(false);
                getHighLow().setSelected(false);

    }

    public void addParameter (ParameterPrior param){
        params.add(param);
        setParams(params );
        getParametersJList().setSelectedValue(param.name, true);
        updateGUI ();
        
        this.firePropertyChange (BayesManager.FREQ_PARAM_ADDED, false,true);
    }
    public void removeParameter (ParameterPrior param){
        if (isDeletableParameter(param) == false){ return;}
        
        // supress multiple updates in FidViewer
        FidViewer.getInstance().setUpdatePlot(false);
        
        params.remove(param);
        
        if (    param.name.startsWith(FREQ_PARAM_NAME) == true){
                String rateName = param.name.replace(FREQ_PARAM_NAME, RATE_PARAM_NAME);
                params.remove( getParameterByName(rateName));
        }
        else if (param.name.startsWith(RATE_PARAM_NAME) == true){
                String freqName = param.name.replace( RATE_PARAM_NAME, FREQ_PARAM_NAME);
                params.remove(getParameterByName(freqName));
        }
        else if (param.name.equals(SOLVENT_FREQ_NAME) == true){
                params.remove( getParameterByName(SOLVENT_RATE_NAME));
        }
         else if (param.name.equals(SOLVENT_RATE_NAME) == true){
                params.remove( getParameterByName(SOLVENT_FREQ_NAME));
        }
        
        
        setParams(params );
        getParametersJList().setSelectedIndex(0);
        updateGUI ();
        
        // enable and trigger updates in FidViewer 
        FidViewer.getInstance().setUpdatePlot(true);

        this.firePropertyChange (BayesManager.FREQ_PARAM_REMOVED, null,param);
        
    }
    public void removeParameter (String paramName){
        ParameterPrior pr =  getParameterByName(paramName);
        removeParameter(pr);
    }
    public void removeAllDeletableParameters (){
        int size = params.size();
        for (int i = size -1 ; i >= 0; i--) {
            ParameterPrior p =  params.get(i);
             if (isDeletableParameter(p) ==  true){
                params.remove(p);
            }
        }
        
        setParams(params);
    }
    
    public void updateFreqPriorsWhenUnitsChanged(UNITS oldUnits, UNITS newUnits){
        if (oldUnits == newUnits) {return ;}
        ArrayList <ParameterPrior> freqPriors = this.getFrequencyParams();
        if(freqPriors.size() == 0) {return;}
        
        FidViewer fv        =   FidViewer.getInstance();
        float refFreq       =    fv.getProcpar().getSpectroscoperRefFrequency();
        
       
        for (ParameterPrior param :freqPriors) {
                 
                  param.low             =   Units.convertUnits(param.low,  refFreq, oldUnits, newUnits);
                  param.high            =   Units.convertUnits(param.high, refFreq, oldUnits, newUnits);
                  param.mean            =   Units.convertUnits(param.mean, refFreq, oldUnits, newUnits);
                  param.sdev            =   Units.convertUnits(param.sdev, refFreq, oldUnits, newUnits);
        }
        
    }
    public void updateFreqPriorsWhenRefFrequencyChanged(float shiftInRefFreqInHertz){
        ArrayList <ParameterPrior> freqPriors = this.getFrequencyParams();
        if(freqPriors.size() == 0) {return;}
        
        FidViewer fv            =   FidViewer.getInstance();
        UNITS units             =   fv.getUnits();
        float refFreq           =   fv.getProcpar().getSpectroscoperRefFrequency();
        float shiftInRefFreq    =   shiftInRefFreqInHertz;
        
        if (units != UNITS.HERTZ){
              shiftInRefFreq = Units.convertUnits((float) shiftInRefFreqInHertz, refFreq, UNITS.HERTZ, units);
        
        }
       
        for (ParameterPrior param : freqPriors) {
                 
                  param.low             =    param.low +  shiftInRefFreq;
                  param.high            =    param.high+  shiftInRefFreq;
                  param.mean            =    param.mean+  shiftInRefFreq;
        }
        
    }
    

     public static  ParameterPrior[] makeDummieParamsForTesting(int N){
        ParameterPrior[] p = new  ParameterPrior [N];
        for (int i = 0 ; i < N; i++){
           p[i] = new ParameterPrior("Parameter"+i);
           
           p[i].low = -i-0.5;
           p[i].high = i+0.5;
           p[i].mean = 0;
           p[i].sdev = 1;
           if (i == 0){
                p[i].priorType = PRIOR_TYPE.GAUSSIAN;
           } else {
                p[i].priorType = PRIOR_TYPE.EXPONENTIAL;
           }
          // if (i == 0)p[i].paramType = "Frequency";
           p[i].order = ORDER_TYPE.LowHigh;
        }
       return p;
    }


     public void updateForModel( Model model){
       if (model  == null){
            setNoParams();
       }
       else{
             java.util.List<ParameterPrior> pr =  model.getPriors();
            
             if( pr == null){
                setNoParams();
             }
             else {
                setParams( model.getPriors());
                revalidate();
                repaint();
            }
       }

       
       

     }

     
    @Override
     public String toString(){
         StringBuilder sb = new StringBuilder();
         sb.append("\n");
         for (ParameterPrior parameterPrior : params) {
             sb.append(parameterPrior.name);
             sb.append("\n");
         }
         sb.append("Enf of Paramters Names");
         sb.append("\n");
         sb.append("\n");
         return sb.toString();
   
   }
    //***************** GUI GETTERS ***************************/
        public  PRIOR_TYPE getGuiPriorType(){
             PRIOR_TYPE type  =  ( PRIOR_TYPE) comboBox_PriorType.getSelectedItem();
             return  type;

        }
        public  double getGuiMeanValue(){
             double value = ((Number) getMeanField().getValue()).doubleValue ();
             return  value;

        }
    //********** extract frequency-parameter information ***********// 
    public ArrayList<ParameterPrior >   getFrequencyParams(){
        ArrayList <ParameterPrior >freqParams = new ArrayList  <ParameterPrior >();
     
        for (ParameterPrior parameterPrior : params) {
            if (parameterPrior.getParameterType() == PARAMETER_TYPE.Frequency){
                freqParams.add(parameterPrior);
            }
        }
        
        return freqParams;
    }
    public ArrayList<ParameterPrior >   getFrequencyParamsNoSolvent(){
        ArrayList <ParameterPrior >freqParams = new ArrayList  <ParameterPrior >();
     
        for (ParameterPrior parameterPrior : params) {
            if (parameterPrior.getParameterType() == PARAMETER_TYPE.Frequency){
                if (parameterPrior.name.equals( SOLVENT_FREQ_NAME) == false){
                    freqParams.add(parameterPrior);
                }
            }
        }
        
        return freqParams;
    }
    public ArrayList<XYSeries>          getFrequencySeries(double globalPeak){
        ArrayList <XYSeries >freqSeries         =   new ArrayList  <XYSeries >();
        ArrayList<ParameterPrior > freqParams   =   getFrequencyParams();

         // find maximum ampitude for all frequency parameters
         double    seriesPeak   = 0 ; 
         for (ParameterPrior pr : freqParams) {
            double curPeak     = exp(pr.norm)* 1/pr.sdev;
            if (curPeak >  seriesPeak) {seriesPeak = curPeak;}
        }
         
         
        for (ParameterPrior pr : freqParams) {
            double [] plotX =   makeXcoord(pr);
            double [] plotY =   makeYcoord(pr);
            XYSeries series =   new  XYSeries(pr.name);
            
            // make and record new series
            for (int i = 0; i <NUMBER_POINTS_IN_PLOT;  i++ ){
                double y  = plotY[i] * globalPeak/seriesPeak ;
                double x  = plotX[i];
                series.add( x ,  y);
            }
           freqSeries.add(series);
        }
        return freqSeries;
    }
    public int                          getAvailbaelFrequencyIndex(){
         ArrayList<ParameterPrior > freqParams =   getFrequencyParamsNoSolvent();
         if(freqParams.isEmpty() ) {return 1;}
         
         int last           =    freqParams.size() - 1;
         
         ParameterPrior pr  =   freqParams.get(last);
         String name        =   pr.name;
       
         String ind         =   name.substring(FREQ_PARAM_NAME.length());
         int index          =   Integer.valueOf(ind) + 1;
        
         return index;
    }
 
    public static boolean               isFrequencySeries(XYSeries series){
        String name = (String)series.getKey();
        
        if (   name.startsWith(FREQ_PARAM_NAME) == true){
                return true;
        }
       
        if (name.equals(SOLVENT_FREQ_NAME) == true){
                return true;
        }
        return false;
    }
    
    
    
    //********** create and setup plot for priors ***********// 
    public  ChartPanel createChartPanel(){  

        final JFreeChart chart = ChartFactory.createXYLineChart(
            "Prior Probability", 
            "", 
            "",
            xydataset, 
            PlotOrientation.VERTICAL,
            false,					
            true,					
            false	
        );
        
        ChartPanel chartPane  = new ChartPanel(chart);
        setupPlot(chartPane );
        return chartPane;
    }
    public  void setupPlot(ChartPanel chartPane){
        JFreeChart  chart               = chartPane.getChart (); 
        XYPlot plot                     = chart.getXYPlot();
        NumberAxis x_axis               = (NumberAxis)plot.getDomainAxis();
        NumberAxis y_axis               = (NumberAxis)plot.getRangeAxis();
        
        //chartPanel.setPreferredSize(new java.awt.Dimension(500, 300));
        
        chart.removeLegend();
        chart.getTitle().setFont(new Font("Helvetica", Font.PLAIN, 16));

        RectangleInsets ri  =   new RectangleInsets(9, 1,2,1);
        chart.getTitle().setMargin(ri);
        //LegendTitle  legend =  chart.getLegend ();
        //chart.setLegendItemGraphicLocation();
        plot.setBackgroundPaint(Color.white); 
        plot.setDomainCrosshairVisible(true);
        plot.setDomainCrosshairValue(50.0, true);
        plot.setRangeCrosshairVisible(true);


        plot.setRangeGridlinePaint(Color.BLACK  );
        plot.setDomainGridlinePaint(Color.BLACK );

        x_axis.setLabelFont(new Font("Helvetica", Font.PLAIN, 16));
        y_axis.setLabelFont(new Font("Helvetica", Font.PLAIN, 16));
       // y_axis.setNumberFormatOverride(new DecimalFormat ("0.#E0"));
        y_axis.setNumberFormatOverride(new DecimalFormat ("0.0#####"));
        NumberTickUnit ntu = x_axis.getTickUnit();
        //y_axis.setTickUnit(new NumberTickUnit(0.1, new DecimalFormat("##0.00###")));


        x_axis.setAutoRangeMinimumSize(1E-28);
        x_axis.setTickLabelFont(new Font("Helvetica", Font.PLAIN, 12));
        y_axis.setTickLabelFont(new Font("Helvetica", Font.PLAIN, 12));

      //  NumberTickUnit ntu = x_axis.getTickUnit();
       // x_axis.setTickUnit(new NumberTickUnit(1, new DecimalFormat("###.0###########")));
       // if (low > high)renderer.setSeriesPaint(0, Color.black);


        chartPane.setMouseZoomable(true);
        chartPane.setMouseWheelEnabled(true);

        boolean isPannable = ( plot instanceof Pannable);
        if (isPannable ){
               plot.setDomainPannable(true);
                plot.setRangePannable(true);
         }
        setRendererer();

    }


    
    public void showGUI (JFrame frame) {   
        
        if (this.isShowing ()) return;
        if (frame == null ) {
          frame = new JFrame ();
          frame.setDefaultCloseOperation (JFrame.DISPOSE_ON_CLOSE);
        }
         
       frame.setContentPane (this);

       frame.pack ();
       frame.setVisible (true);
              
    } 
    public void showGUI (JComponent pane) {    
       if (pane == null) {showGUI(new JFrame()); return;}
        pane.removeAll();
        pane.add (this);
        pane.revalidate();
        pane.repaint();
    } 
    public static void createAndShowGUI () {
       //Create and set up the window.
        JFrame frame = new JFrame ("");
        frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
        
        //Create and set up the content pane
        // JAllPriors.setParams( AllPriors.makeDummieParamsForTesting(5));
        JAllPriors newContentPane = getInstance();
        

        newContentPane.setOpaque (true); //content panes must be opaque
        frame.setContentPane (newContentPane);
        
        //Display the window.
        frame.pack ();
        frame.setVisible (true);
        /*
        newContentPane.setParams(
         new java.util.Vector<utilities.ParameterPrior>(Arrays.asList(JAllPriors.makeDummieParamsForTesting(5))));
        */
      }
    public static void main (String[] args) {
           javax.swing.SwingUtilities.invokeLater (new Runnable () {
            public void run () {
                createAndShowGUI ();
            }
        });
    } 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton HighLow;
    private javax.swing.JRadioButton LowHigh;
    private javax.swing.JRadioButton NotOrdered;
    private javax.swing.JPanel PriorTypePane;
    private javax.swing.JPanel boundPane;
    private javax.swing.JComboBox comboBox_PriorType;
    private javax.swing.JFormattedTextField highField;
    private javax.swing.JLabel highLabel;
    private javax.swing.JSplitPane horiz_splitPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JFormattedTextField lowField;
    private javax.swing.JLabel lowLabel;
    private javax.swing.JFormattedTextField meanField;
    private javax.swing.JLabel meanLabel;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JList paramsName_list;
    private javax.swing.JPanel plot;
    private javax.swing.ButtonGroup priorOrder_buttonGroup;
    private javax.swing.JFormattedTextField sdevField;
    private javax.swing.JLabel sdevLabel;
    private javax.swing.JPanel tool_pane;
    private javax.swing.JSplitPane vert_splitPane;
    // End of variables declaration//GEN-END:variables
   public javax.swing.JRadioButton getHighLow() {
        return HighLow;
    }
    public javax.swing.JRadioButton getLowHigh() {
        return LowHigh;
    }
    public javax.swing.JRadioButton getNotOrdered() {
        return NotOrdered;
    }
    public javax.swing.JLabel getHighLabel() {
        return highLabel;
    }
    public javax.swing.JLabel getMeanLabel() {
        return meanLabel;
    }
    public javax.swing.JLabel getSdevLabel() {
        return sdevLabel;
    }
    public javax.swing.JLabel getLowLabel() {
        return lowLabel;
    }
    public javax.swing.JFormattedTextField getMeanField() {
        return meanField;
    }
    public javax.swing.JFormattedTextField getSdevField() {
        return sdevField;
    }
    public javax.swing.JFormattedTextField getHighField() {
        return highField;
    }
    public javax.swing.JFormattedTextField getLowField() {
        return lowField;
    }
    public javax.swing.JList   getParametersJList () {
        return paramsName_list;
    }
    public javax.swing.JLabel  getMessageLabel () {
        return messageLabel;
    }

    
    private java.util.List < ParameterPrior>  params    =   new Vector < ParameterPrior> ();//AllPriors.makeDummieParamsForTesting(45);
    public PRIOR_TYPE priorType                        =   PRIOR_TYPE.UNIFORM;
    private ParameterPrior prevParam                    =   null;
    public final static String     FREQ_PARAM_NAME      =   "Freq";
    public final static String     RATE_PARAM_NAME      =   "Rate";
    public final static String     SOLVENT_FREQ_NAME    =   "SolventFreq";
    public final static String     SOLVENT_RATE_NAME    =   "SolventRate";
    private boolean isUpdateFreqPriors                  =   true;
    
    public final static int NUMBER_POINTS_IN_PLOT       =   200;
    public final static  DefaultFormatterFactory scienceDecimalFormat;
    private final XYSeriesCollection  xydataset         =   new XYSeriesCollection();
    private final ChartPanel chartPanel                 =   createChartPanel();   
    public boolean  ignoreEvents                        =   false;
    private boolean  allowDeleteParameters              =   false;
    private boolean  showAmplitudePriors                =   false;

  
    //************* getters and setters
    public Vector < ParameterPrior> getParams() {
        return (Vector  < ParameterPrior> )params;
    }
    public ParameterPrior [] getParamsAsArray(){
        return params.toArray(new  ParameterPrior [params.size()]);
    } 
    public static boolean   isDeletableParameter(ParameterPrior param){
        if (param.getParameterType() == PARAMETER_TYPE.Frequency){
                return true;
        }
        if (   param.name.startsWith(FREQ_PARAM_NAME) == true){
                return true;
        }
        if (param.name.startsWith(RATE_PARAM_NAME) == true){
                return true;
        }
        if (param.name.equals(SOLVENT_FREQ_NAME) == true){
                return true;
        }
        if (param.name.equals(SOLVENT_RATE_NAME) == true){
                return true;
        }
        return false;
    }
    
    public PRIOR_TYPE      getPriorType () {  return priorType ; }
    public ParameterPrior   getSelectedParameter() {
       ParameterPrior   pr  = null;
       try{
           if (params.isEmpty()) {
            // do nothing  - return null
           }
           else if(getParametersJList() == null) {
              pr                =  params.get(0);
           }
           else if (getParametersJList().isSelectionEmpty() == false){
             pr                 =  (ParameterPrior)getParametersJList().getSelectedValue();
           }
           
       }finally{
            return pr;
       }
         
    }
    public String           getSelectedParameterName() {
       ParameterPrior   pr = getSelectedParameter();
       if   (pr == null) { return "";}
       else {return pr.name;}
    }
    public ParameterPrior   getParameterByName(String paramName){
         for (ParameterPrior pr: params) {
              if (paramName.equals(pr.name)){return  pr;}
        }
        return null;
    }
    public boolean          isUpdateFreqPriors () {
        return isUpdateFreqPriors;
    }
    
    public void             setMessage( String message) {
        getMessageLabel().setText(message);
    }
   
    public void             setPriorType ( PRIOR_TYPE  type ) {
        priorType  =  type;
        if (comboBox_PriorType != null ) {
            comboBox_PriorType.setSelectedItem(type);
        }
    }
    public void             setParams(java.util.List < ParameterPrior> prm) {
        if (prm.isEmpty()){
            setNoParams();
            return;
        }
        setEnabled(true);
        params = prm;


        Vector < ParameterPrior> dispayedParams = new Vector < ParameterPrior> ();
        for (ParameterPrior pp : params) {

            if (pp.getParameterType() == PARAMETER_TYPE.Amplitude && isShowAmplitudePriors() == false)  { /*do nothing */}
            else    {dispayedParams.add(pp);}
        }

        getParametersJList().setListData(dispayedParams);
        getParametersJList().setSelectedValue(params.get(0), true);

    }
    public void             setParams(ParameterPrior [] prm) {
       Vector <ParameterPrior> parameters  = new Vector <ParameterPrior>();

        if (prm != null) {
            java.util.List <ParameterPrior> paramList   =    Arrays.asList(prm);
            parameters                                  =  new Vector <ParameterPrior>(paramList);
       }
     
       setParams(parameters);
    }
    public void             setDisplayedParamater( ParameterPrior pr){
        getParametersJList().setSelectedValue(pr, true);
        updateGUI ();
    }
    public void             setActive(boolean enabled) {
            PanelUtility.setEnabled(this, enabled);
    }
    public void             showPriorSetters(boolean doshow) {
            
            getHighLow().setVisible(doshow);
            getLowHigh().setVisible(doshow);
            getNotOrdered().setVisible(doshow);
            PriorTypePane.setVisible(doshow);
            boundPane.setVisible(doshow);
            comboBox_PriorType.setVisible(doshow);
            getHighField().setVisible(doshow);
            getHighLabel().setVisible(doshow);
            getLowField().setVisible(doshow);
            getLowLabel().setVisible(doshow);
            getMeanField().setVisible(doshow);
            getMeanLabel().setVisible(doshow);
            getSdevField().setVisible(doshow);
            getSdevLabel().setVisible(doshow);
    }
    public void             setUpdateFreqPriors ( boolean isUpdateFreqPriors ) {
        this.isUpdateFreqPriors = isUpdateFreqPriors;
    }

    public boolean isAllowDeleteParameters() {
        return allowDeleteParameters;
    }
    public void setAllowDeleteParameters(boolean allowDeleteParameters) {
        this.allowDeleteParameters = allowDeleteParameters;
    }

    public boolean isShowAmplitudePriors() {
        return showAmplitudePriors;
    }

    public void setShowAmplitudePriors(boolean showAmplitudePriors) {
        this.showAmplitudePriors = showAmplitudePriors;
    }


 

    
  


    
 }
class JAllPriorsCellRenderer extends JLabel implements ListCellRenderer {
    private final Color HIGHLIGHT_COLOR             = new Color(0, 0, 128);
    private static final long serialVersionUID      = 7526472295622376147L;
    
    public JAllPriorsCellRenderer(){
    setOpaque(true);
    Font font   = new Font("Dialog", 1,16);
    this.setFont(font); 
   //setIconTextGap(12);
  }
    public Component getListCellRendererComponent(JList list, Object value,
        int index, boolean isSelected, boolean cellHasFocus) {
        ParameterPrior entry = ( ParameterPrior) value;
        setText(entry.name);
    
    if (isSelected) {
      setBackground(HIGHLIGHT_COLOR);
      setForeground(Color.white);
    } else {
      setBackground(Color.white);
      setForeground(Color.black);
    }

    if (list.isEnabled() == false) {
      setForeground(Color.GRAY);
    }
    return this;
  }
 }
  
  
  
 class PriorTypeCellRenderer extends JLabel implements ListCellRenderer {
    private final Color HIGHLIGHT_COLOR             = new Color(0, 0, 128);
    private static final long serialVersionUID      = 7226472295622576147L;
   
    PriorTypeCellRenderer(){
        setOpaque(true);
    }
     
  public Component getListCellRendererComponent(JList list, Object value,
        int index, boolean isSelected, boolean cellHasFocus) {
        PRIOR_TYPE entry = (PRIOR_TYPE) value;
        setText(entry.getName());
        
       if (isSelected) {
        setBackground(HIGHLIGHT_COLOR);
        setForeground(Color.white);
       } 
       else 
       {
        setBackground(Color.white);
        setForeground(Color.black);
       }

      
    return this;
  }
 }

 class FrequencyComparator  implements Comparator<ParameterPrior>{
    public int compare(ParameterPrior p1, ParameterPrior p2){
        
        int s = (int)Math.signum(p1.mean - p2.mean);
        return s;
    }
    @Override
    public boolean equals(Object obj){
        if (obj instanceof ParameterPrior  == false){
            return false;
        }
        else{
            return super.equals(obj);
        }
        
    }

    @Override
    public int hashCode() {
        int hash = 5;
        return hash;
    }
 }
           

