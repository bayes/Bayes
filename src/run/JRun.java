/*
 * JRun.java
 *
 * Created on July 27, 2007, 3:24 PM
 */

package run;
import bayes.ApplicationPreferences;
import bayes.DoCGI;
import bayes.ParameterPrior;
import bayes.IsPriorReadyToRun;
import bayes.PackageManager;
import bayes.BayesManager;
import bayes.DirectoryManager;
import interfacebeans.*;
import applications.model.*;
import javax.swing.*;
import java.io.File;
import java.util.Collection;
import load.LoadAndViewData;
import utilities.*;
import java.util.List;
import static bayes.BayesManager.*;
import static run.Run.*;

/**
 *
 * @author  apple
 */
public class JRun extends JPanel{
               
    
    /**
     * Creates new form JRun
     */
    public JRun () {
        initComponents ();
    }
    public JRun ( int hgap, int vgap ) {
       this();
       setLayout(new java.awt.GridLayout(2, 2, hgap, vgap));
    }

    public static void      setNotRun(){
        status = RUN_STATUS.NOT_RUN;
        setJobID(null);
    }
    public void      reset(){
        setNotRun();

        // set gui text
        if  (jobStatusLabel != null){
           jobStatusLabel.setText (status.getName());
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        run_button = new javax.swing.JButton();
        cancel_button = new javax.swing.JButton();
        getJob_button = new javax.swing.JButton();
        jobStatusLabel = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Submit Job to Server"));
        setFont(new java.awt.Font("Lucida Grande", 1, 18));
        setPreferredSize(new java.awt.Dimension(170, 60));
        setLayout(new java.awt.GridBagLayout());

        run_button.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        run_button.setText("RUN");
        run_button.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nSubmit job to server.\n\n</p><html>"); // NOI18N
        run_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                run_buttonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(run_button, gridBagConstraints);

        cancel_button.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        cancel_button.setText("Cancel"); // NOI18N
        cancel_button.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nCancel  and remove current<br>\n job from the server.\n\n</p><html>\n\n"); // NOI18N
        cancel_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel_buttonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(cancel_button, gridBagConstraints);

        getJob_button.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        getJob_button.setText("Get Job");
        getJob_button.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nGet job status. If status is \"Run\", <br>\nretrieve job from server and show results.\n\n</p><html>\n\n"); // NOI18N
        getJob_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getJob_button_ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(getJob_button, gridBagConstraints);

        jobStatusLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jobStatusLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jobStatusLabel.setText(status.getName());
        jobStatusLabel.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nStatus of the current job.<br>\nPossibilities include:<br> \n<br>\n<bold><u>Not Run</bold></u> - job was not submitted to server.<br> \n<bold><u>Run</bold></u> - job has successfuly run.<br> \n<bold><u>Active</bold></u> - job is currently running.<br>\n<bold><u>Submitted</bold></u> - job is submitted and queued.<br> \n<bold><u>Deleted</bold></u> - job is deleted.<br> \n<bold><u>Error</bold></u> -  job execution failed.<br>\n</p>\n<html>\n"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(jobStatusLabel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void getJob_button_ActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getJob_button_ActionPerformed
     if (isPollForStatus() == false){return;}


        RUN_STATUS astatus   =   getJobStatusOnServer(jobID, status.getName());
        String ajobid        =   getJobID();
        try{
             showResults(PackageManager.getCurrentApplication(),ajobid, astatus   );
        }
        catch (Exception e){e.printStackTrace();}
        finally {
             setStatus ( astatus  );
        }

       
}//GEN-LAST:event_getJob_button_ActionPerformed
    private void run_buttonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_run_buttonActionPerformed
        run();

       
       
    }//GEN-LAST:event_run_buttonActionPerformed
    private void cancel_buttonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel_buttonActionPerformed
        canceJob();
    }//GEN-LAST:event_cancel_buttonActionPerformed

    @Override
    public void             setEnabled(boolean enable){
        run_button.setEnabled( enable);
    }

    
    public static void      tarJob(Model curModel){
        File    bayesRoot       =   DirectoryManager.getBayesDir();
        File    tarFile         =   Run.getTarFile();
        File    asciiDIR        =   DirectoryManager.getASCIIDir();
        File    fidDir          =   DirectoryManager.getFidDir();  
    
        if (  curModel instanceof ImageModel){
             Collection<File> files  =  ((ImageModel)curModel).getFilesToTar();
             Tar.tar(tarFile, bayesRoot, files.toArray(new File [files.size()] ));
        } 

        else if (  curModel instanceof FidModel){
                Tar.tar(tarFile, bayesRoot, asciiDIR, fidDir);
         }
         else {
                Tar.tar(tarFile, bayesRoot, asciiDIR);
         }
         
    }
    public static void      validateJobIDandSetStatus(){
       boolean isValidID            = Run.isValidJobID(jobID);
       if (isValidID == false) {     setStatus ( RUN_STATUS.ERROR);return;}

        Server server               = JServer.getInstance().getServer();
        if (server.getQueue().equalsIgnoreCase("None")){
             setStatus ( RUN_STATUS.ACTIVE);
        }
        else{
             setStatus (RUN_STATUS.SUBMITTED);
        }
        BayesManager.fireJobStartEvent();
       
           
        return ;  
    }
  

    public static void  startJobMonitor(){
         if (getStatus().isRunning()){
           
            JobMonitor jm               =   JobMonitor.runInSeparateWindow();
            String account              =   BayesManager.getAccount();
            String user                 =   BayesManager.getUser();
            String url                  =   BayesManager.getURL();
            String expName              =   DirectoryManager.getExperimentDirName();
            String passw                =   JServerPasswordDialog.getServerPassword();
            String analysDir            =   DirectoryManager.getAnalysisDirName();
            File resultsFile            =   DirectoryManager.getBayesAcceptFile();
            jm.initialize(""+jobID, account, url, user, expName,  analysDir,passw, resultsFile);
            jm.run();
          }
    }
 

    public  void            run() {

         Model model = PackageManager.getCurrentApplication();
        if (model == null){ return ;}

        // cleans ascii dir before tarring files
         boolean doUseFileFilter = true;
         LoadAndViewData.clearBayesOtherAnalysisDirectory( doUseFileFilter);

         // check if model is ready to RUN
         if (!model.isReadyToRun()){return ; }


         // get list of priors
         List <ParameterPrior >priors  =   model.getPriors();

         // test orders for priors
         String error = IsPriorReadyToRun.testPriorOrders(priors);
         if (error != null){DisplayText.popupErrorMessage(error); return; }

         // test numeric assignments for priors
         ParameterPrior p      = IsPriorReadyToRun.testBounds(priors);
         if (p  != null){
                error           =   p.message;
                p.message       =   null;
                DisplayText.popupErrorMessage(error);
                JAllPriors.getInstance().setDisplayedParamater(p);
                AllViewers.showPriorsViewer();

               return;
         }



        password                        =   JServerPasswordDialog.getServerPassword();
        int    usrOption                =   JServerPasswordDialog.getInstance().getOption();
        if(   usrOption == JServerPasswordDialog.CANCEL ) {return ;}

        String url                      =   BayesManager.getURL();
        String user                     =   BayesManager.getUser();
        boolean approvedConnection      =   DoCGI.checkConnection(url , user, password);
        if (approvedConnection == false) {return;}

        runTrhead                       = new SubmitJobThread();
        runTrhead.execute();


        try {
            Thread.sleep(700);
        } catch (InterruptedException ex) {
            ex.printStackTrace();
        }
        if (runTrhead.isRunning()){
            timer           = new Timer(30, new RunCallBack ());
            timer.start();
        }
        else{
             // checks genearted jobID and sets status
            finishJobSubmission();
        }


        System.gc();

       
    }
    public void             finishJobSubmission(){
        validateJobIDandSetStatus();
        if ( ApplicationPreferences.isMonitorSubmittedJobsLive()){
            startJobMonitor();
         }
    }
    public static void      submitJob() {


        String prMessage     =   "Compressing experiment directory for submission";
        setProgressMessage(prMessage );

        Model model         =   PackageManager.getCurrentApplication();
        
        long startTar       =  System.nanoTime();
        tarJob(model);      // creates job.tar file in the current directory
        long stopTar        =  System.nanoTime();
        double tarTime      =   (stopTar - startTar)*1e-9;
        System.out.println("Time to make job.tar file "+ tarTime );


        doZipTar();         // creates job.results.tar files that contains zipped job.tar files, checksum and jod.direction files

        setProgressMessage("Submitting job" );

        doSubmitCGI(); // submits job to server
        setProgressMessage("Deleting temporary files" );
        
        if (ApplicationPreferences.isDeleteSubmittedJobFromCLient()){
             removeUsedFiles();  // removes temporarily files
        }
       

     return;


    }
    public static void      doSubmitCGI(){
        String url                  =   getURL();
        String user                 =   BayesManager.getUser();
        File    ziptarFile          =   Run.getZipTarFile();


        jobID                       =   DoCGI.submitJob(url, ziptarFile, user, password);

       
    }

  

    public static void      canceJob(){
        if (isJobIDValid() == false) {return;}

        try{
            int    usrOption            =   JServerPasswordDialog.getInstance().getOption();
            if(   usrOption == JServerPasswordDialog.CANCEL ) {return ;}


            doCleanup();

        }
        catch (Exception e){
            e.printStackTrace();
        }
        finally{
            setStatus (RUN_STATUS.NOT_RUN);
            BayesManager.fireJobCanceledEvent();
        }
        
        
       
    }
    public static void      doCleanup() {
         Run.removeJobFromServer(jobID);
         Run.removeUsedFiles();
         setJobID(null);

    }
   
    
    

  
    public  void            showResults(Model curModel, String ajoboid, RUN_STATUS astatus ) {

        System.out.println("Show Results for jobID "+ ajoboid + " and status "+ astatus);
        switch(astatus){
        
            case    RUN   : getJobFromServerOnNewThread();
                            break;
                            
            case    ACTIVE: Run.showResultsForStatusACTIVE(curModel, ajoboid) ;
                            break;

            case   SUBMITTED: 
                              break;
            
            case    ERROR : Run.showResultsForStatusERROR(curModel,  ajoboid);
                            canceJob();
                            break;

            case    DELETED :   BayesManager.fireJobEndEvent(true);
                            break;
                            
            default       : // do nothing currently
                            break;
        }
    }   
    public static void      showResultsForStatusRun() {
        Model curModel          = PackageManager.getCurrentApplication();
        try{
             doCleanup();
        }
        finally {
            if (curModel == null){
                BayesManager.fireJobEndEvent(true);
            }
            else if (curModel instanceof ImageModel){
                BayesManager.fireJobEndEvent(false);
            }
            else{
                BayesManager.fireJobEndEvent(true);
            }

        }


       

        
}
   
    public static boolean   getJobFromServer(){
        return Run.getJobFromServer(jobID);
    }
    public  void            getJobFromServerOnNewThread(){
        setProgressMessage("Retrieving job from server");
        getJobTrhead                       = new GetJobThread(jobID);
        getJobTrhead.execute();

        try {
            Thread.sleep(500);
        } catch (InterruptedException ex) {
            ex.printStackTrace();
        }
        if (getJobTrhead .isRunning()){
            timer           = new Timer(30, new GetJobCallBack());
            timer.start();
        }
        else if (getJobTrhead.successfulyRetrieved) {
              showResultsForStatusRun ();
        }


        System.gc();

    }
    
    
    public static void      fireJobIDChange(){
        if (jobID != null){
            BayesManager.fireJobStartEvent();
        }
    }
 


    public boolean isPollForStatus(){
        if(getJobID() == null) {return false;}
        if(getStatus() == RUN_STATUS.RUN){return false;}

        return true;

    }
    
    private static void createAndShowGUI () {
        //Disable boldface controls.
        UIManager.put ("swing.boldMetal", Boolean.FALSE);
        
        //Create and set up the window.
        JFrame frame = new JFrame ("Exp Model");
        frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
     
        //Create and set up the content pane.
        JRun newContentPane = new JRun ( );
        newContentPane.setOpaque (true); //content panes must be opaque
        frame.setContentPane (newContentPane);
        
        //Display the window.
        frame.pack ();
        frame.setVisible (true);
       
        
    }
    public static void main (String[] args) {
      
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater (new Runnable () {
            public void run () {
                createAndShowGUI ();
            }
        });
 
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancel_button;
    private javax.swing.JButton getJob_button;
    private static javax.swing.JLabel jobStatusLabel;
    private javax.swing.JButton run_button;
    // End of variables declaration//GEN-END:variables
   
  //  private Model model;
    private static String jobID                    =    null  ;
    private static RUN_STATUS status               =    RUN_STATUS.NOT_RUN  ;

    private static String password                 =    null;
    private javax.swing.Timer timer                =    null;
    private SubmitJobThread runTrhead              =    null;
    private GetJobThread  getJobTrhead             =    null;
    
    //*********** Getterts and Setter*****************************//
    public static RUN_STATUS getStatus(){return status;}
    public static void      setStatus(RUN_STATUS astatus){
        status = astatus;
        
        // set gui text
        if  (jobStatusLabel!= null){
            jobStatusLabel.setText (status.getName());
        }
        
       
        switch(status){
            case    NOT_RUN     :   setJobID(null);
                                    break;
                            
            case    ERROR       :   setJobID(null);
                                    break;
        }
        return;
    }
    public static String    getJobID(){return jobID;}
    public static void      setJobID(String id){jobID = id;}
    public static boolean   isJobIDValid(){
        boolean isValid = false;
        if (jobID == null ) { return isValid ; }
        try{
            int id = Integer.parseInt(jobID);
            if (id == 0) { throw new IllegalArgumentException();}
            isValid             = true;
        } catch (Exception exp) {
            String error    =   String.format(
                    "Job id can not be retreieved.\n"+
                    "Following error is encountered:\n"+
                     "%s.\n"+
                     "JobID  = %s",
                     exp.getMessage(),
                     jobID);
            DisplayText.popupErrorMessage(error);
        }
       
        return isValid ;
    }

   


    class RunCallBack extends AbstractCallBack{
         
         public void stopTimer(){
                timer.stop();
        }
        @Override
         public void takeFinalActions(){
                 if (timer.isRunning()) {timer.stop();}
                    finishJobSubmission();
          }
         public boolean isKeepRunning(){
            if (runTrhead == null) {return false;}
            return runTrhead.isRunning() ;
          }
    }
    class GetJobCallBack extends AbstractCallBack{


    public void takeFinalActions(){
        if (timer.isRunning()) {timer.stop();}
        if (getJobTrhead.successfulyRetrieved) {
              showResultsForStatusRun ();
        }

      

      }
    public void stopTimer(){
        timer.stop();
    }
    public boolean isKeepRunning(){
            if (getJobTrhead == null) {return false;}
            return getJobTrhead.isRunning() ;
       }
    }

    
  class SubmitJobThread implements Runnable {
    Thread runThread                =   null;

   public void run(){
       try{
                   submitJob();
       }
       finally{
            reset();
        }
   }
   public  void       reset(){
        runThread                   =   null;
    }
   public  void       execute(){
      this.runThread    =   new Thread(this);
      this.runThread.setPriority(Thread.NORM_PRIORITY);
      this.runThread.start();
   }
   public boolean     isRunning(){
        if (runThread  == null) {return false;}
        else {
            return runThread.isAlive();
        }
    }
}
}
