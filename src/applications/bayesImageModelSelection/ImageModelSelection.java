/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ImageModelSelection.java
 *
 * Created on Jan 22, 2009, 4:23:09 PM
 */

package applications.bayesImageModelSelection;
import bayes.PackageManager;
import bayes.JobDirections;
import bayes.BayesManager;
import bayes.DirectoryManager;
import run.JRun;
import javax.swing.*;
import bayes.Enums.*;
import java.io.*;
import java.util.*;
import utilities.*;
import interfacebeans.*;
import static applications.bayesEnterAsciiModel.BayesEnterAsciiModel.*;
import applications.bayesEnterAsciiModel.BayesEneterAsciiConstants;
import applications.bayesEnterAsciiModel.Files;
import bayes.ParameterPrior;
import applications.bayesEnterAsciiModel.EnterAsciiModelParamsWriter;
import applications.model.EnterAsciiPackage;
import applications.model.ImageModel;
import ascii.AsciiIO;
import bayes.Reset;
import bayes.WriteBayesParams;
import image.*;
import load.LoadAsciiModels;
/**
 *
 * @author apple
 */
public class ImageModelSelection extends javax.swing.JPanel
    implements BayesEneterAsciiConstants,  ImageModel, EnterAsciiPackage,  bayes.ApplicationConstants,java.beans.PropertyChangeListener{

    /** Creates new form ImageModelSelection */
    public ImageModelSelection() {
        LoadPackage.loadPackage(this);
        PackageManager.setCurrentApplication(this);


        AllViewers.removePriorsViewer();
        AllViewers.addCodeViewer();
        JShowModels.getInstance().setSingleMode(false);

        boolean isDeseralized = bayes.Serialize. deserializeCurrenExperiment();

        initComponents();

        BayesManager.pcs.addPropertyChangeListener(this);
        JShowModels.getInstance().addPropertyChangeListener(this);
        ImageViewer.getInstance().addPropertyChangeListener(this);


        if(isDeseralized){
            AllViewers.showCodeViewer();

            JRun.fireJobIDChange();
          
        }
        else {AllViewers.showInstructions();}

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSplitPane1 = new javax.swing.JSplitPane();
        setup_pane = new javax.swing.JPanel();
        jRun = new run.JRun();
        jPanel1 = new javax.swing.JPanel();
        loadSysModel_btn = new javax.swing.JButton();
        loadUserModel_btn = new javax.swing.JButton();
        processSlice = new javax.swing.JPanel();
        startLabel = new javax.swing.JLabel();
        startFormatetedTextField = new javax.swing.JFormattedTextField();
        endLabel = new javax.swing.JLabel();
        endFormattedTextField = new javax.swing.JFormattedTextField();
        SettingsPane = new javax.swing.JPanel();
        noiseStdDevLabel = new javax.swing.JLabel();
        stdDevField = new javax.swing.JFormattedTextField();
        useGaussianCheckBox = new javax.swing.JCheckBox();
        jResetSave = new interfacebeans.JResetSave();
        jserver = new interfacebeans.JServer();
        graph_panel =  AllViewers.getInstance ();

        FormListener formListener = new FormListener();

        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setName("jSplitPane1"); // NOI18N
        jSplitPane1.setOneTouchExpandable(true);

        setup_pane.setName("setup_pane"); // NOI18N

        jRun.setName("jRun"); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Load Model"));
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(new java.awt.GridBagLayout());

        loadSysModel_btn.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        loadSysModel_btn.setText("System");
        loadSysModel_btn.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\n\nLoad models from system model directory.\n\n</html>\n\n\n"); // NOI18N
        loadSysModel_btn.setName("loadSysModel_btn"); // NOI18N
        loadSysModel_btn.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(loadSysModel_btn, gridBagConstraints);

        loadUserModel_btn.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        loadUserModel_btn.setText(" User ");
        loadUserModel_btn.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\n\nLoad models from user model directory.\n\n</html>\n\n\n\n"); // NOI18N
        loadUserModel_btn.setName("loadUserModel_btn"); // NOI18N
        loadUserModel_btn.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(loadUserModel_btn, gridBagConstraints);

        processSlice.setBorder(javax.swing.BorderFactory.createTitledBorder("Process Slice"));
        processSlice.setName("processSlice"); // NOI18N
        processSlice.setLayout(new java.awt.GridBagLayout());

        startLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        startLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        startLabel.setText("  Start");
        startLabel.setName("startLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        processSlice.add(startLabel, gridBagConstraints);

        startFormatetedTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        startFormatetedTextField.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\nEnter the first slice to process.<br>\nThe default is 1.\n\n</html>"); // NOI18N
        startFormatetedTextField.setInputVerifier(new PositiveIntegerInputVerifier());
        startFormatetedTextField.setName("startFormatetedTextField"); // NOI18N
        startFormatetedTextField.setValue( getStartSliceIndex ());
        startFormatetedTextField.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        processSlice.add(startFormatetedTextField, gridBagConstraints);

        endLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        endLabel.setText("  End");
        endLabel.setName("endLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        processSlice.add(endLabel, gridBagConstraints);

        endFormattedTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        endFormattedTextField.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nEnter the last slice to process.<br>\nThe default is the number of slices.\n\n</html>\n\n"); // NOI18N
        endFormattedTextField.setInputVerifier(new PositiveIntegerInputVerifier());
        endFormattedTextField.setName("endFormattedTextField"); // NOI18N
        endFormattedTextField.setValue( getEndSliceIndex () );
        endFormattedTextField.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        processSlice.add(endFormattedTextField, gridBagConstraints);

        SettingsPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Settings"));
        SettingsPane.setName("SettingsPane"); // NOI18N
        SettingsPane.setLayout(new java.awt.GridBagLayout());

        noiseStdDevLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        noiseStdDevLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        noiseStdDevLabel.setText("Noise SD");
        noiseStdDevLabel.setName("noiseStdDevLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        SettingsPane.add(noiseStdDevLabel, gridBagConstraints);

        stdDevField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0.0########"))));
        stdDevField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        stdDevField.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nEnter the standard deviation of the noise.<br>\nNote this is threshold the image and it is <br>\nused when \"Use Gaussian\" is selected.\n</htm>\n\n\n"); // NOI18N
        stdDevField.setInputVerifier(new PositiveFloatInputVerifier());
        stdDevField.setName("stdDevField"); // NOI18N
        stdDevField.setValue(this.standardDeviation);
        stdDevField.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        SettingsPane.add(stdDevField, gridBagConstraints);

        useGaussianCheckBox.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        useGaussianCheckBox.setSelected(this.isUseGaussian());
        useGaussianCheckBox.setText("Use Gaussian   "); // NOI18N
        useGaussianCheckBox.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nWhen the number of parameters is near the number <br>\nof data values, Students' t-distribution is nearly singular.<br>\nSwitch to using a Gaussian distribution to stabalize the calculation.\n\n</html>\n\n\n"); // NOI18N
        useGaussianCheckBox.setContentAreaFilled(false);
        useGaussianCheckBox.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        useGaussianCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        useGaussianCheckBox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rb.gif"))); // NOI18N
        useGaussianCheckBox.setIconTextGap(16);
        useGaussianCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        useGaussianCheckBox.setName("useGaussianCheckBox"); // NOI18N
        useGaussianCheckBox.setRolloverEnabled(true);
        useGaussianCheckBox.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbr.gif"))); // NOI18N
        useGaussianCheckBox.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbrs.gif"))); // NOI18N
        useGaussianCheckBox.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbs.gif"))); // NOI18N
        useGaussianCheckBox.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        SettingsPane.add(useGaussianCheckBox, gridBagConstraints);

        jResetSave.setName("jResetSave"); // NOI18N

        jserver.setName("jserver"); // NOI18N

        org.jdesktop.layout.GroupLayout setup_paneLayout = new org.jdesktop.layout.GroupLayout(setup_pane);
        setup_pane.setLayout(setup_paneLayout);
        setup_paneLayout.setHorizontalGroup(
            setup_paneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(setup_paneLayout.createSequentialGroup()
                .add(10, 10, 10)
                .add(jRun, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 211, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jserver, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 197, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 134, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(processSlice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 144, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(SettingsPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 187, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jResetSave, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 135, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(199, Short.MAX_VALUE))
        );
        setup_paneLayout.setVerticalGroup(
            setup_paneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(setup_paneLayout.createSequentialGroup()
                .add(setup_paneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jRun, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                    .add(SettingsPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                    .add(processSlice, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                    .add(jResetSave, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jserver, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        setup_paneLayout.linkSize(new java.awt.Component[] {SettingsPane, jPanel1, jResetSave, jRun, jserver, processSlice}, org.jdesktop.layout.GroupLayout.VERTICAL);

        jSplitPane1.setLeftComponent(setup_pane);

        graph_panel.setName("graph_panel"); // NOI18N
        graph_panel.setLayout(new javax.swing.BoxLayout(graph_panel, javax.swing.BoxLayout.LINE_AXIS));
        jSplitPane1.setRightComponent(graph_panel);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.beans.PropertyChangeListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == loadSysModel_btn) {
                ImageModelSelection.this.loadSysModel_btnActionPerformed(evt);
            }
            else if (evt.getSource() == loadUserModel_btn) {
                ImageModelSelection.this.loadUserModel_btnActionPerformed(evt);
            }
            else if (evt.getSource() == useGaussianCheckBox) {
                ImageModelSelection.this.useGaussianCheckBoxActionPerformed(evt);
            }
        }

        public void propertyChange(java.beans.PropertyChangeEvent evt) {
            if (evt.getSource() == startFormatetedTextField) {
                ImageModelSelection.this.startFormatetedTextFieldPropertyChange(evt);
            }
            else if (evt.getSource() == endFormattedTextField) {
                ImageModelSelection.this.endFormattedTextFieldPropertyChange(evt);
            }
            else if (evt.getSource() == stdDevField) {
                ImageModelSelection.this.stdDevFieldPropertyChange(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private void loadSysModel_btnActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadSysModel_btnActionPerformed
         JShowModels.getInstance().loadSysModel();
}//GEN-LAST:event_loadSysModel_btnActionPerformed
    private void loadUserModel_btnActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadUserModel_btnActionPerformed
         JShowModels.getInstance().loadUserModel();
}//GEN-LAST:event_loadUserModel_btnActionPerformed
    private void startFormatetedTextFieldPropertyChange (java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_startFormatetedTextFieldPropertyChange
        if (evt.getPropertyName ().equalsIgnoreCase ("value") == false) {return;}
        int val = ((Number)startFormatetedTextField.getValue()).intValue();
        setStartSliceIndex( val);

        clearPreviousRun();
}//GEN-LAST:event_startFormatetedTextFieldPropertyChange
    private void endFormattedTextFieldPropertyChange (java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_endFormattedTextFieldPropertyChange
        if (evt.getPropertyName ().equalsIgnoreCase ("value") == false) {return;}
        int val = ((Number)endFormattedTextField.getValue()).intValue();
        setEndSliceIndex ( val);

        clearPreviousRun();
}//GEN-LAST:event_endFormattedTextFieldPropertyChange
    private void stdDevFieldPropertyChange (java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_stdDevFieldPropertyChange
        if (evt.getPropertyName().equalsIgnoreCase("value") == false) {return;}
        standardDeviation= (Double)getStdDevField ().getValue ();
        clearPreviousRun();
}//GEN-LAST:event_stdDevFieldPropertyChange
    private void useGaussianCheckBoxActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useGaussianCheckBoxActionPerformed
        useGaussian = getUseGaussianCheckBox ().isSelected ();
        clearPreviousRun();
}//GEN-LAST:event_useGaussianCheckBoxActionPerformed


    public void              setPackageParameters(ObjectInputStream ois) throws Exception{
         AsciiModelList theModels           =   (AsciiModelList)ois.readObject();
         int        start                   =   (Integer)ois.readObject();
         int        end                     =   (Integer)ois.readObject();
         double     sdev                    =   (Double)ois.readObject();
         boolean    useGaus                 =   (Boolean)ois.readObject();

        
         setStartSliceIndex(start);
         setEndSliceIndex(end);
         setStandardDeviation(sdev);
         setUseGaussian(useGaus );
         JShowModels.getInstance().setModels(theModels );
    }
    public void              savePackageParameters(ObjectOutputStream oos){
      try{
            oos.writeObject( getModels ());
            oos.writeObject(getStartSliceIndex());
            oos.writeObject(getEndSliceIndex());
            oos.writeObject(getStandardDeviation());
            oos.writeObject(isUseGaussian());

      } catch (IOException exp){
            DirectoryManager.getSerializationFile().delete();
            exp.printStackTrace();
      }
    }
    public boolean           isReadyToRun(){

      // make sure data has been loaded
        File dir                    =   DirectoryManager.getBayesOtherAnalysisDir();
        ImageDescriptor id          =   ImageViewer.getInstance().getImageDescriptor();
        Collection<File> imageFiles =   ImageViewer.getInstance().getSelectedFiles();
        List <String>abscissa       =   null;
        File abscissaFile           =   DirectoryManager.getAbscissaFile();


       if(imageFiles == null || imageFiles.isEmpty() ){
           String msg           =   "No image is selected.\nExit run..." ;
           DisplayText.popupMessage(msg);
           return false;
       }



        for (File file : imageFiles) {
           if(!file.exists()){
                 String msg = String.format(    "Image file doesnt exist.\n" +
                                                "%s\n" +
                                                "Exit run... ",
                                                file.getPath());
                DisplayText.popupMessage(msg);
                return false;
            }
        }

       StringBuilder sb             =   new StringBuilder();
       sb.append("Following images will be submitted for analysis\n");
       sb.append("\n");
       for (File file :imageFiles) {
            sb.append(file.getName() + "\n");

       }
       sb.append("\n");

       boolean shouldContinue         =   DisplayText.popupDialog(sb.toString());
       if (shouldContinue == false){ return false;}



        // make sure the model has been loaded
       if(  areModelsLoaded() == false ){
         DisplayText.popupMessage("No model has been loaded.");
         return false;
       }


       boolean startEndSlciesCompatibleWithImages  =   verifyProcessSlices(imageFiles);
       if ( startEndSlciesCompatibleWithImages == false){return false;}


        // make sure a standard deviation was set
       double  sd = this.getStandardDeviation();
         {
            if (sd <= 0) {
               DisplayText.popupMessage("Noise standard deviation is not set.\nExiting run.");
               return false;
            }
        }

        //make sure we have integer number of data sets
       int numberOfColumns      =   this.getNumberOfDataColumns();
       int numberOfImages       =   imageFiles.size();
       if (numberOfImages%numberOfColumns != 0){
              String msg = String.format(    "Number of selected images %d is not equal\n" +
                                             "to integer multiple of number of data columns %d  \n" +
                                             "for selected models.\n" +
                                             "Exit run... ",
                                              numberOfImages,
                                              numberOfColumns);
                DisplayText.popupErrorMessage(msg);
                return false;

       }


       // check abscisaa

       if (!abscissaFile.exists()) {
              DisplayText.popupMessage("Abscissa file doesn't exist.\nExiting run.");
               return false;
      }

       try {
                int nAbscissaColumns     =   IO.getNumberOfColumns(abscissaFile) ;
                if ( nAbscissaColumns <1){throw new IOException();}
                int modelAbscissa        =   getNumberOfAbscissa();
                abscissa                 =   IO.ASCII2String(abscissaFile);
                if (nAbscissaColumns !=  modelAbscissa) {
                     message     =  "Number of abscissa for the model "+ "("+ modelAbscissa+")\n";
                     message     += "is different from the number of\n";
                     message     += "abscissa in the abscisaa file"+ "("+ nAbscissaColumns +")\n" ;
                     message     += "Exiting run.";
                     DisplayText.popupMessage(message);
                     return false;
                }
       }
       catch (IOException ex) {
              DisplayText.popupMessage("Abscissa file is not valid.\nExiting run.");
                return false;
        }


        



     // write the parameter file
       boolean bl  = WriteBayesParams.writeParamsFile(this, dir);
       if (bl == false){
           DisplayText.popupMessage("Failed to write Bayes.params file.");
           return false;
       }


        // write dummy .f files
         bl =   completeProgramFiles();

         if(bl == false){
          DisplayText.popupErrorMessage("Failed to write dummy  fortran files.");
          return false;
        }

       //  write "job.directions" file
       bl  =  JobDirections.writeFromProperties(JobDirections.BAYES_SUBMIT_IMAGE);
       if(bl == false){
          DisplayText.popupErrorMessage("Failed to write job directions file.\nExiting...");
          return false;
        }
        return true;
    }
    public String            getProgramName(){
       return "BayesModelImagePixels";
    }
    public String            getExtendedProgramName() { return "Bayes Image Model Selection" ;}
    public int               getNumberOfAbscissa(){
        return getModels().getNumberOfAbscissa();
    }
    public int               getNumberOfDataColumns(){
        return  getModels().getNumberOfColumns();
    }
    public int               getTotalNumberOfColumns(){
        int curNoCols = getNumberOfDataColumns();
        int curNoAbs  = getNumberOfAbscissa();
        int noOfCols;
        if(curNoAbs == 1){
            noOfCols = curNoAbs + curNoCols;
        } else{
            noOfCols = 1 + curNoAbs + curNoCols;
        }
        return noOfCols;}
    public int               getNumberOfPriors(){return  0;}
    public StringBuilder     getModelSpecificsForParamsFile(int PADLEN, String PADCHAR){
         StringBuilder sb           =   new StringBuilder();
         String str                 =   null;

        String  separator                 =   BayesManager.FILE_SEPARATOR; // file separator
        ImageViewer iv              =   ImageViewer.getInstance();
        File imgDir                 =   DirectoryManager.getImageDir();
        List <File>imageFiles       =   iv.getSelectedFiles();

        sb.append( IO.pad("Package Parameters", -PADLEN, PADCHAR ));
        sb.append(" = ") ;
        sb.append(0);
        sb.append(EOL);


        int numberOfImages          =   imageFiles.size();
        sb.append( IO.pad("Number Of Input Images", -PADLEN, PADCHAR ));
        sb.append(" = ") ;
        sb.append(numberOfImages);
        sb.append(EOL);

        for (File file : imageFiles) {
            str  = imgDir.getName()+ separator +  file.getName() ;
            sb.append( IO.pad("Input Image Name", -PADLEN, PADCHAR ));
            sb.append(" = ") ;
            sb.append(str);
            sb.append(EOL);
        }

        str     = imgDir.getName() ;
        sb.append( IO.pad("Output Image Directory", -PADLEN, PADCHAR ));
        sb.append(" = ") ;
        sb.append(str);
        sb.append(EOL);

        sb.append( IO.pad("NoRo", -PADLEN, PADCHAR ));
        sb.append(" = ") ;
        sb.append(iv.getNReadOut());
        sb.append(EOL);


        sb.append( IO.pad("NoPe", -PADLEN, PADCHAR ));
        sb.append(" = ") ;
        sb.append(iv.getNPhaseEncode());
        sb.append(EOL);


        sb.append( IO.pad("ArrayDim", -PADLEN, PADCHAR ));
        sb.append(" = ") ;
        sb.append(iv.getNElements());
        sb.append(EOL);

        sb.append( IO.pad("No Slices", -PADLEN, PADCHAR ));
        sb.append(" = ") ;
        sb.append(iv.getNSlices());
        sb.append(EOL);


        sb.append( IO.pad("Starting Slice", -PADLEN, PADCHAR ));
        sb.append(" = ") ;
        sb.append(this.getStartSliceIndex());
        sb.append(EOL);

        sb.append( IO.pad("Ending Slice", -PADLEN, PADCHAR ));
        sb.append(" = ") ;
        sb.append(this.getEndSliceIndex());
        sb.append(EOL);

        sb.append( IO.pad("Noise Std Dev", -PADLEN, PADCHAR ));
        sb.append(" = ") ;
        sb.append(this.getStandardDeviation());
        sb.append(EOL);

        str     =   (this.isUseGaussian())? "Yes": "No";
        sb.append( IO.pad("Use Gaussian", -PADLEN, PADCHAR ));
        sb.append(" = ") ;
        sb.append(str );
        sb.append(EOL);

        sb.append( IO.pad("Use ROI", -PADLEN, PADCHAR ));
        sb.append(" = ") ;
        sb.append("No");
        sb.append(EOL);


        sb.append( IO.pad("Number Of Models", -PADLEN, PADCHAR ));
        sb.append(" = ") ;
        sb.append(getNumberOfModels());
        sb.append(EOL);

        //blank line
         sb.append(EOL);

         // add models
         StringBuilder modelsInfo   =   EnterAsciiModelParamsWriter.writeModels(this.getModels());
         sb.append(modelsInfo);

         sb.append("Abscissa Values Follow:"); 
         sb.append(EOL); 
         File file                  =   DirectoryManager.getAbscissaFile();
         str                        =   IO.readFileToString(file); 
         sb.append(str);
         return sb;
    }
    public List<ParameterPrior>getPriors(){
        return  new Vector<ParameterPrior>();
    };
    public String            getConstructorArg(){return null;}
    public String            getInstructions(){return PACKAGE_INTSRUCTIONS.IMAGE_MODEL_SELECTION .getInstruction();}
    public boolean           isOutliers(){return false;}
    public Collection <File> getFilesToTar(){

        List<File> imageFiles   =   image.ImageViewer.getInstance().getSelectedImgAndIfhFiles();
        List<File> tarFiles     =   new  ArrayList<File>();
        tarFiles.add(DirectoryManager.getBayesOtherAnalysisDir()); // asciiDIR
        tarFiles.addAll(imageFiles);

        return tarFiles ;
    }
    public void              reset (){
         setDefaults();


         JShowModels.getInstance().removeAllModels();
         LoadAsciiModels.cleanModelFiles();

         clearPreviousRun();

        // show default viewer
        AllViewers.getInstance().showDefaultViewer();
    }
    public void              clearPreviousRun(){

          Reset.clearImageResutls();

         // reset job status
         jRun.reset();

    }
    public void              setDefaults(){
        setStartSliceIndex(1);
        setEndSliceIndex(ImageViewer.getInstance().getNSlices());
        setStandardDeviation(0);
        setUseGaussian (false);

    }
    public void              setActive(boolean isActive){

           AllViewers.getInstance().setActive(isActive);
          loadSysModel_btn.setEnabled(isActive);
          loadUserModel_btn.setEnabled(isActive);
          getEndFormattedTextField().setEditable(isActive);
          getStdDevField().setEnabled(isActive);
          getStartFormatetedTextField().setEnabled(isActive);
          getEndFormattedTextField ().setEnabled(isActive);
          startLabel.setEnabled(isActive);
          endLabel.setEnabled(isActive);
          noiseStdDevLabel.setEnabled(isActive);
          getUseGaussianCheckBox ().setEnabled(isActive);
          jserver.setActive(isActive);
          jRun.setEnabled(isActive);
          jResetSave.setActive(isActive);

    };
    public void              propertyChange(java.beans.PropertyChangeEvent evt){
      if (evt.getPropertyName().equals(bayes.BayesManager.JRUN_JOB_START)){
          setActive(false);
      }

      else if (evt.getPropertyName().equals(bayes.BayesManager.JRUN_JOB_END)){
          setActive(true);
          ImageViewer.getInstance().updateImageList();
          AllViewers.showImageViewer();
      }

      else if (evt.getPropertyName().equals(bayes.BayesManager.JRUN_JOB_CANCELED)){
           setActive(true);
      }
    
      else if (evt.getPropertyName().equals(bayes.BayesManager.COMPILE_ERRROR)){

          String error = evt.getNewValue().toString();
          DisplayText.popupErrorMessage(error);
      }

     else if (evt.getPropertyName() .equals(JShowModels.NO_ASCII_MODEL_LOADED)){
             setDefaults();
            
      }
      else if (evt.getPropertyName() .equals( JShowModels.ASCII_MODEL_IS_LOADED)){
          AsciiIO.clearAsciiFileNonCompatibleWithModel(this);



          // no original fortan/c files must exist in BayesOtherAnalysis
          File asciidir             =   DirectoryManager.getBayesOtherAnalysisDir();
          LoadAsciiModels.cleanModelFiles(asciidir );

          AllViewers.showCodeViewer();
      }


   }


    public boolean verifyProcessSlices( Collection<File> imageFiles){

      String error                   =   null;
         if (getStartSliceIndex() < 1){
               error               =   String.format(
                    "Start slice number (%s) must be larger than 0\n"
                    + "Exiting...", getStartSliceIndex());

            DisplayText.popupErrorMessage(error);
            return false;
        }
        if (getEndSliceIndex() < 1){
               error               =   String.format(
                    "End slice number (%s) must be larger than 0\n"
                    + "Exiting...", getStartSliceIndex());

            DisplayText.popupErrorMessage(error);
            return false;
        }

        if (getEndSliceIndex() < getStartSliceIndex()){
               error               =   String.format(
                    "End slice number (%s) must be larger than\n"
                    + "start slice number (%s))"
                    + "Exiting...", getEndSliceIndex(), getStartSliceIndex());

            DisplayText.popupErrorMessage(error);
            return false;
        }

         for (File file : imageFiles) {
             boolean isvalid = verifyProcessSlices(file);
             if (isvalid){continue;}
             else{ return false;}
         }


      return true;

     }
    public boolean verifyProcessSlices(File  imgfile){
         String error                   =   null;
         File ifhfile                = DirectoryManager.getIfhFileForImage(imgfile);

         if (ifhfile == null || ifhfile.exists() == false){
            error               =   String.format(
                    "No image descriptor file\n"
                    + "is found for image %s\n"
                    + "Exiting...",  imgfile.getPath());

            DisplayText.popupErrorMessage(error);
            return false;
        }
        ImageDescriptor id  = ImageIO.loadFromDisk(ifhfile);
        if  (id.isLoaded() == false){
            error               =   String.format(
                    "Failed to load image descriptor file\n"
                    + "%s\n"
                    + "Exiting...",  ifhfile.getPath());

            DisplayText.popupErrorMessage(error);
            return false;

        }
        int nsclies         =   id.getNumberOfSlices();


        if (getEndSliceIndex() > nsclies){
             error               =   String.format(
                     "End slice number (%s) must be smaller\n"
                    + "than number of slices in the image (%s).\n"
                    + "Error is encountered while processing image\n"
                    + "%s.\n"
                    + "Exiting...", getEndSliceIndex() , nsclies, imgfile.getPath());

            DisplayText.popupErrorMessage(error);
            return false;
        }


        return true;

    }

    private static void createAndShowGUI () {

        //Create and set up the window.
        JFrame frame = new JFrame ("Bayes Model Image Pixels Selection");
        frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
        frame.addWindowListener(new java.awt.event.WindowAdapter() {

            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                DirectoryManager.shutDownDirectory();
            }
        });

        //Create and set up the content pane.
        ImageModelSelection  newContentPane = new ImageModelSelection ();
        newContentPane.setOpaque (true); //content panes must be opaque
        frame.setContentPane (newContentPane);

        //Display the window.
        frame.pack ();
        frame.setVisible (true);
    }
    public  static void main (String[] args) {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater (new Runnable () {
            public void run () {
                createAndShowGUI ();
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel SettingsPane;
    private javax.swing.JFormattedTextField endFormattedTextField;
    private javax.swing.JLabel endLabel;
    private javax.swing.JPanel graph_panel;
    private javax.swing.JPanel jPanel1;
    private interfacebeans.JResetSave jResetSave;
    private run.JRun jRun;
    private javax.swing.JSplitPane jSplitPane1;
    private interfacebeans.JServer jserver;
    private javax.swing.JButton loadSysModel_btn;
    private javax.swing.JButton loadUserModel_btn;
    private javax.swing.JLabel noiseStdDevLabel;
    private javax.swing.JPanel processSlice;
    private javax.swing.JPanel setup_pane;
    private javax.swing.JFormattedTextField startFormatetedTextField;
    private javax.swing.JLabel startLabel;
    private javax.swing.JFormattedTextField stdDevField;
    public javax.swing.JCheckBox useGaussianCheckBox;
    // End of variables declaration//GEN-END:variables
    public javax.swing.JFormattedTextField getEndFormattedTextField () {
        return endFormattedTextField;
    }
    public javax.swing.JFormattedTextField getStartFormatetedTextField () {
        return startFormatetedTextField;
    }
    public javax.swing.JFormattedTextField getStdDevField () {
        return stdDevField;
    }
    public javax.swing.JCheckBox           getUseGaussianCheckBox () {
        return useGaussianCheckBox;
    }




    protected String message;
    private int endSliceIndex                               =   1;
    private int startSliceIndex                             =   1;
    private double standardDeviation                        =   0;
    private boolean useGaussian                             =   false;




    public boolean           areModelsLoaded(){
        boolean noModelsLoaded  =  getModels().isEmpty();
        boolean modelsLoaded    =! noModelsLoaded;
        return  modelsLoaded;
    }
    public boolean           completeProgramFiles(){
        boolean isSuccess       =   false;
        int numOfModels         =   getNumberOfModels();
        File dir                =   DirectoryManager.getBayesOtherAnalysisDir();

        // write .f and .c files
        for (int i = 0; i < numOfModels ; i++) {
           EnterAsciiModel model = getModels().get(i);
           writeAsciiModelFile(model, i+1);

        }

        //write dummy .f files
        for (int i =  numOfModels; i <  TOTAL_NUMBER_OF_MODELS; i++) {
           Files.writeDummyFortranFile(dir, i+1);
        }
        isSuccess               =   true;
        return isSuccess;
    }
    public boolean           writeAsciiModelFile(EnterAsciiModel model, int index){
        boolean isSuccess               =   false;
        File asciiDir                   =   DirectoryManager.getBayesOtherAnalysisDir();
        String asciiModelName           =   Files. getStandardModelFileName( model.getName(), index);
        File src                        =   model.getModelFile();
        File dst                        =   new File (asciiDir, asciiModelName );

        Files.overwriteAndCopyFortanOrCFile(src, dst ,index);
        isSuccess               =   true;
        return isSuccess;
    }
  
    public int               getNumberOfModels(){
         return getModels().getNumberOfModels();
    }
    public int               getNumberOfVectors(){
         return getModels().getNumberOfVectors();
    }
    public int               getNumberOfDerrived(){
         return getModels().getNumberOfDerived();
    }
    public String            getMessage () {
        return message;
    }
    public AsciiModelList    getModels () {
        return JShowModels.getInstance().getModels();
    }

    public int               getEndSliceIndex () {
        return endSliceIndex;
    }
    public int               getStartSliceIndex () {
        return startSliceIndex;
    }
    public double            getStandardDeviation () {
        return standardDeviation;
    }
    public boolean           isUseGaussian () {
        return useGaussian;
    }

    public void              setEndSliceIndex ( int endSliceIndex ) {
        this.endSliceIndex = endSliceIndex;
    }
    public void              setStartSliceIndex ( int startSliceIndex ) {
        this.startSliceIndex = startSliceIndex;
    }
    public void              setStandardDeviation ( double standardDeviation ) {
        this.standardDeviation = standardDeviation;
        if (getStdDevField ()!=null){getStdDevField ().setValue(standardDeviation) ;}
    }
    public void              setUseGaussian ( boolean useGaussian ) {
        this.useGaussian = useGaussian;
        if( getUseGaussianCheckBox ()!= null){
            getUseGaussianCheckBox ().setSelected(useGaussian);
        }
    }
    
}
