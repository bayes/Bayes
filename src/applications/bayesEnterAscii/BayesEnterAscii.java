/*
 * BayesEnterAscii.java
 *
 * Created on February 18, 2008, 1:16 PM
 */

package applications.bayesEnterAscii;


import applications.model.AsciiModel;
import applications.model.EnterAsciiPackage;
import bayes.PackageManager;
import bayes.WriteBayesParams;
import bayes.JobDirections;
import bayes.BayesManager;
import bayes.DirectoryManager;
import run.JRun;
import javax.swing.*;
import java.io.*;
import utilities.*;
import interfacebeans.*;
import bayes.ParameterPrior;
import bayes.Enums.*;
import load.LoadAsciiModels.*;
import static load.gui.JRemoteFileChooser.*;
import ascii.ASCIIDataViewer;
import ascii.AsciiIO;
import bayes.BayesView;
import bayes.Reset;
import java.util.List;
import load.*;



/**
 *
 * @author  larry
 */
public class BayesEnterAscii extends javax.swing.JPanel 
                        implements 
                        AsciiModel,
                        EnterAsciiPackage,
                        java.beans.PropertyChangeListener
{
    
    public BayesEnterAscii () {
        PackageManager.setCurrentApplication(this);
        boolean isDeseralized = bayes.Serialize.deserializeCurrenExperiment();
        initComponents ();

        //AllViewers.addCodeViewer();
        AllViewers.addCodeViewer();
        BayesManager.pcs.addPropertyChangeListener(this);
        JShowModels.getInstance().addPropertyChangeListener(this);

        if(isDeseralized){
            setMessage(message);
            JRun.fireJobIDChange();
        }
        else {
            AllViewers.showInstructions();}

        generateLoadMessage( );
    }
  
  
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jbayesErrorMessage = new javax.swing.JLabel();
        jSplitPane1 = new javax.swing.JSplitPane();
        setup_pane = new javax.swing.JPanel();
        jRun = new run.JRun();
        jserver = interfacebeans.JServer.getInstance();
        jPanel1 = new javax.swing.JPanel();
        jSystemModel = new javax.swing.JButton();
        jUserModel = new javax.swing.JButton();
        jBuildModel = new javax.swing.JButton();
        jSavePriors = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        includeOutliersCheckBox = new javax.swing.JCheckBox();
        jResetSave = new interfacebeans.JResetSave();
        viewerPane = AllViewers.getInstance ();

        jbayesErrorMessage.setFont(new java.awt.Font("Arial Black", 1, 18));
        jbayesErrorMessage.setForeground(new java.awt.Color(153, 0, 0));
        jbayesErrorMessage.setName("jbayesErrorMessage"); // NOI18N

        setName("Form"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setName("jSplitPane1"); // NOI18N
        jSplitPane1.setOneTouchExpandable(true);

        setup_pane.setName("setup_pane"); // NOI18N

        jRun.setName("jRun"); // NOI18N

        jserver.setName("jserver"); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Load and Build Model"));
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jSystemModel.setFont(new java.awt.Font("Lucida Grande", 1, 12));
        jSystemModel.setText("  System  ");
        jSystemModel.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nLoad model from system directory.\n\n</font></p><html>\n\n\n"); // NOI18N
        jSystemModel.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jSystemModel.setName("jSystemModel"); // NOI18N
        jSystemModel.setPreferredSize(new java.awt.Dimension(125, 25));
        jSystemModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSystemModelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(jSystemModel, gridBagConstraints);

        jUserModel.setFont(new java.awt.Font("Lucida Grande", 1, 12));
        jUserModel.setText("User");
        jUserModel.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nLoad model from user directory.\n\n</font></p><html>\n\n\n"); // NOI18N
        jUserModel.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jUserModel.setName("jUserModel"); // NOI18N
        jUserModel.setPreferredSize(new java.awt.Dimension(125, 25));
        jUserModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUserModelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(jUserModel, gridBagConstraints);

        jBuildModel.setFont(new java.awt.Font("Lucida Grande", 1, 12));
        jBuildModel.setText("Build");
        jBuildModel.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nBuild (compile) model.\n\n</font></p><html>\n\n\n"); // NOI18N
        jBuildModel.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jBuildModel.setName("jBuildModel"); // NOI18N
        jBuildModel.setPreferredSize(new java.awt.Dimension(120, 25));
        jBuildModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBuildModelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(jBuildModel, gridBagConstraints);

        jSavePriors.setFont(new java.awt.Font("Lucida Grande", 1, 12));
        jSavePriors.setText("Save priors");
        jSavePriors.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\nSave current prior settings.\n\n</font></p><html>\n\n"); // NOI18N
        jSavePriors.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jSavePriors.setName("jSavePriors"); // NOI18N
        jSavePriors.setPreferredSize(new java.awt.Dimension(125, 25));

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, viewerPane, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), jSavePriors, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jSavePriors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSavePriorsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(jSavePriors, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Analysis Options"));
        jPanel2.setName("jPanel2"); // NOI18N

        includeOutliersCheckBox.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        includeOutliersCheckBox.setSelected(isIncludeOutliers());
        includeOutliersCheckBox.setText("Find Outliers"); // NOI18N
        includeOutliersCheckBox.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n<font color=\"red\" size = \"+1\"><bold> Enable outlier detection.</font></bold><br>  \n(i.e., look for residual<br>\nvalues that are larger than 3 standard deviations <br>\n and remove these outliers from the analysis.)</html>\n"); // NOI18N
        includeOutliersCheckBox.setContentAreaFilled(false);
        includeOutliersCheckBox.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        includeOutliersCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        includeOutliersCheckBox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rb.gif"))); // NOI18N
        includeOutliersCheckBox.setIconTextGap(16);
        includeOutliersCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        includeOutliersCheckBox.setName("includeOutliersCheckBox"); // NOI18N
        includeOutliersCheckBox.setRolloverEnabled(true);
        includeOutliersCheckBox.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbr.gif"))); // NOI18N
        includeOutliersCheckBox.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbrs.gif"))); // NOI18N
        includeOutliersCheckBox.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbs.gif"))); // NOI18N
        includeOutliersCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                includeOutliersCheckBoxActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(includeOutliersCheckBox)
                .addContainerGap(2, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(9, 9, 9)
                .add(includeOutliersCheckBox)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        jResetSave.setName("jResetSave"); // NOI18N

        org.jdesktop.layout.GroupLayout setup_paneLayout = new org.jdesktop.layout.GroupLayout(setup_pane);
        setup_pane.setLayout(setup_paneLayout);
        setup_paneLayout.setHorizontalGroup(
            setup_paneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(setup_paneLayout.createSequentialGroup()
                .add(8, 8, 8)
                .add(jRun, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 197, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jserver, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 195, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 225, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 161, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jResetSave, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 143, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(141, Short.MAX_VALUE))
        );
        setup_paneLayout.setVerticalGroup(
            setup_paneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, setup_paneLayout.createSequentialGroup()
                .add(setup_paneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jserver, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jRun, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .add(setup_paneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jResetSave, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, setup_paneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );

        setup_paneLayout.linkSize(new java.awt.Component[] {jPanel1, jPanel2, jResetSave, jRun, jserver}, org.jdesktop.layout.GroupLayout.VERTICAL);

        jSplitPane1.setLeftComponent(setup_pane);

        viewerPane.setMinimumSize(new java.awt.Dimension(300, 400));
        viewerPane.setName("viewerPane"); // NOI18N
        viewerPane.setPreferredSize(new java.awt.Dimension(300, 400));
        viewerPane.setLayout(new javax.swing.BoxLayout(viewerPane, javax.swing.BoxLayout.LINE_AXIS));
        jSplitPane1.setRightComponent(viewerPane);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void includeOutliersCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_includeOutliersCheckBoxActionPerformed
        includeOutliers  = this.getIncludeOutliersCheckBox().isSelected();
        clearPreviousRun();
}//GEN-LAST:event_includeOutliersCheckBoxActionPerformed
    private void jSavePriorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSavePriorsActionPerformed
        if(     getAsciiModel().isLoaded() == false){
            DisplayText.popupMessage("You cannot save the priors  until you load a model");
            return;
        }

        savePriors();
}//GEN-LAST:event_jSavePriorsActionPerformed
    private void jBuildModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBuildModelActionPerformed
        JShowModels.getInstance().build();
        clearPreviousRun();
}//GEN-LAST:event_jBuildModelActionPerformed
    private void jUserModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUserModelActionPerformed
        JShowModels.getInstance().loadUserModel();
         clearPreviousRun();
}//GEN-LAST:event_jUserModelActionPerformed
    private void jSystemModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSystemModelActionPerformed
        JShowModels.getInstance().loadSysModel();
        clearPreviousRun();
}//GEN-LAST:event_jSystemModelActionPerformed


    public void              propertyChange(java.beans.PropertyChangeEvent evt){

      if (evt.getPropertyName().equals(BayesManager.JRUN_JOB_START)){
          setActive(false);
          setMessage(message);
      }
      
      else if (evt.getPropertyName().equals(BayesManager.JRUN_JOB_END)){
           setActive(true);
           AllViewers.showResultsViewer();
      }

      
       else if (evt.getPropertyName().equals(BayesManager.JRUN_JOB_CANCELED)){
         setActive(true);
      }
      
      else if (evt.getPropertyName().equals(JShowModels.COMPILE_IS_RUN)){
          generateLoadMessage( );
      }

     else if (evt.getPropertyName().equals(BayesManager.COMPILE_ERRROR)){
          EnterAsciiModel.updateModelBuilt(getAsciiModel());
          generateLoadMessage( );
          String error = evt.getNewValue().toString();
          DisplayText.popupErrorMessage(error);
      }
     else if (evt.getPropertyName() .equals(JShowModels.NO_ASCII_MODEL_LOADED)){

          setMessage( EnterAsciiModel.NOT_LOADED_MESSAGE);
      }
      else if (evt.getPropertyName() .equals( JShowModels.ASCII_MODEL_IS_LOADED)){
          AsciiIO.clearAsciiFileNonCompatibleWithModel(this);

          generateLoadMessage( );


          AllViewers.showCodeViewer();
      }


   
   }
    public void              setPackageParameters(ObjectInputStream ois)throws Exception{
         EnterAsciiModel theModel           =   (EnterAsciiModel)ois.readObject();
         String     msg                     =   (String)ois.readObject();
         boolean    includeOult             =   (Boolean)ois.readObject();

         setMessage( msg);
         setIncludeOutliers( includeOult);
         JShowModels.getInstance().addModel(theModel);
       
    }
    public void              savePackageParameters(ObjectOutputStream oos){
        try{
             oos.writeObject( getAsciiModel());
             oos.writeObject(message);
             oos.writeObject(this.isIncludeOutliers());
        } catch (IOException exp){
             DirectoryManager.getSerializationFile().delete();
             exp.printStackTrace();
       }        
    }    
    public boolean           isReadyToRun(){
      // make sure data has been loaded
        File dir        =   DirectoryManager.getBayesOtherAnalysisDir();
        File[] files    =   ASCIIDataViewer.getInstance().getFiles();

        if (files == null || files.length == 0) {
           DisplayText.popupErrorMessage( "You must load data before you run the program.");
           return false;
        }

   // make sure the asciiModel has been loaded
       if(getAsciiModel().isLoaded() == false){
          DisplayText.popupErrorMessage( "Model is not loaded.");
          return false;
       }
         

        // make sure the asciiModel has been built
       if(getAsciiModel().isBuilt() == false){
           DisplayText.popupErrorMessage(
                "Before you can run the analysis, \n" +
                "you must verify the model is error free \n" +
                "using the \"Build Model\" button.");
          return false;
       }
        
        
     // make sure all data files exist
         for (File file : files) {
            if (!file.exists()) {
               DisplayText.popupErrorMessage("Data file " + file + "doesn't exist.");
               return false;
            }
        }

   
    

     // write the parameter file
       boolean bl  =  WriteBayesParams.writeParamsFile(this, dir);
       if (bl == false){
         DisplayText.popupErrorMessage("Failed to write Bayes.params file.");
           return false;
       }


       // save the priors
       savePriors();

       //  write "job.directions" file
       bl  =  JobDirections.writeFromProperties( JobDirections.BAYES_SUBMIT_ENTER_ASCII);
       if(bl == false){
          DisplayText.popupErrorMessage("Failed to write job.directions file.");
          return false;
        }
        return true;
    }
    public String            getProgramName(){
       return "BayesEnterAscii";
    }
    public String            getExtendedProgramName() { return "Bayesian Build Your Own 1D Model" ;}
    public int               getNumberOfAbscissa(){
        if(getAsciiModel().isLoaded()){   return getAsciiModel().getNumberOfAbscissa();}
        else  { return 0;}
    }
    public int               getNumberOfDataColumns(){
         if(getAsciiModel().isLoaded())  {   return getAsciiModel().getNumberOfDataCols();}
          /*make sure default is 1. Otherwise extracted image pixel
          *in the absense of loaded model, won't display
          */
         else                       {return 1 ;}
    }
    public int               getTotalNumberOfColumns(){
        int curNoCols = getNumberOfDataColumns();
        int curNoAbs  = getNumberOfAbscissa();
        int noOfCols;
        if(curNoAbs == 1){
            noOfCols = curNoAbs + curNoCols;
        } else{
            noOfCols = 1 + curNoAbs + curNoCols;
        }
        return noOfCols;}
    public int               getNumberOfPriors(){return  getAsciiModel().getNumberOfPriors();}
    public StringBuilder     getModelSpecificsForParamsFile(int PADLEN, String PADCHAR){
         int noParams    = 3 +  getAsciiModel().getNumberOfDerived();
         
         StringBuilder buffer = new StringBuilder();
         buffer.append(EOL);
        
         buffer.append (IO.pad("Package Parameters", -PADLEN, PADCHAR ));
         buffer.append(" = "+ noParams);
         buffer.append(EOL);
         
         buffer.append (IO.pad("Model Name", -PADLEN, PADCHAR ));
         buffer.append(" = "+ getAsciiModel().getName());
         buffer.append(EOL);
         
         buffer.append (IO.pad("Number of Vectors", -PADLEN, PADCHAR ));
         buffer.append(" = "+ getAsciiModel().getNumberOfModelVectors());
         buffer.append(EOL);

         
         int noDerived =  getAsciiModel().getNumberOfDerived();
         buffer.append (IO.pad("Number of Derived", -PADLEN, PADCHAR ));
         buffer.append(" = "+ noDerived );
         buffer.append(EOL);
       
         String [] Derived;
         Derived =  getAsciiModel().getDerived();
         for (int I = 0; I < noDerived; I++) {
             int index                 =    I+1;
             String fi                 = String.format("%02d",index  );
             String derived     =  "Derived " + fi;
             String derivedNum  =   Derived[I];

             buffer.append (IO.pad(derived, -PADLEN, PADCHAR ));
             buffer.append(" = "+ derivedNum);
             buffer.append(EOL);
         }
         
         return buffer;
     
    };
    public List <ParameterPrior>  getPriors() {
        return getAsciiModel().getPriors();
    }
    public String            getConstructorArg(){ return getAsciiModelName();}
    public String            getInstructions(){return PACKAGE_INTSRUCTIONS.ENTER_ASCII.getInstruction();}
    public boolean           isOutliers(){return isIncludeOutliers ();}
    public void              reset(){
          

            JShowModels.getInstance().removeAllModels();
            generateLoadMessage( );
            LoadAsciiModels.cleanModelFiles();

            setDefaults();

            clearPreviousRun();

            // show defualt viewer
            AllViewers.getInstance().showDefaultViewer();

    }
    public void             setActive(boolean enabled){
          AllViewers.getInstance().setActive(enabled);
          jSystemModel.setEnabled(enabled);
          jUserModel.setEnabled(enabled);
          getSavePriorButton().setEnabled(enabled);
          getBuildModelButton().setEnabled(enabled);
          includeOutliersCheckBox.setEnabled(enabled);
          jserver.setActive(enabled);
          jRun.setEnabled(enabled);
          jResetSave.setEnabled(enabled);

     }

    public void              clearPreviousRun(){
        // clear outputs of previous run
         Reset.clearAsciiResutls();

         // reset job status
         jRun.reset();

    }
    public void              setDefaults(){
       setIncludeOutliers(false);
       getIncludeOutliersCheckBox ().setSelected(isIncludeOutliers());
    }

    
 

    private static void createAndShowGUI () {
   
        //Create and set up the window.
        JFrame frame = new JFrame ("Bayesian Build Your Own 1D Model");
        frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
        frame.addWindowListener(new java.awt.event.WindowAdapter() {

            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                DirectoryManager.shutDownDirectory();
            }
        });


        //Create and set up the content pane.
        BayesEnterAscii newContentPane = new BayesEnterAscii();
        newContentPane.setOpaque (true); //content panes must be opaque
        frame.setContentPane (newContentPane);

        //Display the window.
        frame.pack ();
        frame.setVisible (true);
    }
    public  static void main (String[] args) {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater (new Runnable () {
            public void run () {
                createAndShowGUI ();
            }
        });
       
      
    }  
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JCheckBox includeOutliersCheckBox;
    private javax.swing.JButton jBuildModel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private interfacebeans.JResetSave jResetSave;
    private run.JRun jRun;
    private javax.swing.JButton jSavePriors;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton jSystemModel;
    private javax.swing.JButton jUserModel;
    private javax.swing.JLabel jbayesErrorMessage;
    private interfacebeans.JServer jserver;
    private javax.swing.JPanel setup_pane;
    private javax.swing.JPanel viewerPane;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
     public javax.swing.JButton getBuildModelButton() {
        return jBuildModel;
    }
     public javax.swing.JButton getSavePriorButton() {
        return jSavePriors;
    }
     public javax.swing.JCheckBox getIncludeOutliersCheckBox () {
        return includeOutliersCheckBox;
    }
     public String message                              = "";
     protected boolean includeOutliers                  = false;



     public boolean isIncludeOutliers () {
        return includeOutliers;
    }
     public String  getMessage      ( String aMessage ) { return message; }
     public void    setMessage      ( String aMessage ) {
        message =     aMessage;
        BayesView.setMenuBarMessage(message);
       // if (jbayesErrorMessage != null) {//jbayesErrorMessage.setText(message)}
        
    }


    
     public void             savePriors(){
       getAsciiModel().overwriteOriginalParamsFile();
       setMessage(getAsciiModel().getName() + ". "+"Priors have been saved"); 
    }   
     public void             setIncludeOutliers ( boolean includeOutliers ) {
        this.includeOutliers = includeOutliers;
        if (getIncludeOutliersCheckBox ()!=null){
            getIncludeOutliersCheckBox ().setSelected(includeOutliers);
        }
    }
 
     protected void          generateLoadMessage( ) {
        String msg          = getAsciiModel().getStatusMessage();
        setMessage(msg);

    }
     public EnterAsciiModel  getAsciiModel()    { return JShowModels.getInstance().getSingleModel();}
     public String           getAsciiModelName(){ return  getAsciiModel().getName();}



  

  
}
