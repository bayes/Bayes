/*
 * BayesBF.java
 *
 * Created on February 13, 2008, 12:10 PM
 */

package applications.bayesBF;
import run.JRun;
import bayes.ParameterPrior;
import bayes.PackageManager;
import bayes.DirectoryManager;
import javax.swing.*;
import java.io.*;
import bayes.JobDirections;
import bayes.WriteBayesParams;
import bayes.BayesManager;
import utilities.DisplayText;
import interfacebeans.*;
import applications.model.AsciiModel;
import bayes.Enums.*;
import ascii.ASCIIDataViewer;
import java.util.List;
import java.util.Vector;
import utilities.IO;
import bayes.ParameterPrior.ORDER_TYPE;
import bayes.ParameterPrior.PRIOR_TYPE;
import bayes.ParameterPrior.PARAMETER_TYPE;
import bayes.Reset;

/**
 *
 * @author  larry
 */
public class BayesBF extends javax.swing.JPanel implements AsciiModel,    bayes.ApplicationConstants, java.beans.PropertyChangeListener{
                                               
    
    public BayesBF() {
        PackageManager.setCurrentApplication(this);
        boolean isDeseralized   = bayes.Serialize. deserializeCurrenExperiment();
        
        initComponents ();

         BayesManager.pcs.addPropertyChangeListener(this);
        if(isDeseralized){
            JRun.fireJobIDChange();
        }
          else {AllViewers.showInstructions();}
    } 
 
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jRun = new run.JRun();
        jResetSave = new interfacebeans.JResetSave();
        jserver = new interfacebeans.JServer();
        graph_panel = AllViewers.getInstance ();

        setName("Form"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setName("jSplitPane1"); // NOI18N
        jSplitPane1.setOneTouchExpandable(true);

        jPanel1.setName("jPanel1"); // NOI18N

        jRun.setName("jRun"); // NOI18N

        jResetSave.setName("jResetSave"); // NOI18N

        jserver.setName("jserver"); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(jRun, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 235, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jserver, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 245, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jResetSave, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 134, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(342, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(jRun, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 95, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jResetSave, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jserver, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1Layout.linkSize(new java.awt.Component[] {jResetSave, jRun, jserver}, org.jdesktop.layout.GroupLayout.VERTICAL);

        jSplitPane1.setTopComponent(jPanel1);

        graph_panel.setName("graph_panel"); // NOI18N
        graph_panel.setLayout(new javax.swing.BoxLayout(graph_panel, javax.swing.BoxLayout.LINE_AXIS));
        jSplitPane1.setBottomComponent(graph_panel);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    
    public void             setPackageParameters(ObjectInputStream serializationFile) throws Exception{
         Prior = (List <ParameterPrior> )serializationFile.readObject();

    }
    public void             savePackageParameters(ObjectOutputStream serializationFile){
        try {
            serializationFile.writeObject(Prior);
        } catch (IOException ex) {
          ex.printStackTrace();
        }

    }
    public  boolean         isReadyToRun(){

        File dir        =   DirectoryManager.getBayesOtherAnalysisDir();
        File[] files    =   ascii.ASCIIDataViewer.getInstance().getFiles();

        if (files == null) {
            DisplayText.popupErrorMessage( "You must load data before you run the program");
            return false;
        }
        if (files.length != 2) {
             DisplayText.popupErrorMessage("You must load exactly 2 data sets");
            return false;
        }

// make sure all data files exist
        for (File file : files) {
            if (!file.exists()) {
                DisplayText.popupErrorMessage( String.format("File &s doesn't exist", file.getPath()));
                return false;
            }
        }
        
        if (getPriors().isEmpty()){
               DisplayText.popupErrorMessage( "Priors were not assigned yet.");
                return false;
        }        

// write the parameter file
       boolean bl  =  WriteBayesParams.writeParamsFile(this, dir);
       if (bl == false)return false;

//  write "job.directions" file
       bl  =  JobDirections.writeFromProperties(JobDirections.BAYES_SUBMIT);
       if(bl == false){
           DisplayText.popupErrorMessage( "Failed to write job.directions file.");
          return false;
        }

        return true;
    }    
    public  String          getProgramName(){return PACKAGE_NAME;}
    public String           getExtendedProgramName() { return "Behrens-Fisher Package" ;}

    public  int             getNumberOfAbscissa(){return 1;}
    public  int             getTotalNumberOfColumns(){return 2;}
    public  int             getNumberOfDataColumns(){return 1;}
    public  int             getNumberOfPriors(){return 2;}
    public  StringBuilder   getModelSpecificsForParamsFile(int PADLEN, String PADCHAR){
        return writeParams(PADLEN, PADCHAR);
    };
    public List <ParameterPrior>  getPriors() {
        if (Prior.isEmpty()){ initializePriors();}
        return Prior;
    }
    public String           getConstructorArg(){return null;}
    public String           getInstructions(){return PACKAGE_INTSRUCTIONS.Behrens_Fisher.getInstruction();}
    public boolean          isOutliers(){return false;}
    public void             reset(){
            // reset priors
            Prior.clear();

            setDefaults();


           // clear previous run
           clearPreviousRun();

             
            // show defualt viewer
            AllViewers.getInstance().showDefaultViewer();
    }

    public void              propertyChange(java.beans.PropertyChangeEvent evt){

      if (evt.getPropertyName().equals(bayes.BayesManager.JRUN_JOB_START)){
          setActive(false);
      }

      else if (evt.getPropertyName().equals(bayes.BayesManager.JRUN_JOB_END)){
           setActive(true);
           AllViewers.showResultsViewer();
      }


       else if (evt.getPropertyName().equals(bayes.BayesManager.JRUN_JOB_CANCELED)){
          setActive(true);
      }
    

   }
    public void             setActive(boolean enabled){
          AllViewers.getInstance().setActive(enabled);
          jserver.setActive(enabled);
          jResetSave.setEnabled(enabled);
          jRun.setEnabled(enabled);


     }

    public void              clearPreviousRun(){

          Reset.clearAsciiResutls();

         // reset job status
         jRun.reset();

    }
    public void              setDefaults(){

    }
    public static  List <ParameterPrior>  initializePriors(){
        File[] files = ascii.ASCIIDataViewer.getInstance().getFiles();
        if (files == null) return null;
        int numLoadedFiles   =   files.length;

        if (numLoadedFiles < 2) {
                   String message  = String.format("You can't assign priors until\n" +
                                                    "you have loaded two data sets" );
                   DisplayText.popupErrorMessage(message);
                   return null;
        }
        if (numLoadedFiles > 2) {
                   String message  = String.format("Two data sets are used by this package.\n" +
                                                   "%d data sets are currently loaded" , numLoadedFiles);
                   DisplayText.popupErrorMessage(message);
                   return null;
         }

        if (files[0].exists() == false) return null;
        if (files[1].exists() == false) return null;


        double [] d1;
        double [] d2;
       
     
        try {
            d1 = utilities.IO.nASCI2double(files[0], 2);
            d2 = utilities.IO.nASCI2double(files[1], 2);
        } catch (IOException ex) {
            ex.printStackTrace();
            return null;
        }
        
        int    n1    = d1.length;
        
        int    n2    = d2.length;
        double mean  = 0.0;
        for (int i = 0; i < n1; i++) {
            mean = mean + d1[i];
        }
        
        for (int i = 0; i < n2; i++) {
            mean = mean + d2[i];
        }
        mean = mean / (n1 + n2);
        
        double sd = 0.0;
        for (int i = 0; i < n1; i++) {
            sd = sd + (d1[i] - mean)*(d1[i] - mean);
        }
        
        for (int i = 0; i < n2; i++) {
            sd = sd + (d2[i] - mean)*(d2[i] - mean);
        }
        sd = Math.sqrt(sd / (n1 + n2));

        ParameterPrior pr               =   new ParameterPrior();
        if ( pr.isPriorEditable == true ){
            pr .name                = "Mean";
            pr .low                 = mean - 3*sd;
            pr .high                = mean + 3*sd;
            pr .mean                = mean;
            pr .sdev                = (pr.high - pr.low)/10;
            pr .priorType           = PRIOR_TYPE.GAUSSIAN;
            pr .order               = ORDER_TYPE.NotOrdered;
            pr .setParameterType(PARAMETER_TYPE.NonLinear);
            pr .isOrderEditable     = false;
            pr .isPriorTypeEditable = true;
            pr.isPriorEditable     = false;
        }
        Prior.add(pr);

       pr               =   new ParameterPrior();
        if (pr .isPriorEditable == true ){
            pr .name                = "StdDev";
            pr .low                 = 0.8*sd;
            pr .high                = 1.2*sd;
            pr .mean                = sd;
            pr .sdev                = (pr.high - pr.low)/10;
            pr .priorType           = PRIOR_TYPE.GAUSSIAN;
            pr .order               = ORDER_TYPE.NotOrdered;
            pr .setParameterType(PARAMETER_TYPE.NonLinear);
            pr .isOrderEditable     = false;
            pr .isPriorTypeEditable = true;
            pr .isPriorEditable     = false;
        }
       Prior.add(pr);
        return null;
    } 
    
    public static void createAndShowGUI() {

        JFrame frame = new JFrame ("The Behrens-Fisher Problem, The Difference In Means");
        frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
        frame.addWindowListener(new java.awt.event.WindowAdapter() {
           @Override
             public void windowClosing(java.awt.event.WindowEvent evt) {
                DirectoryManager.shutDownDirectory();
            }
        });

        BayesBF newContentPane = new BayesBF();
        newContentPane.setOpaque (true);
        frame.setContentPane (newContentPane);
        frame.pack ();
        frame.setVisible (true);   
    }
    public static void main(String[] args) {
       javax.swing.SwingUtilities.invokeLater (new Runnable () {
            public void run (){createAndShowGUI();}});
    } 
    public static StringBuilder writeParams(int PADLEN, String PADCHAR){
         StringBuilder buffer = new StringBuilder();
         File[] files   =   ASCIIDataViewer.getInstance().getFiles();

         buffer.append(" ");
         buffer.append(EOL);

         buffer.append (IO.pad("Package Parameters", -PADLEN, PADCHAR ));
         buffer.append(" = "+ "2");
         buffer.append(EOL);
         
     
         String curFileName = ASCIIDataViewer.getInstance().getInfoForDataFile(0);
         buffer.append (IO.pad("Input Data Set 1", -PADLEN, PADCHAR ));
         buffer.append(" = "+ curFileName);
         buffer.append(EOL);

        

         curFileName        =  ASCIIDataViewer.getInstance().getInfoForDataFile(1);
         buffer.append (IO.pad("Input Data Set 2", -PADLEN, PADCHAR ));
         buffer.append(" = "+ curFileName);
         buffer.append(EOL);
         
         return buffer;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel graph_panel;
    private javax.swing.JPanel jPanel1;
    private interfacebeans.JResetSave jResetSave;
    private run.JRun jRun;
    private javax.swing.JSplitPane jSplitPane1;
    private interfacebeans.JServer jserver;
    // End of variables declaration//GEN-END:variables
 
 private static  List <ParameterPrior> Prior  = new Vector <ParameterPrior>();
 public static String PACKAGE_NAME = "BayesBF";
}
