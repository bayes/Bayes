/*
 * BayesEnterAsciiModel.java
 *
 * Created on June 25, 2008, 10:29 AM
 */

package applications.bayesEnterAsciiModel;
import applications.model.AsciiModel;
import bayes.PackageManager;
import bayes.JobDirections;
import bayes.DirectoryManager;
import applications.model.EnterAsciiPackage;
import ascii.AsciiIO;
import bayes.BayesManager;
import run.JRun;
import javax.swing.*;
import bayes.Enums.*;
import java.io.*;
import utilities.*;
import interfacebeans.*;
import java.util.List;
import java.util.Vector;
import static load.LoadAsciiModels.*;
import static load.gui.JRemoteFileChooser.*;
import static bayes.BayesManager.*;
import bayes.ParameterPrior;
import bayes.Reset;
import load.LoadAsciiModels;

/**
 *
 * @author  apple
 */
public class BayesEnterAsciiModel   extends     javax.swing.JPanel
                                    implements  BayesEneterAsciiConstants ,
                                                AsciiModel,
                                                EnterAsciiPackage,
                                                java.beans.PropertyChangeListener
{

    /** Creates new form BayesEnterAsciiModel */
    public BayesEnterAsciiModel() {
        
        PackageManager.setCurrentApplication(this);
        boolean isDeseralized = bayes.Serialize. deserializeCurrenExperiment();

        AllViewers.removePriorsViewer();
        AllViewers.addCodeViewer();
        JShowModels.getInstance().setSingleMode(false);
        

        initComponents ();
        BayesManager.pcs.addPropertyChangeListener(this);
        JShowModels.getInstance().addPropertyChangeListener(this);


        if(isDeseralized){
            AllViewers.showCodeViewer();

            JRun.fireJobIDChange();
        }
        else {AllViewers.showInstructions();}
        
    }

    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSplitPane1 = new javax.swing.JSplitPane();
        setup_pane = new javax.swing.JPanel();
        jRun = new run.JRun();
        jserver = interfacebeans.JServer.getInstance();
        jPanel1 = new javax.swing.JPanel();
        loadSysModel_btn = new javax.swing.JButton();
        loadUserModel_btn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        includeOutliersCheckBox = new javax.swing.JCheckBox();
        dummyLabel = new javax.swing.JLabel();
        jResetSave = new interfacebeans.JResetSave();
        graph_panel = AllViewers.getInstance ();

        FormListener formListener = new FormListener();

        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setName("jSplitPane1"); // NOI18N
        jSplitPane1.setOneTouchExpandable(true);

        setup_pane.setName("setup_pane"); // NOI18N

        jRun.setName("jRun"); // NOI18N

        jserver.setName("jserver"); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Load Model"));
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(new java.awt.GridBagLayout());

        loadSysModel_btn.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        loadSysModel_btn.setText("System");
        loadSysModel_btn.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\nLoad models from system model directory.\n</html>\n\n\n\n\n"); // NOI18N
        loadSysModel_btn.setName("loadSysModel_btn"); // NOI18N
        loadSysModel_btn.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(loadSysModel_btn, gridBagConstraints);

        loadUserModel_btn.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        loadUserModel_btn.setText(" User ");
        loadUserModel_btn.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\nLoad models from user model directory.\n</html>\n\n\n\n"); // NOI18N
        loadUserModel_btn.setName("loadUserModel_btn"); // NOI18N
        loadUserModel_btn.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(loadUserModel_btn, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Analysis Options"));
        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setLayout(new java.awt.GridBagLayout());

        includeOutliersCheckBox.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        includeOutliersCheckBox.setSelected(isIncludeOutliers());
        includeOutliersCheckBox.setText(" Find Outliers"); // NOI18N
        includeOutliersCheckBox.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n<font color=\"red\" size = \"+1\"><bold> Enable outlier detection.</font></bold><br>  \n(i.e., look for residual values<br>\n that are larger than 3 standard deviations <br>\n and remove these outliers from the analysis.)\n\n</html>\n"); // NOI18N
        includeOutliersCheckBox.setContentAreaFilled(false);
        includeOutliersCheckBox.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        includeOutliersCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        includeOutliersCheckBox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rb.gif"))); // NOI18N
        includeOutliersCheckBox.setIconTextGap(16);
        includeOutliersCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        includeOutliersCheckBox.setName("includeOutliersCheckBox"); // NOI18N
        includeOutliersCheckBox.setRolloverEnabled(true);
        includeOutliersCheckBox.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbr.gif"))); // NOI18N
        includeOutliersCheckBox.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbrs.gif"))); // NOI18N
        includeOutliersCheckBox.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbs.gif"))); // NOI18N
        includeOutliersCheckBox.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel2.add(includeOutliersCheckBox, gridBagConstraints);

        dummyLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        dummyLabel.setText("  ");
        dummyLabel.setName("dummyLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel2.add(dummyLabel, gridBagConstraints);

        jResetSave.setName("jResetSave"); // NOI18N

        org.jdesktop.layout.GroupLayout setup_paneLayout = new org.jdesktop.layout.GroupLayout(setup_pane);
        setup_pane.setLayout(setup_paneLayout);
        setup_paneLayout.setHorizontalGroup(
            setup_paneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(setup_paneLayout.createSequentialGroup()
                .add(8, 8, 8)
                .add(jRun, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 235, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jserver, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 241, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 135, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jResetSave, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 117, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(144, Short.MAX_VALUE))
        );
        setup_paneLayout.setVerticalGroup(
            setup_paneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(setup_paneLayout.createSequentialGroup()
                .add(setup_paneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jserver, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jResetSave, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, setup_paneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jRun, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setup_paneLayout.linkSize(new java.awt.Component[] {jPanel1, jPanel2, jResetSave, jRun, jserver}, org.jdesktop.layout.GroupLayout.VERTICAL);

        jSplitPane1.setTopComponent(setup_pane);

        graph_panel.setName("graph_panel"); // NOI18N
        graph_panel.setLayout(new javax.swing.BoxLayout(graph_panel, javax.swing.BoxLayout.LINE_AXIS));
        jSplitPane1.setBottomComponent(graph_panel);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == loadSysModel_btn) {
                BayesEnterAsciiModel.this.loadSysModel_btnActionPerformed(evt);
            }
            else if (evt.getSource() == loadUserModel_btn) {
                BayesEnterAsciiModel.this.loadUserModel_btnActionPerformed(evt);
            }
            else if (evt.getSource() == includeOutliersCheckBox) {
                BayesEnterAsciiModel.this.includeOutliersCheckBoxActionPerformed(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

private void asciiModelSetupPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_asciiModelSetupPropertyChange
}//GEN-LAST:event_asciiModelSetupPropertyChange
private void loadSysModel_btnActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadSysModel_btnActionPerformed
        JShowModels.getInstance().loadSysModel();
        clearPreviousRun();
}//GEN-LAST:event_loadSysModel_btnActionPerformed
private void loadUserModel_btnActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadUserModel_btnActionPerformed
        JShowModels.getInstance().loadUserModel();
        clearPreviousRun();
}//GEN-LAST:event_loadUserModel_btnActionPerformed
private void includeOutliersCheckBoxActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_includeOutliersCheckBoxActionPerformed
    includeOutliers  = this.getIncludeOutliersCheckBox ().isSelected ();
    clearPreviousRun();

}//GEN-LAST:event_includeOutliersCheckBoxActionPerformed

    private static void createAndShowGUI () {
   
        //Create and set up the window.
        JFrame frame = new JFrame ("Bayes Ascii Model Selection");
        frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
        frame.addWindowListener(new java.awt.event.WindowAdapter() {

            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                DirectoryManager.shutDownDirectory();
            }
        });

        //Create and set up the content pane.
        BayesEnterAsciiModel  newContentPane = new BayesEnterAsciiModel ();
        newContentPane.setOpaque (true); //content panes must be opaque
        frame.setContentPane (newContentPane);

        //Display the window.
        frame.pack ();
        frame.setVisible (true);
    }
    public  static void main (String[] args) {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater (new Runnable () {
            public void run () {
                createAndShowGUI ();
            }
        });
    }  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel dummyLabel;
    private javax.swing.JPanel graph_panel;
    public javax.swing.JCheckBox includeOutliersCheckBox;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private interfacebeans.JResetSave jResetSave;
    private run.JRun jRun;
    private javax.swing.JSplitPane jSplitPane1;
    private interfacebeans.JServer jserver;
    private javax.swing.JButton loadSysModel_btn;
    private javax.swing.JButton loadUserModel_btn;
    private javax.swing.JPanel setup_pane;
    // End of variables declaration//GEN-END:variables
    public javax.swing.JButton getLoadSysModel_btn () {
        return loadSysModel_btn;
    }
    public javax.swing.JButton getLoadUserModel_btn () {
        return loadUserModel_btn;
    }
    public javax.swing.JCheckBox getIncludeOutliersCheckBox () {
        return includeOutliersCheckBox;
    }
    public interfacebeans.JServer getJserver() {
        return jserver;
    }
    protected String message;
    protected boolean includeOutliers   = false;



    
    public void              setPackageParameters(ObjectInputStream ois)throws Exception{
         AsciiModelList modelList           = (AsciiModelList)ois.readObject();
         boolean  isOutl                    = (Boolean)ois.readObject();


         JShowModels.getInstance().setModels( modelList );
         setIncludeOutliers(isOutl);
        }
    public void              savePackageParameters(ObjectOutputStream oos){
      try{
            oos.writeObject( getModels ());
            oos.writeObject ( this.isIncludeOutliers());
    
      } catch (IOException exp){
            DirectoryManager.getSerializationFile().delete();
            exp.printStackTrace();
      }       
    }    
    public boolean           isReadyToRun(){
       
      // make sure data has been loaded
        File dir            =   DirectoryManager.getBayesOtherAnalysisDir();
        File[] files        =   ascii.ASCIIDataViewer.getInstance().getFiles();
       

        if (files == null || files.length == 0) {
            DisplayText.popupErrorMessage( "You must load data before you run the program");
            return false;
        }
 
        // make sure all data files exist
         for (File file : files) {
            if (!file.exists()) {
              DisplayText.popupErrorMessage( "Data file " + file.getPath() + "doesn't exist.");
              return false;
            }
        }
     // make sure the model has been loaded
       if(  areModelsLoaded() == false ){
         DisplayText.popupErrorMessage("No model has been loaded.");
         return false;
       }

     // write the parameter file
        File paramsFile     = new File (dir, BayesManager.BAYES_PARAMS );
       boolean bl  =  EnterAsciiModelParamsWriter.writeParamsFile(this, this.getModels(), paramsFile);
       if (bl == false){
           DisplayText.popupErrorMessage("Failed to write Bayes.params file.");
           return false;
       }
 
       
        // write dummy .f files 
         bl =   completeProgramFiles();
         
         if(bl == false){
          DisplayText.popupErrorMessage("Failed to write dummy  fortran files.");
          return false;
        }
        
       //  write "job.directions" file
       bl  =  JobDirections.writeFromProperties(JobDirections.BAYES_SUBMIT_ENTER_ASCII);
       if(bl == false){
          DisplayText.popupErrorMessage("Failed to write job.directions file.");
          return false;
        }
        return true;
    }
    public String            getProgramName(){
       return "BayesModelAscii";
    }
    public String            getExtendedProgramName() { return "Bayes Ascii Model Selection" ;}
    public int               getNumberOfAbscissa(){
        return getModels().getNumberOfAbscissa();
    }
    public int               getNumberOfDataColumns(){
        return  getModels().getNumberOfColumns();
    }
    public int               getTotalNumberOfColumns(){
        int curNoCols = getNumberOfDataColumns();
        int curNoAbs  = getNumberOfAbscissa();
        int noOfCols;
        if(curNoAbs == 1){
            noOfCols = curNoAbs + curNoCols;
        } else{
            noOfCols = 1 + curNoAbs + curNoCols;
        }
        return noOfCols;}
    public int               getNumberOfPriors(){return  getPriors().size();}
    public StringBuilder     getModelSpecificsForParamsFile(int PADLEN, String PADCHAR){
        return new StringBuilder();
    };
    public List<ParameterPrior>getPriors() {
        return new Vector<ParameterPrior>();
    }
    public String            getConstructorArg(){return null;}
    public String            getInstructions(){return PACKAGE_INTSRUCTIONS.MODEL_ENTER_ASCII.getInstruction();}
    public boolean           isOutliers(){return isIncludeOutliers ();}
    // bayes enter ascii
    public void              reset (){
         JShowModels.getInstance().removeAllModels();
         LoadAsciiModels.cleanModelFiles();

         setDefaults();
         clearPreviousRun();

        // show defualt viewer
        AllViewers.getInstance().showDefaultViewer();

    }
    public void              clearPreviousRun(){
        // clear outputs of previous run
         Reset.clearAsciiResutls();

         // reset job status
         jRun.reset();

    }
    public void              setDefaults(){
         setIncludeOutliers (false);
    }
    public void              propertyChange(java.beans.PropertyChangeEvent evt){
      if (evt.getPropertyName().equals(bayes.BayesManager.JRUN_JOB_START)){
          setActive(false);
      }

      else if (evt.getPropertyName().equals(bayes.BayesManager.JRUN_JOB_END)){
           setActive(true);
           AllViewers.showResultsViewer();
      }


       else if (evt.getPropertyName().equals(bayes.BayesManager.JRUN_JOB_CANCELED)){
         setActive(true);
      }

      else if (evt.getPropertyName().equals(bayes.BayesManager.COMPILE_ERRROR)){

          String error = evt.getNewValue().toString();
          DisplayText.popupErrorMessage(error);
      }
       else if (evt.getPropertyName() .equals(JShowModels.NO_ASCII_MODEL_LOADED)){

      }
      else if (evt.getPropertyName() .equals( JShowModels.ASCII_MODEL_IS_LOADED)){
          // resetStaticVariables and keep ascii data compatible with current model
          AsciiIO.clearAsciiFileNonCompatibleWithModel(this);



          // no original fortan/c files must exist in BayesOtherAnalysis
          File asciidir             =   DirectoryManager.getBayesOtherAnalysisDir();
          cleanModelFiles(asciidir );


          AllViewers.showCodeViewer();
      }



   }
    @Override
    public void              setActive(boolean enabled){
          AllViewers.getInstance().setActive(enabled);

          getLoadSysModel_btn ().setEnabled(enabled);
          getLoadUserModel_btn ().setEnabled(enabled);
          getIncludeOutliersCheckBox ().setEnabled(enabled);
          getJserver().setActive(enabled);
          jRun.setEnabled(enabled);
          jResetSave.setEnabled(enabled);
     }
    public int               getNumberOfModels(){
         return getModels().getNumberOfModels();
    }
    public boolean           areModelsLoaded(){
        boolean noModelsLoaded  =  getModels().isEmpty();
        boolean modelsLoaded    =! noModelsLoaded;
        return  modelsLoaded;       
    }
    public boolean           completeProgramFiles(){
        boolean isSuccess       =   false;
        int numOfModels         =   getNumberOfModels();
        File dir                =   DirectoryManager.getBayesOtherAnalysisDir();
        
        // write .f and .c files
        for (int i = 0; i < numOfModels ; i++) {
           EnterAsciiModel model = getModels().get(i);
           writeAsciiModelFile(model, i+1);
            
        }
        
        //write dummy .f files
        for (int i =  numOfModels; i <  TOTAL_NUMBER_OF_MODELS; i++) {
           Files.writeDummyFortranFile(dir, i+1);
        }
        isSuccess               =   true;
        return isSuccess;
    }
    public boolean           writeAsciiModelFile(EnterAsciiModel model, int index){
        boolean isSuccess               =   false;
        File asciiDir                   =   DirectoryManager.getBayesOtherAnalysisDir();
        String asciiModelName           =   Files. getStandardModelFileName( model.getName(), index);
        File src                        =   model.getModelFile();
        File dst                        =   new File (asciiDir, asciiModelName );
        
        Files.overwriteAndCopyFortanFile(src, dst ,index);
        isSuccess               =   true;
        return isSuccess;
    }

    public int               getNumberOfVectors(){
         return getModels().getNumberOfVectors();
    }
    public int               getNumberOfDerrived(){
         return getModels().getNumberOfDerived();
    }
 
    public AsciiModelList    getModels () {
        return JShowModels.getInstance().getModels();
    }

       
    public boolean          isIncludeOutliers () {
        return includeOutliers;
    }
    public void             setIncludeOutliers ( boolean includeOutliers ) {
        this.includeOutliers = includeOutliers;
        if( getIncludeOutliersCheckBox () != null){
             getIncludeOutliersCheckBox ().setSelected( includeOutliers);
        }
    }
   

   

  







}
