/*
 * BayesMtZKinetics.java
 *
 * Created on January 31, 2008, 8:37 AM
 */

package applications.bayesMtZKinetics;
import run.JRun;
import applications.model.AsciiModel;
import bayes.ParameterPrior;
import bayes.PackageManager;
import bayes.DirectoryManager;
import javax.swing.*;
import java.util.*;
import java.io.*;
import bayes.JobDirections;
import bayes.WriteBayesParams;
import utilities.DisplayText;
import interfacebeans.*;
import java.text.*;
import static bayes.BayesManager.*;
import bayes.BayesManager;
import load.gui.JRemoteFileChooser;
import bayes.Enums.*;
import ascii.ASCIIDataViewer;
import bayes.BayesView;
import bayes.Reset;
import utilities.IO;

/**
 *
 * @author  larry
 */
public class BayesMtZKinetics extends javax.swing.JPanel implements AsciiModel,bayes.ApplicationConstants,
                                                java.beans.PropertyChangeListener{
   
    public static String WATER_VISCOSITY_TABLE_NAME =  "WaterViscosityTable";
    private static final long serialVersionUID      =   6170037639785281128L;
    public static final double INITIAL_TEMPERATURE  =   0.0;
    private Hashtable <String, Double> mapFileTemp  =   new  Hashtable <String, Double>();
    private double  setTempSigma                    =   0.1;
    private double  setTemp                         =   0.0;
    private File    visFile                         =   new File("");    
    private boolean ignoreEvents                    =   false;
    
    public BayesMtZKinetics() {
       startMtZKinetics();
    } 
    private void startMtZKinetics(){
        
        PackageManager.setCurrentApplication(this);
        boolean isDeseralized = bayes.Serialize. deserializeCurrenExperiment();
        initComponents();

        AllViewers.removePriorsViewer();
        ASCIIDataViewer.getInstance().addPropertyChangeListener(this);
        PackageManager.setCurrentApplication(this);
        BayesManager.pcs.addPropertyChangeListener(this);
        
        
        
        boolean isVisTable = getDefaultVisTable();
       
        if (isVisTable == false) {
            String message = String.format( "Default viscosity table file can't be loaded. \n"
                    +   "Make sure that %s file is located in \n" +
                    "%s", WATER_VISCOSITY_TABLE_NAME, DirectoryManager.getSystemModelURL());
            JOptionPane.showMessageDialog(new JFrame(),message, "Message",
                                            JOptionPane.WARNING_MESSAGE);
            return ;
        }
       
        
        
        if(isDeseralized){
            jSetTempSigma.setValue(setTempSigma);
            int no = ASCIIDataViewer.getInstance().getFiles().length;
            if(no != 0){
               File curSelectedFile =   ASCIIDataViewer.getInstance(). getSelectedFile();
               processDataFileChanged(curSelectedFile);
            }
            JRun.fireJobIDChange();
        }
        else {AllViewers.showInstructions();}
    }
    public void propertyChange(java.beans.PropertyChangeEvent evt){
        
      if (evt.getPropertyName().equals(bayes.BayesManager.JRUN_JOB_START)){
            setActive (false);
      }
      
      else if (evt.getPropertyName().equals(bayes.BayesManager.JRUN_JOB_END)){
            setActive (true);
             AllViewers.showResultsViewer();
      }
      else if(evt.getPropertyName().equals(BayesManager.JRUN_JOB_CANCELED)){
            setActive (true);
      }

      else if (evt.getPropertyName().equals( ASCIIDataViewer.DATA_FILE_CHANGE_MESSAGE)){
          File file = (File)evt.getNewValue();
          processDataFileChanged(file);
      }
      
      else if (evt.getPropertyName().equals( ASCIIDataViewer.DATA_FILE_LOADED_MESSAGE)){
          File curSelectedFile = (File)evt.getNewValue();
          processDataFileLoaded(curSelectedFile);

          clearPreviousRun();
          return;
      }
      else if (evt.getPropertyName().equals( ASCIIDataViewer.DATA_FILE_DELETED_MESSAGE)){
          String deletedFile = evt.getNewValue().toString();
          processDataFileDeleted(deletedFile);

          clearPreviousRun();
          return;
      }
   }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSplitPane1 = new javax.swing.JSplitPane();
        tool_pane = new javax.swing.JPanel();
        temp_pane = new javax.swing.JPanel();
        tempSetLabel = new javax.swing.JLabel();
        jSetTemp = new javax.swing.JFormattedTextField();
        tempUncertainityLabel = new javax.swing.JLabel();
        jSetTempSigma = new JFormattedTextField(new DecimalFormat("##0.0#"));
        jViscotiyTablePane = new javax.swing.JPanel();
        jLoadVis = new javax.swing.JButton();
        showVis_btn = new javax.swing.JButton();
        jRun = new run.JRun();
        jserver = interfacebeans.JServer.getInstance();
        jResetSave = new interfacebeans.JResetSave();
        graph_panel = AllViewers.getInstance();

        setMaximumSize(new java.awt.Dimension(5000, 5000));
        setName("Form"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setName("jSplitPane1"); // NOI18N
        jSplitPane1.setOneTouchExpandable(true);

        tool_pane.setName("tool_pane"); // NOI18N

        temp_pane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Temperature in C", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        temp_pane.setName("temp_pane"); // NOI18N
        temp_pane.setPreferredSize(new java.awt.Dimension(142, 60));
        temp_pane.setLayout(new java.awt.GridLayout(2, 2));

        tempSetLabel.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        tempSetLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        tempSetLabel.setText("Set "); // NOI18N
        tempSetLabel.setName("tempSetLabel"); // NOI18N
        temp_pane.add(tempSetLabel);

        jSetTemp.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.0#"))));
        jSetTemp.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jSetTemp.setToolTipText("Set temperature in Celsius for current data set."); // NOI18N
        jSetTemp.setName("jSetTemp"); // NOI18N
        jSetTemp.setValue(setTemp);
        jSetTemp.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jSetTempPropertyChange(evt);
            }
        });
        temp_pane.add(jSetTemp);

        tempUncertainityLabel.setFont(new java.awt.Font("Dialog", 1, 13));
        tempUncertainityLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        tempUncertainityLabel.setText("Uncertainity "); // NOI18N
        tempUncertainityLabel.setName("tempUncertainityLabel"); // NOI18N
        temp_pane.add(tempUncertainityLabel);

        jSetTempSigma.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.0#"))));
        jSetTempSigma.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jSetTempSigma.setToolTipText("Set uncertainity for ALL temperatures."); // NOI18N
        jSetTempSigma.setName("jSetTempSigma"); // NOI18N
        jSetTempSigma.setValue(setTempSigma);
        jSetTempSigma.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jSetTempSigmaPropertyChange(evt);
            }
        });
        temp_pane.add(jSetTempSigma);

        jViscotiyTablePane.setBorder(javax.swing.BorderFactory.createTitledBorder("Viscosity Table"));
        jViscotiyTablePane.setName("jViscotiyTablePane"); // NOI18N
        jViscotiyTablePane.setLayout(new java.awt.GridBagLayout());

        jLoadVis.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLoadVis.setText(" Load "); // NOI18N
        jLoadVis.setToolTipText("Navigate to and load a non-water viscosity table."); // NOI18N
        jLoadVis.setName("jLoadVis"); // NOI18N
        jLoadVis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLoadVisActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jViscotiyTablePane.add(jLoadVis, gridBagConstraints);

        showVis_btn.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        showVis_btn.setText(" Show"); // NOI18N
        showVis_btn.setToolTipText("Navigate to and load a non-water viscosity table."); // NOI18N
        showVis_btn.setName("showVis_btn"); // NOI18N
        showVis_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showVis_btnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jViscotiyTablePane.add(showVis_btn, gridBagConstraints);

        jRun.setName("jRun"); // NOI18N

        jserver.setName("jserver"); // NOI18N

        jResetSave.setName("jResetSave"); // NOI18N

        org.jdesktop.layout.GroupLayout tool_paneLayout = new org.jdesktop.layout.GroupLayout(tool_pane);
        tool_pane.setLayout(tool_paneLayout);
        tool_paneLayout.setHorizontalGroup(
            tool_paneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(tool_paneLayout.createSequentialGroup()
                .add(jRun, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 191, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jserver, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 184, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(temp_pane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 207, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jViscotiyTablePane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 142, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jResetSave, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 146, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(298, 298, 298))
        );
        tool_paneLayout.setVerticalGroup(
            tool_paneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(temp_pane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 75, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(jRun, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
            .add(tool_paneLayout.createSequentialGroup()
                .add(jserver, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(jViscotiyTablePane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .add(tool_paneLayout.createSequentialGroup()
                .add(jResetSave, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tool_paneLayout.linkSize(new java.awt.Component[] {jResetSave, jRun, jViscotiyTablePane, jserver, temp_pane}, org.jdesktop.layout.GroupLayout.VERTICAL);

        jSplitPane1.setTopComponent(tool_pane);

        graph_panel.setForeground(new java.awt.Color(204, 204, 204));
        graph_panel.setMaximumSize(new java.awt.Dimension(2000, 2000));
        graph_panel.setName("graph_panel"); // NOI18N
        graph_panel.setLayout(new javax.swing.BoxLayout(graph_panel, javax.swing.BoxLayout.LINE_AXIS));
        jSplitPane1.setBottomComponent(graph_panel);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jLoadVisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLoadVisActionPerformed
            File startDir       =   DirectoryManager. getBayesDir();
            JFileChooser fc     =   new JFileChooser(startDir);
            fc.setMultiSelectionEnabled(false);
            int returnVal       =   fc.showOpenDialog(fc);
            if (returnVal      !=   JFileChooser.APPROVE_OPTION){return;}
            visFile             =   fc.getSelectedFile();
            
            clearPreviousRun();
}//GEN-LAST:event_jLoadVisActionPerformed
    private void jSetTempPropertyChange (java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jSetTempPropertyChange
        if (ignoreEvents == true) {return;}
        
        if (evt.getPropertyName().equalsIgnoreCase("value")){
            String curFileOrigName      =    getFileIdentifier();
            Double curTemperature       =   ((Number)jSetTemp.getValue()).doubleValue();
            if (curFileOrigName != null ||  curTemperature != null){
                mapFileTemp.put(curFileOrigName, curTemperature);
            }

           clearPreviousRun();
      }
      
    }//GEN-LAST:event_jSetTempPropertyChange
    private void jSetTempSigmaPropertyChange (java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jSetTempSigmaPropertyChange
         if (ignoreEvents == true) {return;}  
         if (evt.getPropertyName().equalsIgnoreCase("value")){
             setTempSigma =   (Double)jSetTempSigma.getValue();
              clearPreviousRun();
          }
    }//GEN-LAST:event_jSetTempSigmaPropertyChange

private void showVis_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showVis_btnActionPerformed
        File userModelDir  = DirectoryManager.getUserModelDir();
        
        if (visFile.exists()) {  AllViewers.showMessage(visFile);}
        else{
            String message = "File " +WATER_VISCOSITY_TABLE_NAME + " doesn't exist in " 
                    + userModelDir.getPath() + " directory";
            DisplayText.popupMessage(message);
            
        }
        
}//GEN-LAST:event_showVis_btnActionPerformed
  
    public void             setPackageParameters(ObjectInputStream serializationFile) throws Exception{
        
        mapFileTemp     = (Hashtable <String, Double>)serializationFile.readObject();
        double temp     = (Double)serializationFile.readObject();
        visFile         = (File)serializationFile.readObject();

        setTemperatureSigma(temp, false);
    }
    public void             savePackageParameters(ObjectOutputStream serializationFile){
       try{
            serializationFile.writeObject(mapFileTemp);
            serializationFile.writeObject(setTempSigma);
            serializationFile.writeObject(visFile);
        } catch (IOException exp){
             DirectoryManager.getSerializationFile().delete();
       }        
    }
    public boolean          isReadyToRun(){
        // make sure data has been loaded
        File dir        =    DirectoryManager.getBayesOtherAnalysisDir();
        File[] files    =    ASCIIDataViewer.getInstance().getFiles();

        if (files == null || files.length == 0) {
            DisplayText.popupErrorMessage( "You must load data before you run the program.");
            return false;
        }

        if (files.length < 2) {
             DisplayText.popupErrorMessage(  "You must load at least 2 data sets.");
            return false;
        }
    // make sure all data files exist
         for (File file : files) {
            if (!file.exists()) {
             DisplayText.popupErrorMessage( "Data file " + file + "doesn't exist.");
            return false;
            }
            
            String originalFileName =    ASCIIDataViewer.getAsciiDataFileSource(file);

            if( mapFileTemp .containsKey(originalFileName)== false){
                 DisplayText.popupErrorMessage(  "Dataset " + originalFileName + " can not be found.");
                return false;
            }
            
            double curTemp = mapFileTemp.get(originalFileName);
            if (curTemp ==INITIAL_TEMPERATURE ){

                String error = String.format("Temperature is not set for file %s (%s). \n" +
                                             "Exit run.",  originalFileName, file.getName());
                DisplayText.popupErrorMessage( error);
                return false;
            
            }
        }
       
    

       // Copy the Viscosity file into the analysis directory       
       File asciiDir            =   DirectoryManager.getBayesOtherAnalysisDir();
       File visFileTo           =   new File(asciiDir,"Viscosity.Table");
       boolean isCopied         =   utilities.IO.copyFile(visFile,visFileTo);         

       if (isCopied == false ){
            DisplayText.popupErrorMessage( "Failed to create "+ visFileTo.getPath() + " file.");
           return false;
       
       }
       
       // write the parameter file
       boolean bl  =  WriteBayesParams.writeParamsFile(this, dir);
       if (bl == false){
            DisplayText.popupErrorMessage( "Failed to write Bayes.params file.");
           return false;
       }
        
       //  write "job.directions" file
         bl     =  JobDirections.writeFromProperties(JobDirections.BAYES_SUBMIT);
         if(bl == false){
             DisplayText.popupErrorMessage( "Failed to write job.directions file.");
            return false;
         }
        return true;
    }
    public String           getProgramName(){return "BayesMtZKinetics";}
    public String           getExtendedProgramName() { return "Bayesian Magnetization Transfer Kinetics" ;}
    public int              getNumberOfAbscissa(){return 1;}
    public int              getNumberOfDataColumns(){return 2;}
    public int              getTotalNumberOfColumns(){return 3;}
    public int              getNumberOfPriors(){return 0;}
    public StringBuilder    getModelSpecificsForParamsFile(int PADLEN, String PADCHAR){
         StringBuilder buffer = new StringBuilder();

         buffer.append(" ");
         buffer.append(EOL);

         int noParams = 2 + ASCIIDataViewer.getInstance().getFiles().length;
         buffer.append (IO.pad("Package Parameters", -PADLEN, PADCHAR ));
         buffer.append(" = "+ noParams);
         buffer.append(EOL);
         
         String work = ASCII_DIR_NAME + spr + "Viscosity.Table";
         buffer.append (IO.pad("Viscosity.Table", -PADLEN, PADCHAR ));
         buffer.append(" = "+ work);
         buffer.append(EOL);
         
         String f           = "%1.4E";
         String tempsigma   =    String.format(f,setTempSigma);
         buffer.append (IO.pad("Temperature Uncertainity", -PADLEN, PADCHAR ));
         buffer.append(" = "+ tempsigma );
         buffer.append(EOL);
        
        
         File []  files =   ASCIIDataViewer.getInstance().getFiles();
         
          for (int i = 0; i < files.length; i++) {
            String key  =   ASCIIDataViewer.getAsciiDataFileSource(files[i]);
            double val  =   mapFileTemp.get(key);
            String tempset      =   "Temp set  " + (i+1);
            String tempVal      =   String.format(f,val);

            buffer.append (IO.pad(tempset , -PADLEN, PADCHAR ));
            buffer.append(" = "+ tempVal  );
            buffer.append(EOL);
        }
          
         return buffer;
    };
    public List <ParameterPrior> getPriors() {
        return new Vector <ParameterPrior>();
    }
    public String           getConstructorArg(){return null;}
    public String           getInstructions(){return PACKAGE_INTSRUCTIONS.MTz_KINETICS.getInstruction();}
    public boolean          isOutliers(){return includeOutliers;}
    public void             reset(){
          
           setDefaults();
           clearPreviousRun();

            // show defualt viewer
            AllViewers.getInstance().showDefaultViewer();
    }
    public void              clearPreviousRun(){

          Reset.clearAsciiResutls();

         // reset job status
         jRun.reset();

    }
    public void              setDefaults(){
          mapFileTemp.clear();     
          setTemperatureSigma(0.1, false);
          setTemperature(0.0, false);
          getDefaultVisTable();
          setText("");
    }
    public void             setActive (boolean isEnabled){
          AllViewers.getInstance().setActive(isEnabled);

          jSetTemp.setEnabled(isEnabled);
          jSetTempSigma.setEnabled(isEnabled);
          jLoadVis.setEnabled(isEnabled);
          showVis_btn.setEnabled(isEnabled);
          jserver.setActive(isEnabled);
          jRun.setEnabled(isEnabled);
          jResetSave.setEnabled(isEnabled);

          tempSetLabel.setEnabled(isEnabled);
          tempUncertainityLabel.setEnabled(isEnabled);
    }
    public void              destroy(){};
    
    
    private static void     createAndShowGUI () {
    
        //Create and set up the window.
        JFrame frame = new JFrame ("Bayesian Magnetization Transfer Kinetics");
        frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
        frame.addWindowListener(new java.awt.event.WindowAdapter() {
           @Override
             public void windowClosing(java.awt.event.WindowEvent evt) {
                DirectoryManager.shutDownDirectory();
            }
        });
     
        //Create and set up the content pane.
        BayesMtZKinetics newContentPane = new BayesMtZKinetics();
        newContentPane.setOpaque (true); //content panes must be opaque
        frame.setContentPane (newContentPane);
        
        //Display the window.
        frame.pack ();
        frame.setVisible(true);
    }
    public  static void     main (String[] args) {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater (new Runnable () {
            public void run () {
                createAndShowGUI ();
            }
        });
    }   
  
    public boolean          getDefaultVisTable() {
        String visFileUrl   =   getDefailtVisTableFile();
        File userModelDir   =   DirectoryManager.getUserModelDir();
        
        if (userModelDir.exists() == false) {userModelDir.mkdirs();}
        visFile = new File (userModelDir,WATER_VISCOSITY_TABLE_NAME );
        
        try{
            boolean isDownloaded = JRemoteFileChooser.downloadFile(visFileUrl, visFile);
            return isDownloaded;
        
        } catch(java.io.FileNotFoundException exp ){
            exp.printStackTrace();
            String message = String.format( "Default viscosity table file can't be loaded. \n"
                    +   "Make sure that %s file is located in \n" +
                    "%s", WATER_VISCOSITY_TABLE_NAME, DirectoryManager.getSystemModelURL());
            JOptionPane.showMessageDialog(new JFrame(),message, "Message",
                                            JOptionPane.WARNING_MESSAGE);
            return false ;
        }catch(Exception exp){
            exp.printStackTrace();
            return false;
        }
            
       
    }
    public String           getDefailtVisTableFile()  {
        String sysModelDir            = DirectoryManager.getSystemModelURL();
        String  visTableFile          = sysModelDir + DirectoryManager.spr  + WATER_VISCOSITY_TABLE_NAME;
        return  visTableFile ;
    }
    
    public void             processDataFileChanged(File curSelectedFile){
            String curSelectedFileName    = getFileIdentifier();
            double curTemp                = getTemperatureForSelectedFile();


            setTemperature( curTemp, false);
            setText(curSelectedFileName);
   }
    public void             processDataFileLoaded(File curLoadedFile){
        ASCIIDataViewer viewer      =   ASCIIDataViewer.getInstance();
        String curLoadedOrigName    =   viewer.getAscciDescriptor().getSourceShortName();
        File[] files                =   viewer.getFiles();
        
      
        for (File file : files) {
            String curFileName = ASCIIDataViewer.getAsciiDataFileSource(file);
            if(mapFileTemp.containsKey(curFileName) == false){
                mapFileTemp.put(curFileName,setTemp);

            }
        }
        
        setText(curLoadedOrigName); 
    }
    public void             processDataFileDeleted(String deletedFile){
        if(!mapFileTemp.containsKey(deletedFile)){
                mapFileTemp.remove(deletedFile);
        }

        if (deletedFile.equals(getText())){setText("");}
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel graph_panel;
    private javax.swing.JButton jLoadVis;
    private interfacebeans.JResetSave jResetSave;
    private run.JRun jRun;
    protected javax.swing.JFormattedTextField jSetTemp;
    protected javax.swing.JFormattedTextField jSetTempSigma;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel jViscotiyTablePane;
    private interfacebeans.JServer jserver;
    private javax.swing.JButton showVis_btn;
    private javax.swing.JLabel tempSetLabel;
    private javax.swing.JLabel tempUncertainityLabel;
    private javax.swing.JPanel temp_pane;
    private javax.swing.JPanel tool_pane;
    // End of variables declaration//GEN-END:variables
    private boolean includeOutliers         =   false;


    public void     setTemperatureSigma ( double setTempSigma,  boolean notifyListeners ) {
        this.setTempSigma = setTempSigma;
        if (jSetTempSigma != null) {
                    ignoreEvents =   !notifyListeners;        
                    jSetTempSigma.setValue(setTempSigma);
                    ignoreEvents =  false;
        }
    }
    public void     setTemperature ( double setTemp, boolean notifyListeners ) {
        this.setTemp = setTemp;
          if (jSetTemp != null) {
                    ignoreEvents =   !notifyListeners;
                    jSetTemp.setValue(setTemp);
                    ignoreEvents =  false;
          }
    }
   
    public double   getTemperatureForSelectedFile(){
          String curSelectedFileName    =  getFileIdentifier();
          double curTemp                = INITIAL_TEMPERATURE;
          try{
                curTemp = mapFileTemp.get(curSelectedFileName);
                return curTemp;
          } catch(NullPointerException exp){
                return INITIAL_TEMPERATURE;
          }
          
    }
    
    
    public String  getText(){
        String str  = null;
        str         = BayesView.getMenuBarMessage();
        return str;
    }
    public void     setText(String message){
           BayesView.setMenuBarMessage(message);
    }

    public String getFileIdentifier(){
            String curFileOrigName      =
                    ASCIIDataViewer.getInfoForCurrentDataFile();
            return curFileOrigName;
    }
    
    
}
