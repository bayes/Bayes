/*
 * BayesMtZ.java
 *
 * Created on January 29, 2008, 10:40 AM
 */

package applications.bayesMtZ;
import bayes.ParameterPrior;
import bayes.PackageManager;
import bayes.DirectoryManager;
import javax.swing.*;
import java.io.*;
import bayes.JobDirections;
import bayes.WriteBayesParams;
import utilities.IO;
import interfacebeans.*;
import bayes.BayesManager;
import bayes.Enums.*;
import ascii.ASCIIDataViewer;
import java.util.List;
import java.util.Vector;
import run.JRun;
import utilities.DisplayText;
import bayes.ParameterPrior.ORDER_TYPE;
import bayes.ParameterPrior.PRIOR_TYPE;
import bayes.ParameterPrior.PARAMETER_TYPE;
import bayes.Reset;

/**
 *
 * @author  larry
 */
public class BayesMtZ extends javax.swing.JPanel implements applications.model.AsciiModel,
                                         java.beans.PropertyChangeListener   , bayes.ApplicationConstants                      {

    public BayesMtZ() {
        startMtZ();
    }
    
    private void startMtZ(){
        PackageManager.setCurrentApplication(this);
        boolean isDeseralized = bayes.Serialize.deserializeCurrenExperiment();
        initComponents();
  
        BayesManager.pcs.addPropertyChangeListener(this);
        if(isDeseralized){JRun.fireJobIDChange();}
        else {AllViewers.showInstructions();}
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        setup_panel = new javax.swing.JPanel();
        jRun = new run.JRun();
        jserver = new interfacebeans.JServer();
        analysOptionPane = new javax.swing.JPanel();
        includeOutliersCheckBox = new javax.swing.JCheckBox();
        jLabel11 = new javax.swing.JLabel();
        jResetSave = new interfacebeans.JResetSave();
        graph_panel = AllViewers.getInstance();

        setName("Form"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setName("jSplitPane1"); // NOI18N
        jSplitPane1.setOneTouchExpandable(true);

        setup_panel.setName("setup_panel"); // NOI18N

        jRun.setName("jRun"); // NOI18N

        jserver.setName("jserver"); // NOI18N

        analysOptionPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Analysis Options"));
        analysOptionPane.setName("analysOptionPane"); // NOI18N
        analysOptionPane.setLayout(new java.awt.GridLayout(2, 1, 4, 0));

        includeOutliersCheckBox.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        includeOutliersCheckBox.setSelected( isIncludeOutliers ());
        includeOutliersCheckBox.setText("Find Outliers"); // NOI18N
        includeOutliersCheckBox.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n<font color=\"red\" size = \"+1\"><bold> Enable outlier detection.</font></bold><br>  \n(i.e., look for residual values <br>\nthat are larger than 3 standard deviations <br>\n and remove these outliers from the analysis.)</html>\n\n\n"); // NOI18N
        includeOutliersCheckBox.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        includeOutliersCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        includeOutliersCheckBox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rb.gif"))); // NOI18N
        includeOutliersCheckBox.setIconTextGap(16);
        includeOutliersCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        includeOutliersCheckBox.setName("includeOutliersCheckBox"); // NOI18N
        includeOutliersCheckBox.setRolloverEnabled(true);
        includeOutliersCheckBox.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbr.gif"))); // NOI18N
        includeOutliersCheckBox.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbrs.gif"))); // NOI18N
        includeOutliersCheckBox.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbs.gif"))); // NOI18N
        includeOutliersCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                includeOutliersCheckBoxActionPerformed(evt);
            }
        });
        analysOptionPane.add(includeOutliersCheckBox);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel11.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jLabel11.setName("jLabel11"); // NOI18N
        analysOptionPane.add(jLabel11);

        jResetSave.setName("jResetSave"); // NOI18N

        org.jdesktop.layout.GroupLayout setup_panelLayout = new org.jdesktop.layout.GroupLayout(setup_panel);
        setup_panel.setLayout(setup_panelLayout);
        setup_panelLayout.setHorizontalGroup(
            setup_panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(setup_panelLayout.createSequentialGroup()
                .add(jRun, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 212, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jserver, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 217, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(analysOptionPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 167, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jResetSave, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 123, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(211, Short.MAX_VALUE))
        );
        setup_panelLayout.setVerticalGroup(
            setup_panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jResetSave, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(analysOptionPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
            .add(jserver, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
            .add(jRun, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 72, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        setup_panelLayout.linkSize(new java.awt.Component[] {analysOptionPane, jResetSave, jRun, jserver}, org.jdesktop.layout.GroupLayout.VERTICAL);

        jSplitPane1.setLeftComponent(setup_panel);

        graph_panel.setName("graph_panel"); // NOI18N
        graph_panel.setPreferredSize(new java.awt.Dimension(800, 400));
        graph_panel.setLayout(new javax.swing.BoxLayout(graph_panel, javax.swing.BoxLayout.LINE_AXIS));
        jSplitPane1.setRightComponent(graph_panel);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void includeOutliersCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_includeOutliersCheckBoxActionPerformed
        includeOutliers  = this.getIncludeOutliersCheckBox().isSelected();
}//GEN-LAST:event_includeOutliersCheckBoxActionPerformed
    
    public static  List <ParameterPrior >initializePriors(){
        double [] x;
        double [] y;
        double [] z;
       
        
        File dataFile = ASCIIDataViewer.getInstance().getLastDataFile();
        if (dataFile == null) return null;
        if (dataFile.exists() == false) return null;

        try {
            x = IO.nASCI2double(dataFile, 1);
            y = IO.nASCI2double(dataFile, 2);
            z = IO.nASCI2double(dataFile, 3);
        } catch (IOException ex) {
            ex.printStackTrace();
            return null;
        }
        
        int    n     = x.length;
        double high = 40.0/x[n-1];
        double mean = 3.0/x[n-1];

        ParameterPrior p                =   new ParameterPrior();
        if (p.isPriorEditable == true ){
            p.name                = "SumKabKba";
            p.low                 = 0;
            p.high                = high;
            p.mean                = mean;
            p.sdev                = (p.high - p.low)/3.0;
            p.priorType           = PRIOR_TYPE.GAUSSIAN;
            p.order               = ORDER_TYPE.NotOrdered;
            p.setParameterType(PARAMETER_TYPE.NonLinear);
            p.isOrderEditable     = false;
            p.isPriorTypeEditable = true;
            p.isPriorEditable     = false;
        }
        Prior.add(p);


        p                           =   new ParameterPrior();
        if (p.isPriorEditable == true ){
            p.name                = "DiffKabKba";
            p.low                 = -high;
            p.high                = 0.0;
            p.mean                = -0.5*mean;
            p.sdev                = (p.high - p.low)/3.0;
            p.priorType           = PRIOR_TYPE.GAUSSIAN;
            p.order               = ORDER_TYPE.NotOrdered;
            p.setParameterType(PARAMETER_TYPE.NonLinear);
            p.isOrderEditable     = false;
            p.isPriorTypeEditable = true;
            p.isPriorEditable     = false;
        }
        Prior.add(p);


        p                           =   new ParameterPrior();
        if (p.isPriorEditable == true ){
            p.name                = "R1a";
            p.low                 = 0;
            p.high                = high;
            p.mean                = 0.;
            p.sdev                = (p.high - p.low)/5.;
            p.priorType           = PRIOR_TYPE.GAUSSIAN;
            p.order               = ORDER_TYPE.NotOrdered;
            p.setParameterType(PARAMETER_TYPE.NonLinear);
            p.isOrderEditable     = false;
            p.isPriorTypeEditable = true;
            p.isPriorEditable     = false;
            }
        Prior.add(p);


        p                           =   new ParameterPrior();
        if (p.isPriorEditable == true ){
            p.name                = "R1b";
            p.low                 = 0;
            p.high                = high;
            p.mean                = 0.;
            p.sdev                = (p.high - p.low)/5.;
            p.priorType           = PRIOR_TYPE.GAUSSIAN;
            p.order               = ORDER_TYPE.NotOrdered;
            p.setParameterType(PARAMETER_TYPE.NonLinear);
            p.isOrderEditable     = false;
            p.isPriorTypeEditable = true;
            p.isPriorEditable     = false;
        }
        Prior.add(p);

        p                           =   new ParameterPrior();
        if (p.isPriorEditable == true ){
            p.name                = "Ma0";
            p.setParameterType(PARAMETER_TYPE.Amplitude);
        }
        Prior.add(p);


        p                           =   new ParameterPrior();
        if (p.isPriorEditable == true ){
            p.name                = "Mb0";
            p.setParameterType(PARAMETER_TYPE.Amplitude);
        }
        Prior.add(p);


        p                           =   new ParameterPrior();
        if (p.isPriorEditable == true ){
            p.name                = "Meq";
            p.setParameterType(PARAMETER_TYPE.Amplitude);
        }
        Prior.add(p);

        return Prior;
    }
 
    
    //  ********** Override Methods required by Model interface  starts ******* // 
    public void             setPackageParameters(ObjectInputStream serializationFile)throws Exception{
           Prior                        = (List<ParameterPrior>)serializationFile.readObject();
           boolean  isOutl             =  serializationFile.readBoolean();


           setIncludeOutliers(isOutl);
    }
    public void             savePackageParameters(ObjectOutputStream serializationFile){
        try{
           serializationFile.writeObject(Prior);
           serializationFile.writeBoolean(this.isIncludeOutliers());
        } 
        catch (Exception exp){
            DirectoryManager.getSerializationFile().delete();
        }        
    }
    public boolean          isReadyToRun(){

// make sure data has been loaded
        File dir        =   DirectoryManager.getBayesOtherAnalysisDir();
        File[] files    =   ASCIIDataViewer.getInstance().getFiles();

        if (files == null || files.length == 0) {
            DisplayText.popupErrorMessage(  "No data files are selected for analysis.");
            return false;
        }

        // make sure all data files exist
        for (File file : files) {
            if (!file.exists()) {
                DisplayText.popupErrorMessage(   "Data ile " + file.getPath() + "doesn't exist.");
                return false;
            }
        }

        
        // make sure priors were assigned
        if (getPriors().isEmpty()){
                 DisplayText.popupErrorMessage( "Priors were not assigned yet.");
                 return false;
        
        }
        
       // write the parameter file
       boolean bl  =  WriteBayesParams.writeParamsFile(this, dir);
       if (bl == false){
           DisplayText.popupErrorMessage(   "Failed to write Bayes.params file.");
           return false;
       }

        //  write "job.directions" file
       PackageManager.setCurrentApplication(this);
       if(!JobDirections.writeFromProperties(JobDirections.BAYES_SUBMIT)){
            DisplayText.popupErrorMessage( "Failed to write job.directions file.");
            return false;
         }

        return true;
    }
    public String           getProgramName(){return "BayesMtZ";}
    public String           getExtendedProgramName() { return "Magnetization Transfer" ;}
    public int              getNumberOfAbscissa() {
        return 1;
    }
    public int              getNumberOfDataColumns() {
       return 2;
    }
    public int              getTotalNumberOfColumns(){return 3;}
    public int              getNumberOfPriors() {
         return 7;
    }
    public StringBuilder    getModelSpecificsForParamsFile(int PADLEN, String PADCHAR) {
         StringBuilder buffer = new StringBuilder();

         buffer.append(" ");
         buffer.append(EOL);

         buffer.append (IO.pad("Package Parameters", -PADLEN, PADCHAR ));
         buffer.append(" = "+ "0");
         buffer.append(EOL);
         return buffer;
    }
    public List<ParameterPrior> getPriors() {
        if (Prior.isEmpty()){
            Prior =  initializePriors();
        }
        return Prior;
    }
    public String           getConstructorArg(){return null;}
    public String           getInstructions(){return PACKAGE_INTSRUCTIONS.MTz.getInstruction();}
    public boolean          isOutliers(){return isIncludeOutliers ();}
    public void             reset(){
          Prior.clear();

          setDefaults();
          clearPreviousRun();

            // show defualt viewer
            AllViewers.getInstance().showDefaultViewer();
    }
    public void             clearPreviousRun(){

          Reset.clearAsciiResutls();

         // reset job status
         jRun.reset();

    }
    public void             setDefaults(){
       setIncludeOutliers (false);
    }
    public void             setActive(boolean enabled){
        AllViewers.getInstance().setActive(enabled);

        jserver.setActive(enabled);
        jRun.setEnabled(enabled);
        includeOutliersCheckBox.setEnabled(enabled);
        jResetSave.setEnabled(enabled);


    }
    public void              destroy(){};

    public void propertyChange(java.beans.PropertyChangeEvent evt){

      if (evt.getPropertyName().equals(bayes.BayesManager.JRUN_JOB_START)){
          setActive(false);
      }

      else if (evt.getPropertyName().equals(bayes.BayesManager.JRUN_JOB_END)){
         setActive(true);
          AllViewers.showResultsViewer();
      }
      else if (evt.getPropertyName().equals(bayes.BayesManager.JRUN_JOB_CANCELED)){
        setActive(true);
      }
 
   }

    public static void      createAndShowGUI() {

        JFrame frame = new JFrame ("Magnetization Transfer");
        frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
        frame.addWindowListener(new java.awt.event.WindowAdapter() {
           @Override
             public void windowClosing(java.awt.event.WindowEvent evt) {
                DirectoryManager.shutDownDirectory();
            }
        });

        BayesMtZ newContentPane = new BayesMtZ();
        newContentPane.setOpaque (true);
        frame.setContentPane (newContentPane);
        frame.pack ();
        frame.setVisible (true);
    }
    public static void      main(String[] args) {
       javax.swing.SwingUtilities.invokeLater (new Runnable () {
            public void run (){createAndShowGUI();}});
    }     
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel analysOptionPane;
    private javax.swing.JPanel graph_panel;
    public javax.swing.JCheckBox includeOutliersCheckBox;
    private javax.swing.JLabel jLabel11;
    private interfacebeans.JResetSave jResetSave;
    private run.JRun jRun;
    private javax.swing.JSplitPane jSplitPane1;
    private interfacebeans.JServer jserver;
    private javax.swing.JPanel setup_panel;
    // End of variables declaration//GEN-END:variables
     public javax.swing.JCheckBox getIncludeOutliersCheckBox () {
        return includeOutliersCheckBox;
    }

    private static List<ParameterPrior> Prior = new Vector<ParameterPrior>();
    protected boolean includeOutliers = false;

    public boolean          isIncludeOutliers () {
        return includeOutliers;
    }
    public void             setIncludeOutliers ( boolean includeOutliers ) {
        this.includeOutliers = includeOutliers;
        if( getIncludeOutliersCheckBox () != null){
             getIncludeOutliersCheckBox ().setSelected( includeOutliers);
        }
    }

   

}
