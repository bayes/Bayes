/*
 * SetFromToTraces.java
 *
 * Created on April 28, 2008, 11:33 AM
 */

package applications.bayesAnalyze;
import java.awt.Component;
import fid.FidViewer;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.IOException;
import utilities.PositiveIntegerInputVerifier;
/**
 *
 * @author  apple
 */
public class SetFromToTraces    extends     javax.swing.JPanel 
                                implements  java.io.Serializable
                                            
{
    
    /** Creates new form SetFromToTraces */
    public SetFromToTraces () {
        initComponents ();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        from_lbl = new javax.swing.JLabel();
        PositiveIntegerInputVerifier inputVerifier = new PositiveIntegerInputVerifier();
        from_ft = new javax.swing.JFormattedTextField();
        to_lbl = new javax.swing.JLabel();
        to_ft = new javax.swing.JFormattedTextField();
        by_lbl = new javax.swing.JLabel();
        by_ft = new javax.swing.JFormattedTextField();

        FormListener formListener = new FormListener();

        setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Set Traces"));
        setPreferredSize(new java.awt.Dimension(150, 90));
        setLayout(new java.awt.GridBagLayout());

        from_lbl.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        from_lbl.setText("From:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(from_lbl, gridBagConstraints);

        from_ft.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0"))));
        from_ft.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        from_ft.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nSet first dataset.\n</html>\n\n\n\n\n\n"); // NOI18N
        from_ft.setInputVerifier(inputVerifier);
        from_ft.setValue(from);
        from_ft.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 3.0;
        add(from_ft, gridBagConstraints);

        to_lbl.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        to_lbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        to_lbl.setText("To:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        add(to_lbl, gridBagConstraints);

        to_ft.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0"))));
        to_ft.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        to_ft.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\nSet last dataset.\n</html>\n\n"); // NOI18N
        to_ft.setInputVerifier(inputVerifier);
        to_ft.setValue(to);
        to_ft.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(to_ft, gridBagConstraints);

        by_lbl.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        by_lbl.setText("By:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(by_lbl, gridBagConstraints);

        by_ft.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0"))));
        by_ft.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        by_ft.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\nThe number of fids to process together.\n</html>\n\n\n"); // NOI18N
        by_ft.setInputVerifier(inputVerifier);
        by_ft.setValue(by);
        by_ft.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(by_ft, gridBagConstraints);
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.beans.PropertyChangeListener {
        FormListener() {}
        public void propertyChange(java.beans.PropertyChangeEvent evt) {
            if (evt.getSource() == from_ft) {
                SetFromToTraces.this.textFieldChanged(evt);
            }
            else if (evt.getSource() == to_ft) {
                SetFromToTraces.this.textFieldChanged(evt);
            }
            else if (evt.getSource() == by_ft) {
                SetFromToTraces.this.textFieldChanged(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private void textFieldChanged (java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_textFieldChanged
     
        if (evt.getPropertyName().equalsIgnoreCase("value") == false ) {return;}

        // from
        if (evt.getSource()== from_ft){
             if (getFrom() > getTo()){ setFrom( getTo());}
        }
        
        // if too
        else if (evt.getSource()== to_ft){
               
             if (FidViewer.getInstance().getFidReader() != null){
                int n =  FidViewer.getInstance().getFidReader().getNumberOfTotalTraces();
                if (getTo()  > n){ setTo(n);}
             }
           }
        
         else  if (evt.getSource()== by_ft){
             if (getBy() >  getTo() ){ setBy( getTo());}
           }
           
         if (isIgnoreEvents() == true){return;}
         this.firePropertyChange("value", null, evt);
    }//GEN-LAST:event_textFieldChanged

    public static SetFromToTraces deserialize(ObjectInputStream serializationFile)
    {
        try{
             SetFromToTraces instance = new SetFromToTraces();
             int val;
             
             val        = (Integer) serializationFile.readObject( );
             instance.setTo(val);
             
             val        = (Integer) serializationFile.readObject( );
             instance.setFrom(val);
             
             val        = (Integer) serializationFile.readObject( );
             instance.setBy(val);
             
             instance.isDeserialized = true;
             return instance;
        }
        catch (Exception exp){ return null;}
    }
    public void serialize(ObjectOutputStream serializationFile)
                                throws IOException
    {
        serializationFile.writeObject(  getTo() );
        serializationFile.writeObject(  getFrom());
        serializationFile.writeObject(  getBy() );
    }
    public void resetToDefaults(){
         FidViewer viewer = FidViewer.getInstance();
          if (viewer.isLoaded()== false) {
            setFrom(1);
            setTo(1);
            setBy(1);
          }
          else {
            int val      = viewer.getNumberOfTraces();
            setFrom(1);
            setTo(val);
            setBy(val);
          }
    }
    
    @Override
    public String toString(){
        StringBuilder sb = new StringBuilder();
        sb.append(" from =  " + getFrom());
        sb.append("\n");
        sb.append(" to =  " + getTo());
        sb.append("\n");
        sb.append(" by =  " + getBy());
        sb.append("\n");
       
        return sb.toString();

    }  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField by_ft;
    private javax.swing.JLabel by_lbl;
    private javax.swing.JFormattedTextField from_ft;
    private javax.swing.JLabel from_lbl;
    private javax.swing.JFormattedTextField to_ft;
    private javax.swing.JLabel to_lbl;
    // End of variables declaration//GEN-END:variables
    private boolean ignoreEvents            =   false;
    private boolean isDeserialized          =   false;
    private int     from                    =   1;
    private int     to                      =   1;
    private int     by                      =   1;
    private static final long serialVersionUID = 7526472295622776148L;
// <editor-fold defaultstate="collapsed" desc=" GETTERS ">

    public int getFrom () {
        from = ((Number) from_ft.getValue()).intValue();
        return from;
    }
    
    public int getTo () {
        to = ((Number) to_ft.getValue()).intValue();
        return to;
    }
    
    public int getBy () {
        by = ((Number) by_ft.getValue()).intValue();
        return by;
    }
    
   public boolean isIgnoreEvents () {
        return ignoreEvents;
    }

// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" SETTERS ">
    public void setTo ( int to ) {
        this.to = to;
        if ( to_ft != null ) {
            to_ft.setValue(this.to);
        }
    }

    public void setBy ( int by ) {
        this.by = by;
        if ( by_ft != null ) {
            by_ft.setValue(this.by);
        }
    }

    public void setFrom ( int from ) {
        this.from = from;
        if ( from_ft != null ) {
            from_ft.setValue(this.from);
        }
    }

    public void setIgnoreEvents ( boolean ignoreEvent ) {
        this.ignoreEvents = ignoreEvent;
    }
    
    public void setActive ( boolean isActive) {
        Component [] comps = this.getComponents();
        for (Component component : comps) {
            component.setEnabled(isActive);
        }
    }
}

// </editor-fold>
