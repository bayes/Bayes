/*
 * JMarkResonance.java
 *
 * Created on May 5, 2008, 10:35 AM
 */

package applications.bayesAnalyze;
import fid.Resonance;
import javax.swing.*;
import fid.FidViewer;
import fid.FidChartPanel;
import fid.FidReader;
import java.awt.Component;
import fid.Units; 
import java.util.*;


import applications.model.Model;
import interfacebeans.AllViewers;
import bayes.PackageManager;
import static bayes.Enums.*;
import bayes.BayesManager;
/**
 *
 * @author  apple
 */
public class JMarkResonance extends javax.swing.JPanel
                               
{
    //private static double [] resonaceFrequencies;
    public static boolean isCenterFreq                  = false;
    public static boolean isPrimaryJCoupling            = false;
    public static boolean isSecondaryJCoupling          = false;
    public static boolean isResonanceMarkingFinished    = false;
    
    public static final String RESONANCE_ADDED          = "New Resonance is Added";
    
  
    
    private double   centerFreq;        // center frequency
    private double   primaryJCoupling;    // primary couping
    private double   secondaryJCoupling; // secondary coupling;
    
   
    /** Creates new form JMarkResonance */
    public JMarkResonance() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pri_lbl = new javax.swing.JLabel();
        Vector values =  getSpinDegeneracyList();
        primari_cb = new javax.swing.JComboBox(values);
        second_lbl = new javax.swing.JLabel();
        secondary_cb = new javax.swing.JComboBox(values);
        addRes_btn = new javax.swing.JButton();
        Mark_btn = new javax.swing.JButton();

        FormListener formListener = new FormListener();

        setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), "Mark Resonances"));
        setLayout(new java.awt.GridBagLayout());

        pri_lbl.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        pri_lbl.setText("Primary"); // NOI18N
        pri_lbl.setName("pri_lbl"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(pri_lbl, gridBagConstraints);

        primari_cb.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\nSet the \"Primary\" multiplet order (largest J).\n</html>"); // NOI18N
        primari_cb.setName("primari_cb"); // NOI18N
        primari_cb.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(primari_cb, gridBagConstraints);

        second_lbl.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        second_lbl.setText("Secondary");
        second_lbl.setName("second_lbl"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(second_lbl, gridBagConstraints);

        secondary_cb.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\nSecondary\" multiplet order (smallest J).\n</html>"); // NOI18N
        secondary_cb.setName("secondary_cb"); // NOI18N
        secondary_cb.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(secondary_cb, gridBagConstraints);

        addRes_btn.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        addRes_btn.setText("New");
        addRes_btn.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nStart marking new resonance.\n\n</html>\n\n\n\n"); // NOI18N
        addRes_btn.setName("addRes_btn"); // NOI18N
        addRes_btn.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(addRes_btn, gridBagConstraints);

        Mark_btn.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        Mark_btn.setText("Mark");
        Mark_btn.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nPlace cursor(s) on the plot. Then press this <br>\nbutton to record resonance peak, primary  <br>\nand secondary JCoupling (when applicable).\n\n</html>\n\n"); // NOI18N
        Mark_btn.setEnabled(false);
        Mark_btn.setName("Mark_btn"); // NOI18N
        Mark_btn.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(Mark_btn, gridBagConstraints);
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == primari_cb) {
                JMarkResonance.this.primari_cbActionPerformed(evt);
            }
            else if (evt.getSource() == secondary_cb) {
                JMarkResonance.this.secondary_cbActionPerformed(evt);
            }
            else if (evt.getSource() == addRes_btn) {
                JMarkResonance.this.addRes_btnActionPerformed(evt);
            }
            else if (evt.getSource() == Mark_btn) {
                JMarkResonance.this.Mark_btnActionPerformed(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

private void addRes_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRes_btnActionPerformed
    reset ();
    startMarkingProcedure();
    Mark_btn.setEnabled(true);
    
    FidViewer fv        =   FidViewer.getInstance();
    if (fv.isShowing() == false){AllViewers.getInstance().showFidViewer();}
        
    
}//GEN-LAST:event_addRes_btnActionPerformed
private void Mark_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Mark_btnActionPerformed
    FidViewer fv        =   FidViewer.getInstance();
    
    if (fv.isLoaded() == false){return;}
    if (isValidPlotType() == false ){ return;}
    if (isResonanceMarkingFinished() == true) { return;}

    if (isCenterFreq == false)              {
        isCenterFreq            = doCenterFrequency();
       
    }
    else if (isPrimaryJCoupling == false)   {
        isPrimaryJCoupling      =   doPrimaryJCoupling();
     }
    else if (isSecondaryJCoupling == false){
        isSecondaryJCoupling    =doSecondaryJCoupling();
    }
    
    boolean isDone = isResonanceMarkingFinished();
    
    
    if ( isDone) {
        generateAndDrawResonance();
        setMessage("");
    }
     
}//GEN-LAST:event_Mark_btnActionPerformed
private void primari_cbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_primari_cbActionPerformed
    reset ();
    Mark_btn.setEnabled(false);
}//GEN-LAST:event_primari_cbActionPerformed
private void secondary_cbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secondary_cbActionPerformed
    reset ();
    Mark_btn.setEnabled(false);
}//GEN-LAST:event_secondary_cbActionPerformed
   
    private void    generateAndDrawResonance(){
        FidViewer fv        =   FidViewer.getInstance();
        FidReader fReader   =   fv.getFidReader();

 

         Resonance res = new Resonance();
    
         res.setFreqInitlVal(Units.convertFromFidViewrUnitsToHertz(centerFreq));      
         res.setFreqFinalVal(Units.convertFromFidViewrUnitsToHertz(centerFreq));
         res.setJ1InitlVal  (Units.convertFromFidViewrUnitsToHertz(primaryJCoupling)) ;
         res.setJ1FinalVal  (Units.convertFromFidViewrUnitsToHertz(primaryJCoupling)) ;
         res.setJ2InitlVal  (Units.convertFromFidViewrUnitsToHertz(secondaryJCoupling)) ;
         res.setJ2FinalVal  (Units.convertFromFidViewrUnitsToHertz(secondaryJCoupling))   ;
         
         res.setRateFinalVal(fReader.getUserLb()) ;
         res.setRateInitlVal(fReader.getUserLb()) ;
         res.setFirstOrder(this.getPrimarySpinDegeneracy());
         res.setSecondOrder(this.getSecondarySpinDegeneracy());

        
        
         Mark_btn.setEnabled(false);
        // caught by BayesAnalyze package to update itslist of resonances
        // The "res".model is modified to  BayesAnalyze.ResonanceModel 
        BayesManager.fireResonanceIsMarked(res);
        
         
    }
    private boolean doCenterFrequency(){
            FidChartPanel chart =    FidViewer.getInstance().getChartPanel();
            if (chart.getCursorA() == null && chart.getCursorB() == null  ) {
             JOptionPane.showMessageDialog( this,
    
                "At least one of the cursors \n" +
                         "must be shown in the plot.",
                "Message",  JOptionPane.WARNING_MESSAGE);
                 return false;
    }
        
         if (chart.getCursorA() != null && chart.getCursorB() != null ) { 
                    centerFreq    = chart.getBoxPosition();
         } 
         else if (chart.getCursorA() != null)      { 
                    centerFreq    = chart.getCursorAPosition();
         }
         else if (chart.getCursorB() != null) { 
                    centerFreq    = chart.getCursorBPosition();
         } 
        
        return true;
    }
    private boolean doPrimaryJCoupling(){
       FidChartPanel chart =    FidViewer.getInstance().getChartPanel();      
       if (chart.getCursorA() == null || chart.getCursorB() == null  ) {
        JOptionPane.showMessageDialog( this,
    
                "Both cursors must be shown in the plot." ,
                "Message",  JOptionPane.WARNING_MESSAGE);
                 return false;
        }
        double   cA             = chart.getCursorAPosition();
        double   cB             = chart.getCursorBPosition();
        primaryJCoupling        = Math.abs(cB - cA);
        return true;
    }
    private boolean doSecondaryJCoupling(){
       FidChartPanel chart =    FidViewer.getInstance().getChartPanel();      
       if (chart.getCursorA() == null || chart.getCursorB() == null  ) {
        JOptionPane.showMessageDialog( this,
    
                "Both cursors must be shown in the plot." ,
                "Message",  JOptionPane.WARNING_MESSAGE);
                 return false ;
        }
        double   cA             = chart.getCursorAPosition();
        double   cB             = chart.getCursorBPosition();
        secondaryJCoupling      = Math.abs(cB - cA);
       return true;
    }
 
    
    public void resetToDefaults(){
       reset ();
       primari_cb.setSelectedIndex(0);
       secondary_cb.setSelectedIndex(0);
    }
    public void reset (){
        isCenterFreq                = false;
        isPrimaryJCoupling          = false;
        isSecondaryJCoupling        = false;
    
        centerFreq                  = Double.NaN;
        primaryJCoupling            = Double.NaN;
        secondaryJCoupling          = Double.NaN;
        
        setMessage("");
      
    }
    
    
    
    public boolean isResonanceMarkingFinished(){
        if ( isCenterFreq  ==  true   && isPrimaryJCoupling ==  true
                                &&isSecondaryJCoupling  ==  true)
        {
            return  true;
        }
        else{  return false;}
    }
    public int getPrimarySpinDegeneracy(){
        return (Integer)primari_cb.getSelectedItem();
    
    }
    public int getSecondarySpinDegeneracy(){
        return (Integer)secondary_cb.getSelectedItem();
    
    }
    private void startMarkingProcedure(){
        int prim                = getPrimarySpinDegeneracy();
        int scnd                = getSecondarySpinDegeneracy();
        String message          = getMarkingInstructionMessage();
      
        // if PrimarySpinDegeneracy =1 - no need to assign 
        // primary and secondary J-Coupling
        if (prim == 1) 
        {
            isPrimaryJCoupling        = true;
            isSecondaryJCoupling      = true;
        }
        
        // if SecondarySpinDegeneracy =1 - no need to assign 
        // secondary J-Coupling
        else if (scnd == 1) 
        { 
            isSecondaryJCoupling      = true;
        }
        
     
       setMessage(message);
    }
    private boolean isValidPlotType(){
        FID_DATA_TYPE plot = FidViewer.getInstance().getDataType();
        if (plot  == FID_DATA_TYPE.FID) {return false;}
        return true;
    }
  
    
    
    
    /**************************************************
     * Generate marking instruction text on the graph
     ************************************************** 
     *************************************************/
    public String getMarkingInstructionMessage(){
        int prim                = getPrimarySpinDegeneracy();
        int scnd                = getSecondarySpinDegeneracy();
        String message = "Mark center.";
        
        if (prim  ==1){
           // do nothing;
        }
        else if (scnd == 1){
             message = message + " Mark J-coupling.";
        }
        else{
            message = message + " Mark primary J-coupling. Mark secondary J-coupling.";
        }
        // message = message + " of "+ SPIN_DEGENERACY.getName(prim).toLowerCase()+"s.";
        
        return message;
    }
  
  
    public  Vector <Integer> getSpinDegeneracyList(){
        Vector values = new Vector();
        int ind     =   0;
        int length  =   SPIN_DEGENERACY.values().length;  
        for (int i = 0; i <length; i++) {
            values.add(++ind);
        }
        return values;
    }
    
    public void setMessage(String text){
        /*
        Model model  = PackageManager.getCurrentApplication();
        if (model instanceof BayesAnalyze){
           BayesAnalyze ba = (BayesAnalyze)model;
           ba.setMessage(text);
        }
         * 
         */
         FidViewer fv        =   FidViewer.getInstance();
         fv.setMessage(text);
    }
    public void setActive ( boolean isActive) {
        Component [] comps = this.getComponents();
        for (Component component : comps) {
            component.setEnabled(isActive);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Mark_btn;
    private javax.swing.JButton addRes_btn;
    private javax.swing.JLabel pri_lbl;
    private javax.swing.JComboBox primari_cb;
    private javax.swing.JLabel second_lbl;
    private javax.swing.JComboBox secondary_cb;
    // End of variables declaration//GEN-END:variables

}
