/*
 * SetSignalFilterNoise.java
 *
 * Created on April 28, 2008, 11:05 AM
 */

package applications.bayesAnalyze;

import java.util.logging.Level;
import java.util.logging.Logger;
import java.awt.Component;
import fid.FidViewer;
import fid.FidChartPanel;
import java.io.*;
import utilities.IO;
import bayes.DirectoryManager;
import interfacebeans.AllViewers;
import static bayes.Enums.*;

/**
 *
 * @author  apple
 */
public class SetSignalFilterNoise 
                extends javax.swing.JPanel 
                        implements java.io.Serializable{
                            
                                
    
    public final static int    MAX_DATA_POINTS        =  65536;
    public final static String NUMBER_FORMAT          =  "%1.8E";
    public final static String SIGNAL_NOISE_PROPERTY_CHANGE = "SIGNAL_NOISE_PROPERTY_CHANGE";
    protected boolean ignoreEvents                    =   false;


    /** Creates new form SetSignalFilterNoise */
    public SetSignalFilterNoise () {
        initComponents ();
      
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        signal_btn = new javax.swing.JButton();
        signal_ft = new javax.swing.JFormattedTextField();
        noise_btn = new javax.swing.JButton();
        noise_ft = new javax.swing.JFormattedTextField();

        FormListener formListener = new FormListener();

        setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        setMinimumSize(new java.awt.Dimension(50, 20));
        setPreferredSize(new java.awt.Dimension(150, 90));
        setLayout(new java.awt.GridBagLayout());

        signal_btn.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        signal_btn.setText("Signal");
        signal_btn.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\nAssigns number of sigal points to<br>\ncurrent position index of cursor A.\n</html>\n\n\n\n\n\n"); // NOI18N
        signal_btn.setMargin(new java.awt.Insets(0, 1, 0, 1));
        signal_btn.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(signal_btn, gridBagConstraints);

        signal_ft.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0"))));
        signal_ft.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        signal_ft.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\nNumber of points in the signal that are <br>\nanalyzed (starting from first data sample).\n</html>\n\n\n\n\n"); // NOI18N
        signal_ft.setValue(0);
        signal_ft.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(signal_ft, gridBagConstraints);

        noise_btn.setFont(new java.awt.Font("Lucida Grande", 1, 12));
        noise_btn.setText("Noise");
        noise_btn.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\nAssigns a data point (current position index <br>\nof cursor A) from which noise is calculated.\n</html>\n\n\n\n"); // NOI18N
        noise_btn.setMargin(new java.awt.Insets(0, 1, 0, 1));
        noise_btn.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(noise_btn, gridBagConstraints);

        noise_ft.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0"))));
        noise_ft.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        noise_ft.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\nSpecifies the  point index from which<br>\nnoise standard deviation is calculated. \n</html>\n\n\n\n\n"); // NOI18N
        noise_ft.setValue(0);
        noise_ft.addActionListener(formListener);
        noise_ft.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(noise_ft, gridBagConstraints);
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.beans.PropertyChangeListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == signal_btn) {
                SetSignalFilterNoise.this.signal_btnActionPerformed(evt);
            }
            else if (evt.getSource() == noise_btn) {
                SetSignalFilterNoise.this.noise_btnActionPerformed(evt);
            }
            else if (evt.getSource() == noise_ft) {
                SetSignalFilterNoise.this.noise_ftActionPerformed(evt);
            }
        }

        public void propertyChange(java.beans.PropertyChangeEvent evt) {
            if (evt.getSource() == signal_ft) {
                SetSignalFilterNoise.this.signal_ftPropertyChange(evt);
            }
            else if (evt.getSource() == noise_ft) {
                SetSignalFilterNoise.this.noise_ftPropertyChange(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents
  
    public void resetToDefaults(FidViewer viewer){
        setIgnoreEvents(true);
        try{
             if (viewer.isLoaded()== false) {
                  this.setSignal(0);
                  this.setNoise(0);
                  //getBayesNoiseFile ().delete();

             }

             else {
                   int np               =     viewer.getProcpar().getNp();
                   setSignal(np);
                   setNoise(0);
                   //getBayesNoiseFile ().delete();
             }


        }catch(Exception e){e.printStackTrace();}
        finally{
            setIgnoreEvents(false);
        }
         
    }
    
    private void noise_btnActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noise_btnActionPerformed
        Integer index  = setSignalAndNoiseFromCursorA();
        if (index == null) {index = 0;}
       
        setNoise(index);
        /* Nov 17/2011 
         * I commented out two lines below, because setting noise setNoise(index)
         * will trigger property change in the noise text field, and that in turn will trihher
         * execution of the lines listed below.  Hence commenting out is too prevent code from being
         * executed twice.
         */
       // writeBayesNoiseFile(getNoiseStandDeviation(), DirectoryManager.getASCIIDir());
        //this.firePropertyChange(SIGNAL_NOISE_PROPERTY_CHANGE, null, true);
    }//GEN-LAST:event_noise_btnActionPerformed
    private void signal_btnActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signal_btnActionPerformed
        Integer index  = setSignalAndNoiseFromCursorA();
        if (index == null || index < 0) {index = 2;}
        setSignal(index);
        this.firePropertyChange(SIGNAL_NOISE_PROPERTY_CHANGE, null, true);

        
    }//GEN-LAST:event_signal_btnActionPerformed
private void signal_ftPropertyChange (java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_signal_ftPropertyChange
    if (isIgnoreEvents () == true) {return;}
    if (evt.getPropertyName().equalsIgnoreCase("value")){
         doSignalFormattedTExtField() ;
         this.firePropertyChange(SIGNAL_NOISE_PROPERTY_CHANGE, null, true);
   }
}//GEN-LAST:event_signal_ftPropertyChange
private void noise_ftPropertyChange (java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_noise_ftPropertyChange
     if (isIgnoreEvents () == true) {return;}
    if (evt.getPropertyName().equalsIgnoreCase("value")){
          doNoiseFormattedTExtField();
          this.firePropertyChange(SIGNAL_NOISE_PROPERTY_CHANGE, null, true);
   }
}//GEN-LAST:event_noise_ftPropertyChange

private void noise_ftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noise_ftActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_noise_ftActionPerformed
    
    private Integer setSignalAndNoiseFromCursorA(){
       FidViewer viewer            =   FidViewer.getInstance();
       if ( isFidViewerStateIsValid() == false) {return -1;}
       
       FidChartPanel chart         =   viewer.getChartPanel();
       int dataLength              =   getMax();
        
        if (chart.getCursorA() != null){
                int ind = chart.getClosestPointIndexToCursorA();
                int n   = getValueFromIndex(ind);
                return n;
       }
        else { return dataLength ;}
    }
    public  static boolean setCursorAPosition(int dataIndex){
       FidViewer viewer            =   FidViewer.getInstance();
       if ( isFidViewerStateIsValid() == false) {return false;}
        
       FidChartPanel chartPanel    =   viewer.getChartPanel();
       double plotX                =   chartPanel.getChart().getXYPlot().
                                            getDataset().getXValue(0,dataIndex);
       double curAPos              =   chartPanel.plotX2Java2D(plotX);
       if (chartPanel.isShowing()) {
           chartPanel.drawCursorA(curAPos);
       }
       
       return true;
        
    }
    
    private void doSignalFormattedTExtField(){
       int val         =   getSignal();
        int min         =   2;
        int max         =   getMax();
        
        if (val < min )
        {  
            val = min;
            setSignal(val);
        }
        if (val > max ){  
            val = max;
            setSignal(val);
        }
        if (val%2 == 1){
            val += 1;
            setSignal(val);
        }
        
        int ind         =   getIndex (val); 
        if (ind < 0)    {ind = 0;}
        
         setCursorAPosition(ind);
    }
    private void doNoiseFormattedTExtField(){
        int val         =   getNoise();
        int min         =   0;
        int max         =   getMax();
        
        if (val < min )
        {  
            val = min;
            setNoise(val);
        }
        if (val > max ){  
            val = max;
            setNoise(val);
        }
         if (val%2 == 1){
            val += 1;
            setNoise(val);
        }
        
        int ind         =   getIndex (val);
        
        if (ind > 0){
            setCursorAPosition(ind);
            writeBayesNoiseFile(getNoiseStandDeviation(), DirectoryManager.getASCIIDir());
        }
        else {
            // for now do nothing
        }
    }
    
    public static boolean isFidViewerStateIsValid(){
       FidViewer viewer            =   FidViewer.getInstance();
       if (viewer.isLoaded()== false) {return false;}
        
       // if not showing, bring FidViewer to top 
       if (viewer.isShowing() == false){
            AllViewers.showFidViewer();
        }
       
        if ( viewer.getDataType().equals(FID_DATA_TYPE.FID)== false){
                viewer.setDataType(FID_DATA_TYPE.FID);
        }
 
        return true;
        
    }
    
    public static boolean   writeBayesNoiseFile(double [] data, File dir){
       if ( data == null ) { return false; }
            BufferedWriter out  = null;
            FileWriter fr       = null;
            
        try {
          
            if ( !dir.exists() ) {  dir.mkdirs(); }
              
            fr = new FileWriter(DirectoryManager.getBayesNoiseFile(dir));
            out = new BufferedWriter(fr);

            int padlen = -8;
            String padChar = " ";

            String datum;
            for (int i = 0; i < data.length; i++) {
                datum = String.format(NUMBER_FORMAT, data[i]);
                int curIndx = i + 1;
                out.write(IO.pad("" + curIndx, padlen, padChar) + "   " + datum);
                out.newLine();
            }




        } catch (IOException ex) {
            Logger.getLogger(SetSignalFilterNoise.class.getName()).log(Level.SEVERE, null,
                                                                       ex);
            return false;
        } finally {
            try { 
                out.close();
                fr.close();
                return true;
                
            } catch (IOException ex) {
            Logger.getLogger(SetSignalFilterNoise.class.getName()).log(Level.SEVERE,
            null, ex);
            return true;
            }
         } 

          
    }
    private       double [] getNoiseStandDeviation(){
        FidViewer viewer            =   FidViewer.getInstance();
        int   numberOfTraces        =   viewer.getNumberOfTraces(); 
   
        if (viewer.isLoaded() == false) {return null;}
    
        if (viewer.getDataType().equals(FID_DATA_TYPE.FID) == false){
            viewer.setDataType(FID_DATA_TYPE.FID);
        }
 
        // getSignal() returns the index of the point in for complex data.
        // getSignal() always returns an even number
        // Becuase we have separate arrays for real and imaginary data
        // the integer diviion by 2 is needed for proper indexing
        
        // Because java is indexing array from 0  - 1 is subtracted.
        // Because we are dealing with complex data set,
        // devision by is performed.
        int startInd    =  getIndex (getNoise());
        
      
 
        double [] noiseSigma = new double [ numberOfTraces];
        for (int i = 0; i <  numberOfTraces ; i++) {
          float [] real         = viewer.getFidReader().getFidReal()[i];
          float [] imag         = viewer.getFidReader().getFidImag()[i];
          noiseSigma[i]         = getNoiseStandDeviation(real, imag, startInd );
        }

    return noiseSigma;
      
  }
    public static double    getNoiseStandDeviation(float [] real, float  [] imag, int startInd) {
      double sigma = 0;
      int length = Math.min(real.length, imag.length) ;
      if (length < startInd){
          System.err.println("While computing noise standard deviation" +
                  " data array size is smaller then starting index to compute nois." +
                  "(class SetSignalFilterNoise)");
          return Double.NaN;
      }
      for (int i = startInd; i < length ; i++) {
          double curVal = Math.pow(real[i],2)+  Math.pow(imag[i],2);
          sigma = sigma + curVal ;
            
      }
      
      int norm = length - startInd;
      sigma = sigma/(2* norm);
      sigma = Math.sqrt(sigma);
     
      return sigma;
  }    
    


    public static SetSignalFilterNoise deserialize(ObjectInputStream serializationFile)
    {
        try{
             SetSignalFilterNoise instance = new SetSignalFilterNoise();
             int signal     = (Integer) serializationFile.readObject( );
             int noise      = (Integer) serializationFile.readObject( );
            
             instance.setSignal(signal);
             instance.setNoise(noise);
            
            return instance;
        }
        catch (Exception exp){ return null;}
           
        
    }
    public void serialize(ObjectOutputStream serializationFile)throws IOException
    {
        serializationFile.writeObject( getSignal() );
        serializationFile.writeObject( getNoise() );
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton noise_btn;
    private javax.swing.JFormattedTextField noise_ft;
    private javax.swing.JButton signal_btn;
    private javax.swing.JFormattedTextField signal_ft;
    // End of variables declaration//GEN-END:variables
    public javax.swing.JButton getNoise_btn () {
        return noise_btn;
    }
    public javax.swing.JFormattedTextField getNoise_ft () {
        return noise_ft;
    }
    public javax.swing.JButton getSignal_btn () {
        return signal_btn;
    }
    public javax.swing.JFormattedTextField getSignal_ft () {
        return signal_ft;
    }

    // <editor-fold defaultstate="collapsed" desc=" GETTERS ">

    public static String getBayesNoiseString () {
        File noiseFile = DirectoryManager.getBayesNoiseFile();
        if ( noiseFile.exists() ) {
            return noiseFile.getName();
        } else {
            return "";
        }
    }

    public boolean isNoise () {        
        return DirectoryManager.getBayesNoiseFile().exists();        
    }
    public int getNoise () {
        return ((Number) getNoise_ft().getValue()).intValue();
    }
    public int getSignal () {
        return (int) ((Number) getSignal_ft().getValue()).intValue();
    }
    public int getMax(){
        FidViewer fv =  FidViewer.getInstance();
        if (fv.isLoaded() == false) {
            return 0;
        }
        else{
            return fv.getProcpar().getNp();
        }
    
    }

    public boolean isIgnoreEvents () {
        return ignoreEvents;
    }

    /* Following two methods are reqiored to do proper comversion
     * between values of noise and signal as seen in Gui to the index of 
     * real and imaginary data plotted on FidViewer.
     * Factor of 2 compensates for conversion between complex data index and index 
     * of real data arrays, while subtraction/addition by 1 is needed because of java.
     * array indexing starts from 0
     */
    public int getIndex (int val) {
        return val/2 - 1;
    }
    public int getValueFromIndex (int ind) {
        return (ind + 1)*2;
    }


// </editor-fold>
    // <editor-fold defaultstate="collapsed" desc=" SETTERS ">
    public void setSignal ( int signal ) {
        if ( signal > MAX_DATA_POINTS ) {
            signal = MAX_DATA_POINTS;
        }
        getSignal_ft().setValue(signal);
    }

    public void setNoise ( int noise ) {
        getNoise_ft().setValue(noise);
    }
    
    public void setActive ( boolean isActive) {
        Component [] comps = this.getComponents();
        for (Component component : comps) {
            component.setEnabled(isActive);
        }
    }
    public void setIgnoreEvents ( boolean ignoreEvents ) {
        this.ignoreEvents = ignoreEvents;
    }

   
// </editor-fold>
}
