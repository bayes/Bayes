/*
 * BayesFindResonances.java
 *
 * Created on July 8, 2008, 11:20 AM
 */

package applications.bayesFindResonances;
import bayes.Reset;
import run.JRun;
import javax.swing.*;
import java.io.*;
import java.awt.Window;
import java.awt.Cursor;
import java.awt.Component;

import applications.model.Model;

import bayes.ParameterPrior;
import bayes.PackageManager;
import bayes.DirectoryManager;
import bayes.JobDirections;
import utilities.DisplayText;
import bayes.BayesManager;
import bayes.WriteBayesParams;
import run. RunModelFindResonances;
import utilities.IO;
import utilities.LoadPackage;
import utilities.PositiveIntegerInputVerifier;
import fid.FidViewer;
import fid.FidModelViewer;
import interfacebeans.*;
import static bayes.Enums.*;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.List;
import java.util.Vector;
/**
 *
 * @author  apple
 */
public class BayesFindResonances extends    javax.swing.JPanel 
                                implements  applications.model.FidModel,
                                            java.beans.PropertyChangeListener,
                                            bayes.ApplicationConstants{

    /** Creates new form BayesFindResonances */
    public BayesFindResonances () {
        LoadPackage.loadPackage(this);
        PackageManager.setCurrentApplication(this);
        boolean isDeseralized = bayes.Serialize. deserializeCurrenExperiment();


        
        FidModelViewer.getInstance().setVisibleModelBuild(false);
        initComponents();
        
        
        BayesManager.pcs.addPropertyChangeListener(this);


        if(isDeseralized){JRun.fireJobIDChange();}
        if(isDeseralized == false){AllViewers.showInstructions();}
        else {AllViewers.showFidViewer();}
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        splitPane = new javax.swing.JSplitPane();
        toolsScrollPane = new javax.swing.JScrollPane();
        tool_pane = new javax.swing.JPanel();
        setting_pane = new javax.swing.JPanel();
        nMaxRes_ft = new javax.swing.JFormattedTextField();
        maxREs_lbl = new javax.swing.JLabel();
        modelFid_lbl = new javax.swing.JLabel();
        modelFid_ft = new javax.swing.JFormattedTextField();
        jRun = new run.JRun();
        setTraces_pane = new javax.swing.JPanel();
        firstFid_lbl = new javax.swing.JLabel();
        fistFid_ft = new javax.swing.JFormattedTextField();
        lastFid_lbl = new javax.swing.JLabel();
        lastFid_ft = new javax.swing.JFormattedTextField();
        setModel_pane = new javax.swing.JPanel();
        phaseModel_lbl = new javax.swing.JLabel();
        phaseModel_cb = new javax.swing.JComboBox(PHASE_MODEL.values());
        jOutputConstantSelected = new javax.swing.JCheckBox();
        constantLabel = new javax.swing.JLabel();
        jResetSave = new interfacebeans.JResetSave();
        setModel_pane1 = new javax.swing.JPanel();
        buildModelButton = new javax.swing.JButton();
        dummyButton = new javax.swing.JButton();
        jserver = new interfacebeans.JServer();
        graph_pane = AllViewers.getInstance();

        FormListener formListener = new FormListener();

        setLayout(new java.awt.BorderLayout());

        splitPane.setBorder(null);
        splitPane.setDividerLocation(135);
        splitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        splitPane.setName("splitPane"); // NOI18N
        splitPane.setOneTouchExpandable(true);

        toolsScrollPane.setBorder(null);
        toolsScrollPane.setName("toolsScrollPane"); // NOI18N

        tool_pane.setName("tool_pane"); // NOI18N

        setting_pane.setBorder(javax.swing.BorderFactory.createTitledBorder("Settings"));
        setting_pane.setName("setting_pane"); // NOI18N
        setting_pane.setLayout(new java.awt.GridBagLayout());

        nMaxRes_ft.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0"))));
        nMaxRes_ft.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        nMaxRes_ft.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\nSet maximum number of resonances.\n</html>\n"); // NOI18N
        nMaxRes_ft.setInputVerifier(new PositiveIntegerInputVerifier());
        nMaxRes_ft.setName("nMaxRes_ft"); // NOI18N
        nMaxRes_ft.setValue(this.getMaximumResonances());

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${maximumResonances}"), nMaxRes_ft, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        nMaxRes_ft.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 4.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        setting_pane.add(nMaxRes_ft, gridBagConstraints);

        maxREs_lbl.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        maxREs_lbl.setText("Max. Resonances");
        maxREs_lbl.setName("maxREs_lbl"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        setting_pane.add(maxREs_lbl, gridBagConstraints);

        modelFid_lbl.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        modelFid_lbl.setText("Model Fid Number");
        modelFid_lbl.setName("modelFid_lbl"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        setting_pane.add(modelFid_lbl, gridBagConstraints);

        modelFid_ft.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        modelFid_ft.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\nThe number of the Fid to model.\n</html>\n\n"); // NOI18N
        modelFid_ft.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
        modelFid_ft.setName("modelFid_ft"); // NOI18N
        modelFid_ft.setValue(getFidModelNumber());
        modelFid_ft.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 4.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        setting_pane.add(modelFid_ft, gridBagConstraints);

        jRun.setName("jRun"); // NOI18N

        setTraces_pane.setBorder(javax.swing.BorderFactory.createTitledBorder("Set Traces"));
        setTraces_pane.setName("setTraces_pane"); // NOI18N
        setTraces_pane.setLayout(new java.awt.GridBagLayout());

        firstFid_lbl.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        firstFid_lbl.setText("First Trace");
        firstFid_lbl.setName("firstFid_lbl"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        setTraces_pane.add(firstFid_lbl, gridBagConstraints);

        fistFid_ft.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        fistFid_ft.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fistFid_ft.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\nSet first FID.\n</html>\n\n"); // NOI18N
        fistFid_ft.setInputVerifier(new PositiveIntegerInputVerifier());
        fistFid_ft.setName("fistFid_ft"); // NOI18N
        fistFid_ft.setValue(this.getFirstFid());
        fistFid_ft.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        setTraces_pane.add(fistFid_ft, gridBagConstraints);

        lastFid_lbl.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        lastFid_lbl.setText("Last Trace");
        lastFid_lbl.setName("lastFid_lbl"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        setTraces_pane.add(lastFid_lbl, gridBagConstraints);

        lastFid_ft.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        lastFid_ft.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        lastFid_ft.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\nSet last FID.\n</html>\n"); // NOI18N
        lastFid_ft.setInputVerifier(new PositiveIntegerInputVerifier());
        lastFid_ft.setName("lastFid_ft"); // NOI18N
        lastFid_ft.setValue(getLastFid());
        lastFid_ft.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        setTraces_pane.add(lastFid_ft, gridBagConstraints);

        setModel_pane.setBorder(javax.swing.BorderFactory.createTitledBorder("Set Model"));
        setModel_pane.setName("setModel_pane"); // NOI18N
        setModel_pane.setLayout(new java.awt.GridBagLayout());

        phaseModel_lbl.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        phaseModel_lbl.setText("Phase Model");
        phaseModel_lbl.setName("phaseModel_lbl"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        setModel_pane.add(phaseModel_lbl, gridBagConstraints);

        phaseModel_cb.setSelectedItem(phaseModel);
        phaseModel_cb.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\n<u>Common</u>:\tEach resonance has the same zero and first order phases.<br>\n<u>Independent</u>:\tEach resonance has a unique phase.<br>\n<u>Automatic</u>:\tModel selection is used to determine the phase model.\n</html>\n"); // NOI18N
        phaseModel_cb.setName("phaseModel_cb"); // NOI18N
        phaseModel_cb.addItemListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 5, 2);
        setModel_pane.add(phaseModel_cb, gridBagConstraints);

        jOutputConstantSelected.setSelected( isOutputConstants ());
        jOutputConstantSelected.setText(" "); // NOI18N
        jOutputConstantSelected.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\nInclude constant term into model?\n</html>\n\n"); // NOI18N
        jOutputConstantSelected.setFocusPainted(false);
        jOutputConstantSelected.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jOutputConstantSelected.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jOutputConstantSelected.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rb.gif"))); // NOI18N
        jOutputConstantSelected.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jOutputConstantSelected.setName("jOutputConstantSelected"); // NOI18N
        jOutputConstantSelected.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbp.gif"))); // NOI18N
        jOutputConstantSelected.setRequestFocusEnabled(false);
        jOutputConstantSelected.setRolloverEnabled(true);
        jOutputConstantSelected.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbr.gif"))); // NOI18N
        jOutputConstantSelected.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbrs.gif"))); // NOI18N
        jOutputConstantSelected.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbs.gif"))); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${outputConstants}"), jOutputConstantSelected, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        jOutputConstantSelected.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        setModel_pane.add(jOutputConstantSelected, gridBagConstraints);

        constantLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        constantLabel.setText("Constant");
        constantLabel.setName("constantLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        setModel_pane.add(constantLabel, gridBagConstraints);

        jResetSave.setName("jResetSave"); // NOI18N

        setModel_pane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Output"));
        setModel_pane1.setName("setModel_pane1"); // NOI18N
        setModel_pane1.setLayout(new java.awt.GridBagLayout());

        buildModelButton.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        buildModelButton.setText("Build FID  Model");
        buildModelButton.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\nClick to list available model files.<br>\nNote, the number in the file name is the number<br>\nof resonances in the model.</html>\n\n"); // NOI18N
        buildModelButton.setName("buildModelButton"); // NOI18N
        buildModelButton.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        setModel_pane1.add(buildModelButton, gridBagConstraints);

        dummyButton.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        dummyButton.setText("  ");
        dummyButton.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\nClick to list available model files.<br>\nNote, the number in the file name is the number<br>\nof resonances in the model.</html>\n\n"); // NOI18N
        dummyButton.setBorderPainted(false);
        dummyButton.setContentAreaFilled(false);
        dummyButton.setName("dummyButton"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        setModel_pane1.add(dummyButton, gridBagConstraints);

        jserver.setName("jserver"); // NOI18N

        org.jdesktop.layout.GroupLayout tool_paneLayout = new org.jdesktop.layout.GroupLayout(tool_pane);
        tool_pane.setLayout(tool_paneLayout);
        tool_paneLayout.setHorizontalGroup(
            tool_paneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(tool_paneLayout.createSequentialGroup()
                .add(jRun, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 208, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jserver, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 189, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(setModel_pane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(setTraces_pane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 176, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(setting_pane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 208, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(setModel_pane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jResetSave, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 160, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(241, Short.MAX_VALUE))
        );
        tool_paneLayout.setVerticalGroup(
            tool_paneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(setModel_pane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(setTraces_pane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(tool_paneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(jRun, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 105, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jserver, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 105, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(jResetSave, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(tool_paneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                .add(org.jdesktop.layout.GroupLayout.LEADING, setModel_pane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                .add(org.jdesktop.layout.GroupLayout.LEADING, setting_pane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        tool_paneLayout.linkSize(new java.awt.Component[] {jResetSave, jRun, jserver, setModel_pane, setModel_pane1, setTraces_pane, setting_pane}, org.jdesktop.layout.GroupLayout.VERTICAL);

        toolsScrollPane.setViewportView(tool_pane);

        splitPane.setTopComponent(toolsScrollPane);

        graph_pane.setMinimumSize(new java.awt.Dimension(100, 100));
        graph_pane.setName("graph_pane"); // NOI18N
        graph_pane.setLayout(new javax.swing.BoxLayout(graph_pane, javax.swing.BoxLayout.LINE_AXIS));
        splitPane.setBottomComponent(graph_pane);

        add(splitPane, java.awt.BorderLayout.CENTER);

        bindingGroup.bind();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.ItemListener, java.beans.PropertyChangeListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == jOutputConstantSelected) {
                BayesFindResonances.this.jOutputConstantSelectedActionPerformed(evt);
            }
            else if (evt.getSource() == buildModelButton) {
                BayesFindResonances.this.buildModelButtonActionPerformed(evt);
            }
        }

        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            if (evt.getSource() == phaseModel_cb) {
                BayesFindResonances.this.phaseModel_cbItemStateChanged(evt);
            }
        }

        public void propertyChange(java.beans.PropertyChangeEvent evt) {
            if (evt.getSource() == nMaxRes_ft) {
                BayesFindResonances.this.nMaxRes_ftPropertyChange(evt);
            }
            else if (evt.getSource() == modelFid_ft) {
                BayesFindResonances.this.modelFid_ftPropertyChange(evt);
            }
            else if (evt.getSource() == fistFid_ft) {
                BayesFindResonances.this.fistFid_ftPropertyChange(evt);
            }
            else if (evt.getSource() == lastFid_ft) {
                BayesFindResonances.this.lastFid_ftPropertyChange(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

private void fistFid_ftPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_fistFid_ftPropertyChange
    if (! evt.getPropertyName().equals("value")){ return;}
    int fid = ((Number)getFistFid_ft().getValue()).intValue();
    
    FidViewer fv = FidViewer.getInstance();
    
    if (fv.getFidReader() != null){
          int n = fv. getNumberOfTraces();
          if (fid  > n){ 
                setFirstFid (n);
          }
          else {
                firstFid = fid;
          }
    }
    else {
        firstFid = fid;
    }

     clearPreviousRun();
}//GEN-LAST:event_fistFid_ftPropertyChange
private void lastFid_ftPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_lastFid_ftPropertyChange
    if (! evt.getPropertyName().equals("value")){ return;}

    int fid = ((Number)getLastFid_ft().getValue()).intValue();
    
    FidViewer fv = FidViewer.getInstance();
    
    
    if (fv.getFidReader() != null){
          int n = fv. getNumberOfTraces();
          if (fid  > n){ 
                setLastFid (n);
          }
          else {
                lastFid = fid;
          }
    }
    else {
        lastFid = fid;
    }
     clearPreviousRun();
}//GEN-LAST:event_lastFid_ftPropertyChange
private void phaseModel_cbItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_phaseModel_cbItemStateChanged
    phaseModel      = (PHASE_MODEL)getPhaseModel_cb().getSelectedItem();
    clearPreviousRun();
}//GEN-LAST:event_phaseModel_cbItemStateChanged
private void modelFid_ftPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_modelFid_ftPropertyChange
if (evt.getPropertyName().equalsIgnoreCase("value")){
     
    int val         =  ((Number)getModelFid_ft().getValue()).intValue();
    FidViewer fv    =  FidViewer.getInstance();
    int max         =  1;
    int min         =  0;
    fidModelNumber  =   val;
    
    if (fv.getFidReader() != null){ max = fv. getNumberOfTraces();}
    if (val < min) { setFidModelNumber (min);}
    if (val > max) { setFidModelNumber (max);}
    
   // update model number indicator
    FidModelViewer.getInstance().setModelNumber(fidModelNumber);
    
         
     clearPreviousRun();
        
   }
}//GEN-LAST:event_modelFid_ftPropertyChange
private void buildModelButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildModelButtonActionPerformed
   
     JPopupMenu popup               =   new JPopupMenu ();
     File[]   files                 =   getModelFiles();

     if (files == null){DisplayText.popupMessage("No model files are present.");}

        for (File file :   files   ) {
                BuildModelMenuItem menuItem   = new BuildModelMenuItem(file);
                popup.add( menuItem );
        }

        popup.show ( getBuildModelButton (),  getBuildModelButton ().getWidth()/2, getBuildModelButton().getHeight()/2);
}//GEN-LAST:event_buildModelButtonActionPerformed
private void jOutputConstantSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOutputConstantSelectedActionPerformed
     clearPreviousRun();
}//GEN-LAST:event_jOutputConstantSelectedActionPerformed
private void nMaxRes_ftPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_nMaxRes_ftPropertyChange
    if (! evt.getPropertyName().equals("value")){ return;}
     clearPreviousRun();

}//GEN-LAST:event_nMaxRes_ftPropertyChange
    public void              setPackageParameters(ObjectInputStream serializationFile)throws Exception{
   
          int aFirstFid         =  (Integer)serializationFile.readObject(); 
          int aLastFid          =  (Integer)serializationFile.readObject(); 
          PHASE_MODEL pm        =  (PHASE_MODEL)serializationFile.readObject(); 
          int  fidModelNum      =  (Integer)serializationFile.readObject();
          int  maxResonances    =  (Integer)serializationFile.readObject();
           
          setFirstFid ( aFirstFid ) ;
          setLastFid  ( aLastFid  ) ;
          setPhaseModel(pm);
          setFidModelNumber ( fidModelNum  );
          setMaximumResonances( maxResonances);
         
    }
    public void              savePackageParameters(ObjectOutputStream serializationFile){
        try{
            serializationFile.writeObject( getFirstFid ());
            serializationFile.writeObject( getLastFid () );
            serializationFile.writeObject( getPhaseModel () );
            serializationFile.writeObject( getFidModelNumber () );
            serializationFile.writeObject( getMaximumResonances() );
        
        } catch (Exception exp){
            File file  = DirectoryManager.getSerializationFile();
            file.delete();
        }    
    }
    public boolean           isReadyToRun() {
       
        // make sure data is loaded
        boolean isDataLoaded = FidViewer.getInstance().isLoaded();
        if (isDataLoaded == false) {
            DisplayText.popupErrorMessage(  "You must load data before you run the program");
            return false;
        }
        
   
    
        boolean bl;
       // write the parameter file
       
       bl  =   writeParamsFile(this);
       if (bl == false){
          DisplayText.popupErrorMessage(  "Failed to write Bayes.params file." );
           return false;
       }
       
      
       //  write "job.directions" file
         PackageManager.setCurrentApplication(this);
         bl  =  JobDirections.writeFromProperties(JobDirections.BAYES_SUBMIT);
        if(bl == false){
            DisplayText.popupErrorMessage("Failed to write job.directions file.");
            return false;
         }
        return true;
    }
    public String            getProgramName() { return "BayesFindRes";}
    public String            getExtendedProgramName() { return "Bayes Find Resonances" ;}
    public int               getNumberOfAbscissa() {  return 1;}
    public int               getNumberOfDataColumns() { return 1;}
    public int               getTotalNumberOfColumns(){return 1;}
    public int               getNumberOfPriors() {  return  0;}
    public StringBuilder     getModelSpecificsForParamsFile(int PADLEN, String PADCHAR) {
        StringBuilder sb    = new StringBuilder();
        String tmp;
        
        tmp = IO.pad("Package Parameters", -PADLEN, PADCHAR );
        tmp         = tmp + " = "+getPackageParamters ();
        sb.append(tmp);
        sb.append(EOL);
        
        
        tmp = IO.pad("Maximum Resonances", -PADLEN, PADCHAR );
        tmp         = tmp + " = "+ getMaximumResonances () ;
        sb.append(tmp);
        sb.append(EOL);
        
        
        tmp = IO.pad("First Fid", -PADLEN, PADCHAR );
        tmp         = tmp + " = "+ getFirstFid () ;
        sb.append(tmp);
        sb.append(EOL);
        
        
        tmp = IO.pad("Last Fid", -PADLEN, PADCHAR );
        tmp         = tmp + " = "+  getLastFid() ;
        sb.append(tmp);
        sb.append(EOL);
        
        
        tmp = IO.pad("Phase Model", -PADLEN, PADCHAR );
        tmp         = tmp + " = "+ getPhaseModel().getName() ;
        sb.append(tmp);
        sb.append(EOL);
             
        
        tmp = IO.pad("Use Decay Model", -PADLEN, PADCHAR );
        tmp         = tmp + " = "+  "Lorentzian" ;
        sb.append(tmp);
        sb.append(EOL);
        
        
        tmp = IO.pad("Units", -PADLEN, PADCHAR );
        tmp         = tmp + " = "+  getUnits() ;
        sb.append(tmp);
        sb.append(EOL);
        
        
        tmp = IO.pad("Orig Fid File Name", -PADLEN, PADCHAR );
        tmp         = tmp + " = "+  FidViewer.getInstance().getProcpar().getFileSource() ;
        sb.append(tmp);
        sb.append(EOL);
        
        
        String fidName  =   BayesManager.FID_DIR_NAME + spr + BayesManager.FID_FILE_NAME;
        tmp = IO.pad("Fid File Name", -PADLEN, PADCHAR );
        tmp             = tmp + " = "+   fidName ;
        sb.append(tmp);
        sb.append(EOL);
        
        String procparName  =   BayesManager.FID_DIR_NAME + spr + BayesManager.PROCPAR_FILE_NAME;
        tmp = IO.pad("Procpar File Name", -PADLEN, PADCHAR );
        tmp             = tmp + " = "+   procparName ;
        sb.append(tmp);
        sb.append(EOL);
        
        String yesno   = (isOutputConstants ())? "Yes": "No";
        tmp = IO.pad("Output Constants", -PADLEN, PADCHAR );
        tmp             = tmp + " = "+  yesno ;
        sb.append(tmp);
        sb.append(EOL);
        
        
        tmp = IO.pad("Bayes Analyze Dir", -PADLEN, PADCHAR );
        tmp             = tmp + " = "+ BayesManager.BAYES_ANALYZE;
        sb.append(tmp);
        sb.append(EOL);
    

        return sb;
    }
    public List <ParameterPrior>  getPriors() {
        return new Vector <ParameterPrior>();
    }
    public String            getConstructorArg(){return null;}
    public String            getInstructions(){return PACKAGE_INTSRUCTIONS.FIND_RESONANCES.getInstruction();}
    public boolean           isOutliers(){return false;}
    public void              reset(){
         
           setDefaults();

           clearPreviousRun();

           // show defualt viewer
           AllViewers.getInstance().showDefaultViewer();
        
    }

    public void              clearPreviousRun(){

         Reset.clearFidResutls();

         // reset job status
         jRun.reset();

    }
    public void              setDefaults(){
          setPhaseModel(PHASE_MODEL.COMMON);

          setOutputConstants(false);
          getOutputConstantCheckBox().setSelected(isOutputConstants());
          
          setFirstFid(1);
          setLastFid(1);


         setMaximumResonances(10);
          getMaximimumResonancesWidget ().setValue(getMaximumResonances());

    }
    public void              setActive(boolean isActive){
          AllViewers.getInstance().setActive( isActive);

        getFirstFid_lbl().setEnabled( isActive );
        getFistFid_ft().setEnabled( isActive );
        getLastFid_ft().setEnabled( isActive );
        lastFid_lbl.setEnabled( isActive );
        getMaximimumResonancesWidget().setEnabled( isActive );
        maxREs_lbl.setEnabled( isActive );
        getOutputConstantCheckBox().setEnabled( isActive );
        getPhaseModel_cb().setEnabled( isActive );
        constantLabel.setEnabled(isActive);
        phaseModel_lbl.setEnabled( isActive );
        jserver.setActive(isActive);
        jRun.setEnabled(isActive);
        jResetSave.setActive(isActive);
        modelFid_ft.setEnabled(isActive);
        modelFid_lbl.setEnabled(isActive);
        buildModelButton.setEnabled(isActive);
    }
    public void              propertyChange(java.beans.PropertyChangeEvent evt){
        String property =  evt.getPropertyName();

        if(property.equals(BayesManager.JRUN_JOB_END)  ){
                FidViewer.getInstance().updatePlotAndBayesAnalyzeParameters();
                setActive(true);
                AllViewers.showResultsViewer();
                return;
        }
        
        else if(property.equals(BayesManager.JRUN_JOB_START)  ){
                setActive(false);
                return;
        }
        
        else if(property.equals(BayesManager.JRUN_JOB_CANCELED)  ){
                setActive(true);
                return;
        }
        else if(evt.getPropertyName().equals(BayesManager.FID_UNITS_ARE_CHANGED)  ){
           clearPreviousRun();
      } 
    
   }
  
    
    
    
    public static boolean writeParamsFile(Model model){
        File file               =       DirectoryManager.getBayesParamsFile();
        StringBuilder content   =       new StringBuilder();
        StringBuilder header    =       WriteBayesParams.writeParamsHeader(model);
        StringBuilder footer    =       model.getModelSpecificsForParamsFile(WriteBayesParams.PADLEN, WriteBayesParams.PADCHAR);
        
        content.append(header);
        content.append(footer);
        boolean isSuccess       =       IO.writeFileFromString(content.toString(), file);
        return isSuccess;
    }
    public static File [] checkForModelFiles(){
        File dir                    =   DirectoryManager.getBayesAnalyzeDir();
        
        if (dir.exists() == false) {return null; }
            
        
       
        File [] files  =  dir.listFiles(new utilities.BayesFileFilters.ModelFileFilter());
        
        return files ;
    } 

    
    public File[] getModelFiles(){
       File dir = DirectoryManager.getBayesOtherAnalysisDir();
       if (dir == null || dir.exists() == false) {return null;}

       File [] files = dir.listFiles(new utilities.BayesFileFilters.ModelFileFilter());
       return files;

    }
   
    public boolean isParametersSetCorrectly(){
        boolean goodToGo    =   true;
        FidViewer fv        =   FidViewer.getInstance();
        int m               =   fv.getNumberOfTraces();
        int modNum          =   getFidModelNumber ();
        String errorMessage =   null;
        
        if      (getFirstFid () < 1)    {errorMessage = "First fid must be 1 or higher.";}
        else if (getLastFid () < 1)     {errorMessage = "Last fid must be 1 or higher.";}
        else if (getFirstFid () > m)    {errorMessage = "First fid  must be less or equal \nto the number of fid data ("+ m + ").";}
        else if (getLastFid () > m)     {errorMessage = "Last fid  must be less or equal \nto the number of fid data ("+ m + ").";}
        else if (modNum < 1)            {errorMessage = "Fid model number must be 1 or higher.";}
        else if (modNum  > m)           {errorMessage = "Fid model number must be less or equal \nto the number of fid data ("+ m + ").";}
       
        
        if (errorMessage  !=   null){
             JOptionPane.showMessageDialog(new JFrame(),"errorMessage.","Message", JOptionPane.WARNING_MESSAGE);
             return false;                             
                
        }
        
      
        return goodToGo;
    }
    
    public static void createAndShowGUI() {

        //Create and set up the window.
        JFrame frame = new JFrame("Bayes Find Resonances ");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.addWindowListener(new java.awt.event.WindowAdapter() {

            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                DirectoryManager.shutDownDirectory();
            }
        });
        frame.add(new BayesFindResonances());

        //Display the window.
        frame.pack();
        frame.setVisible(true);
    }
    public static void main(String[] args) {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                createAndShowGUI();
            }
        });

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buildModelButton;
    private javax.swing.JLabel constantLabel;
    private javax.swing.JButton dummyButton;
    private javax.swing.JLabel firstFid_lbl;
    private javax.swing.JFormattedTextField fistFid_ft;
    private javax.swing.JPanel graph_pane;
    public javax.swing.JCheckBox jOutputConstantSelected;
    private interfacebeans.JResetSave jResetSave;
    private run.JRun jRun;
    private interfacebeans.JServer jserver;
    private javax.swing.JFormattedTextField lastFid_ft;
    private javax.swing.JLabel lastFid_lbl;
    private javax.swing.JLabel maxREs_lbl;
    private javax.swing.JFormattedTextField modelFid_ft;
    private javax.swing.JLabel modelFid_lbl;
    private javax.swing.JFormattedTextField nMaxRes_ft;
    private javax.swing.JComboBox phaseModel_cb;
    private javax.swing.JLabel phaseModel_lbl;
    private javax.swing.JPanel setModel_pane;
    private javax.swing.JPanel setModel_pane1;
    private javax.swing.JPanel setTraces_pane;
    private javax.swing.JPanel setting_pane;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JPanel tool_pane;
    private javax.swing.JScrollPane toolsScrollPane;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
    public javax.swing.JLabel               getFirstFid_lbl () {
        return firstFid_lbl;
    }
    public javax.swing.JFormattedTextField  getFistFid_ft () {
        return fistFid_ft;
    }
    public javax.swing.JFormattedTextField  getLastFid_ft () {
        return lastFid_ft;
    }
    public javax.swing.JFormattedTextField  getModelFid_ft () {
        return modelFid_ft;
    }
    public javax.swing.JFormattedTextField  getMaximimumResonancesWidget () {
        return nMaxRes_ft;
    }
    public javax.swing.JComboBox            getPhaseModel_cb () {
        return phaseModel_cb;
    }
    public javax.swing.JButton              getBuildModelButton () {
        return buildModelButton;
    }
    public javax.swing.JCheckBox            getOutputConstantCheckBox() {
        return jOutputConstantSelected;
    }

      
    private int         packageParamters        =   10;
    private int         maximumResonances       =   10;
    private int         firstFid                =   1;
    private int         lastFid                 =   1;
    private int         fidModelNumber          =   1;
    private boolean     outputConstants         =   false;
    private PHASE_MODEL phaseModel              =   PHASE_MODEL.COMMON;
    private boolean modelsAvailable             =   false;

   

    public boolean  isOutputConstants () {
        return outputConstants;
    }
    public void     setOutputConstants ( boolean outputConstants ) {
        this.outputConstants = outputConstants;
    }
    public UNITS    getUnits  (){return FidViewer.getInstance().getUnits();}
    public int      getLastFid () {
        return lastFid;
    }
    public void     setLastFid ( int aLastFid ) {
        this.lastFid = aLastFid;
        if ( getLastFid_ft() != null){ getLastFid_ft().setText(""+ lastFid);}
    }
    public int      getFirstFid () {
        return firstFid;
    }
    public void     setFirstFid ( int  aFirstFid ) {
        this.firstFid = aFirstFid;
        if ( getFistFid_ft() != null){ getFistFid_ft().setText(""+ firstFid);}
    }
    public int      getMaximumResonances () {
        return maximumResonances;
    }
    public void     setMaximumResonances ( int maximumResonances ) {
        this.maximumResonances = maximumResonances;
        //if (getNMaxRes_ft() != null){getNMaxRes_ft().setText(""+maximumResonances);}
    }
    public int      getPackageParamters () {
        return packageParamters;
    }
    public int      getFidModelNumber () {
        return fidModelNumber;
    }
    public PHASE_MODEL   getPhaseModel (){return phaseModel;}
    public void     setPhaseModel(PHASE_MODEL model){
        phaseModel = model;
        if ( getPhaseModel_cb() != null){getPhaseModel_cb().setSelectedItem(model) ;}
   
    }
  
    
    public boolean isModelsAvailable () {
        return modelsAvailable;
    }
    public void setModelsAvailable ( boolean modelsAvailable ) {
        this.modelsAvailable = modelsAvailable;
    }
    public void setFidModelNumber ( int fidModelNumber ) {
        this.fidModelNumber = fidModelNumber;
        if (getModelFid_ft() != null){
                getModelFid_ft().setValue(fidModelNumber);
        }
    }
    public void setFirstFid_lbl ( javax.swing.JLabel firstFid_lbl ) {
        this.firstFid_lbl = firstFid_lbl;
    }

   
    public   void   submitAndGetModel(File modelFile){
        if (   RunModelFindResonances.isModelReadyToRun(this.getFidModelNumber(), modelFile) == false) { return;}

        Window w        =  SwingUtilities.getWindowAncestor (this);

        // show busy cursor while loading
        if (w != null){
             try{
                w.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                RunModelFindResonances.submitAndGetModel();

              }
              finally{
                 w.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR ));
              }
        }

    }


    
    class FileComboBoxRenderer extends JLabel implements ListCellRenderer {
        private static final long serialVersionUID      = 7526472295622376147L;

        public FileComboBoxRenderer(){
        setOpaque(true);
        //Font font   = new Font("Dialog", 1,16);
        //this.setFont(font); 
       //setIconTextGap(12);
      }
        public Component getListCellRendererComponent(JList list, Object value,
            int index, boolean isSelected, boolean cellHasFocus) {
            if (value  == null ) {
                setText("No models");
                return this;
            }
            File file = (  File) value;
            setText(file.getName());

            if (isSelected) {

            } 
            else {

            }
            return this;
            }
    }
     class BuildModelMenuItem extends JMenuItem{
        private File file;
        BuildModelMenuItem (File aFile){
            super(aFile.getName());
            file = aFile;

             addActionListener (new ActionListener (){
             public void actionPerformed (ActionEvent e) {
                    BuildModelMenuItem source = (BuildModelMenuItem)e.getSource();
                    submitAndGetModel(source.getFile());
                }
            });

        }

        public File getFile () {
            return file;
        }
        public void setFile (File afile ) {
            this.file= afile;
        }
   }
}
