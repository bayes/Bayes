

package applications.bayesWater;

import run.JRun;
import bayes.ParameterPrior;
import bayes.PackageManager;
import bayes.DirectoryManager;
import javax.swing.*;
import java.io.*;
import bayes.JobDirections;
import bayes.WriteBayesParams;
import interfacebeans.*;
import bayes.BayesManager;
import utilities.IO;
import utilities.LoadPackage;
import fid.FidViewer;
import fid.FidModelViewer;
import java.util.List;
import utilities.DisplayText;
import static bayes.Enums.*;
import bayes.ParameterPrior.ORDER_TYPE;
import bayes.ParameterPrior.PRIOR_TYPE;
import bayes.ParameterPrior.PARAMETER_TYPE;
import bayes.Reset;
/**
 *
 * @author  apple
 */
public class BayesWater extends     javax.swing.JPanel 
                        implements  applications.model.FidModel,
                                    java.beans.PropertyChangeListener
{
    
    /** Creates new form BayesWater */
    public BayesWater () {
        LoadPackage.loadPackage(this);
        PackageManager.setCurrentApplication(this);
        
        boolean isDeseralized = bayes.Serialize. deserializeCurrenExperiment();

        AllViewers.removeFidViewer();
        AllViewers.removePriorsViewer();
        AllViewers.addFidPriorHybrid();
        JAllPriors.getInstance().setAllowDeleteParameters(true);
        
        initComponents();


        FidModelViewer.getInstance().setVisibleModelBuild(false);
        BayesManager.pcs.addPropertyChangeListener(this);
        

        if(isDeseralized){
            AllViewers.showFidViewer();
            JRun.fireJobIDChange();
            FidViewer.getInstance().updatePlot();
        }
        else {
            AllViewers.showInstructions();
        }
    }
        
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSplitPane1 = new javax.swing.JSplitPane();
        setup_pane = new javax.swing.JPanel();
        jRun = new run.JRun();
        jPanel1 = new javax.swing.JPanel();
        addSolvnt_btn = new javax.swing.JButton();
        addFreqParam = new javax.swing.JButton();
        jResetSave = new interfacebeans.JResetSave();
        jServer = new interfacebeans.JServer();
        graph_pane = AllViewers.getInstance();

        FormListener formListener = new FormListener();

        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setOneTouchExpandable(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Add"));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        addSolvnt_btn.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        addSolvnt_btn.setText("Solvent");
        addSolvnt_btn.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\nPlace cursors on the max and min<br>\nlocations of the solvent resonance <br>\nin the plot. Then press this button.\n</html>\n\n"); // NOI18N
        addSolvnt_btn.setMargin(new java.awt.Insets(0, 1, 0, 2));
        addSolvnt_btn.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 2, 10);
        jPanel1.add(addSolvnt_btn, gridBagConstraints);

        addFreqParam.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        addFreqParam.setText("Metabolite");
        addFreqParam.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\nPlace cursors on the max and min<br>\nlocations of the metabolite resonance <br>\nin the plot. Then press this button.\n</html>\n\n"); // NOI18N
        addFreqParam.setMargin(new java.awt.Insets(0, 1, 0, 2));
        addFreqParam.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 10);
        jPanel1.add(addFreqParam, gridBagConstraints);

        org.jdesktop.layout.GroupLayout setup_paneLayout = new org.jdesktop.layout.GroupLayout(setup_pane);
        setup_pane.setLayout(setup_paneLayout);
        setup_paneLayout.setHorizontalGroup(
            setup_paneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(setup_paneLayout.createSequentialGroup()
                .add(jRun, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 201, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jServer, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 200, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 162, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jResetSave, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 152, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(393, Short.MAX_VALUE))
        );
        setup_paneLayout.setVerticalGroup(
            setup_paneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
            .add(setup_paneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(jRun, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                .add(jServer, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(jResetSave, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setup_paneLayout.linkSize(new java.awt.Component[] {jPanel1, jResetSave, jRun, jServer}, org.jdesktop.layout.GroupLayout.VERTICAL);

        jSplitPane1.setLeftComponent(setup_pane);

        graph_pane.setLayout(new javax.swing.BoxLayout(graph_pane, javax.swing.BoxLayout.LINE_AXIS));
        jSplitPane1.setRightComponent(graph_pane);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == addSolvnt_btn) {
                BayesWater.this.addSolvnt_btnActionPerformed(evt);
            }
            else if (evt.getSource() == addFreqParam) {
                BayesWater.this.addFreqParamActionPerformed(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private void addSolvnt_btnActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSolvnt_btnActionPerformed
        addPrameter(true);
        clearPreviousRun();
    }//GEN-LAST:event_addSolvnt_btnActionPerformed
    private void addFreqParamActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFreqParamActionPerformed
        addPrameter(false);
        clearPreviousRun();
    }//GEN-LAST:event_addFreqParamActionPerformed
    public void propertyChange(java.beans.PropertyChangeEvent evt){
      if(evt.getPropertyName().equals(BayesManager.JRUN_JOB_END)  ){
            setActive(true);
            AllViewers.showResultsViewer();
            return;
      }
      
      if(evt.getPropertyName().equals(BayesManager.JRUN_JOB_START)  ){
            setActive(false);
            return;
      }
      if(evt.getPropertyName().equals(BayesManager.JRUN_JOB_CANCELED)  ){
            setActive(true);
            return;
      }
      else if(evt.getPropertyName().equals(BayesManager.FID_UNITS_ARE_CHANGED)  ){
           clearPreviousRun();
      } 
      
      if(evt.getPropertyName().equals(BayesManager.FID_LOADED_BY_USER  )  ){
           JAllPriors priors = JAllPriors.getInstance();
           priors.setParams(initializeParams());
           clearPreviousRun();
           return;
      }
       
      if(evt.getPropertyName().equals(BayesManager.FID_LOADED_BY_JAVA)  ){
           JAllPriors priors = JAllPriors.getInstance();
           
            // if priors were not deserilized
            if (priors.getParams().isEmpty() ){
                 priors.setParams(initializeParams());
            }
          

         return;
      }
      
  
 
     
   }
    
    @Override
    public void              setPackageParameters(ObjectInputStream serializationFile) throws Exception{
     
          List<ParameterPrior> priors =  ( List<ParameterPrior>)serializationFile.readObject();
          JAllPriors.getInstance().setParams( priors );
         
    }
    @Override
    public void              savePackageParameters(ObjectOutputStream serializationFile){
        try{
  
            // serialize priors 
           serializationFile.writeObject(getPriors());
           
        } catch (Exception exp){
            File file  = DirectoryManager.getSerializationFile();
            file.delete();
        }
    }
    @Override
    public boolean           isReadyToRun() {
       
        // make sure data is loaded
        boolean isDataLoaded = FidViewer.getInstance().isLoaded();
        if (isDataLoaded == false) {
            DisplayText.popupErrorMessage(    "You must load data before you run the program");
            return false;
        }
        
   
        // make sure that priors were assigned
        if (getPriors() == null){
             DisplayText.popupErrorMessage(  "Priors were not set yet.");
             return false;
        }
        if ( JAllPriors.getInstance().getFrequencyParams().size() < 1 ){
             DisplayText.popupErrorMessage(  "Mark Frequency parameter prior to run.");
            return false;
       }
        
        
       // write the parameter file
       File dir = DirectoryManager.getBayesOtherAnalysisDir();
       boolean bl  =  WriteBayesParams.writeParamsFile(this, dir);
       if (bl == false){
           DisplayText.popupErrorMessage(   "Failed to write Bayes.params file.");
           return false;
       }
        
    
      
       //  write "job.directions" file
         PackageManager.setCurrentApplication(this);
         bl  =  JobDirections.writeFromProperties(JobDirections.BAYES_SUBMIT);
        if(bl == false){
            DisplayText.popupErrorMessage( "Failed to write job.directions file.");
            return false;
         }
         
        return true;
    }
    public String            getProgramName() { return "BayesWater";}
    public String            getExtendedProgramName() { return "Bayes Water" ;}
    public int               getNumberOfAbscissa() {  return 1;}
    public int               getNumberOfDataColumns() { return 1;}
    public int               getTotalNumberOfColumns(){return 1;}
    public int               getNumberOfPriors() {
      return  JAllPriors.getInstance(). getParams().size();
    }
    public StringBuilder     getModelSpecificsForParamsFile(int PADLEN, String PADCHAR) {
        StringBuilder buffer = new StringBuilder();
        
         buffer.append(BayesManager.EOL);
        
         int nPackageParams = 8;
                
         buffer.append(IO.pad("Package Parameters", PADLEN, PADCHAR));
         buffer.append("= "   +     nPackageParams);
         buffer.append(BayesManager.EOL);
                 
         buffer.append(IO.pad("Input File name", PADLEN, PADCHAR));
         buffer.append("= "   +     FidViewer.getInstance().getProcpar().getFileSource());
         buffer.append(BayesManager.EOL);
         
         String fidName = BayesManager.FID_DIR_NAME + spr + "fid";
                
         buffer.append(IO.pad("Fid File name", PADLEN, PADCHAR));
         buffer.append("= "   +     fidName);
         buffer.append(BayesManager.EOL);
         
         String procparName = BayesManager.FID_DIR_NAME+ spr + "procpar";
         buffer.append(IO.pad("Procpar File name", PADLEN, PADCHAR));
         buffer.append("= "   +    procparName);
         buffer.append(BayesManager.EOL);
         
         buffer.append(IO.pad("Model File name", PADLEN, PADCHAR));
         buffer.append("= "   +   BayesManager.MODEL_FID_DIR);
         buffer.append(BayesManager.EOL);
         
         String units = FidViewer.getInstance().getUnits().getName();
         buffer.append(IO.pad("Units", PADLEN, PADCHAR));
         buffer.append("= "   +   units);
         buffer.append(BayesManager.EOL);
         
         float ref = FidViewer.getInstance().getReferenceInCurrentUnits();
         buffer.append(IO.pad("Reference", PADLEN, PADCHAR));
         buffer.append("= "   +   ref);
         buffer.append(BayesManager.EOL);
         
         int trace = FidViewer.getInstance().getTraceNumber ();
         buffer.append(IO.pad("Use Fid Number", PADLEN, PADCHAR));
         buffer.append("= "   +    trace);
         buffer.append(BayesManager.EOL);
         
         String isSolvent;
         if( JAllPriors.getInstance().
                getParameterByName(JAllPriors.SOLVENT_FREQ_NAME) != null){
             isSolvent = "Yes";
         }
         else {
              isSolvent = "No";
         }
         
         buffer.append(IO.pad("Solvant Active",PADLEN, PADCHAR));
         buffer.append("= "  +    isSolvent);
         buffer.append(BayesManager.EOL);
                
         
         return buffer;
        
    }
    public List<ParameterPrior>  getPriors() {
        return  JAllPriors.getInstance().getParams();
    }
    public String            getConstructorArg(){return null;}
    public String            getInstructions(){return PACKAGE_INTSRUCTIONS.BAYES_WATER.getInstruction();}
    public boolean           isOutliers(){return false;}
    public void              reset(){
         JAllPriors priors = JAllPriors.getInstance();
         priors.setParams(initializeParams());
            
          setDefaults() ;
          clearPreviousRun();

            FidViewer.getInstance().updatePlot();


            // show defualt viewer
            AllViewers.getInstance().showDefaultViewer();

    }
    public void              clearPreviousRun(){
        Reset.clearFidResutls();


         // reset job status
         jRun.reset();

    }
    public void              setDefaults(){

    }

    public void                 setActive(boolean enabled){
        AllViewers.getInstance().setActive(enabled);

        jServer.setActive(enabled);
        jRun.setEnabled(enabled);
        jResetSave.setEnabled(enabled);
        addFreqParam.setEnabled(enabled);
        addSolvnt_btn.setEnabled(enabled);

    }
    public void              destroy(){};
    
    public  void addPrameter ( boolean isWaterResonance  ) {                                               
        JAllPriors priors           =  JAllPriors.getInstance();
        FidViewer  fidViewer        =  FidViewer.getInstance();
        
        int index                   =  priors.getAvailbaelFrequencyIndex();
        
          if (FidViewer.getInstance().isShowing() == false){
          AllViewers.getInstance().getFidViewer();
        }
        
        
        if (fidViewer.getDataType() != FID_DATA_TYPE.SPECTRUM_REAL){
            fidViewer.setDataType(FID_DATA_TYPE.SPECTRUM_REAL);
        }
         
        if (isWaterResonance == true && 
            priors.getParameterByName(JAllPriors.SOLVENT_FREQ_NAME) != null )
               
        {
             // Water resonance parameter already exist.
             // Only one can exist, therefore do nothing
             javax.swing.JOptionPane.showMessageDialog(null, 
             "Only one water resonance can be marked \n",
             "alert", javax.swing.JOptionPane.ERROR_MESSAGE);
             return;
        }
        
        
        if (    fidViewer.getChartPanel().getCursorA() == null ||
                fidViewer.getChartPanel().getCursorB() == null  )  
      {
               javax.swing.JOptionPane.showMessageDialog(null, 
                "To add solvent or metbolite \n" +
                "both cursors must be shown in the graph.",
                "alert", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
      }
       
        
        
        // make sure plot won't get updated multiple times
        FidViewer.getInstance().setUpdatePlot(false);
        
        double lowF                 =   fidViewer.getChartPanel().getLowerBoundFromCursorBox();
        double highF                =   fidViewer.getChartPanel().getUpperBoundFromCursorBox();
        
        // add frequency parameter
        ParameterPrior prior        =  new ParameterPrior();
        if (isWaterResonance == true)
        {
            prior.name              =   JAllPriors.SOLVENT_FREQ_NAME;
            prior.order             =   ORDER_TYPE.NotOrdered;
        }
        else{
            prior.name              =  JAllPriors.FREQ_PARAM_NAME+ index;
            prior.order             =   ORDER_TYPE.LowHigh;
        }
        prior.low                   =   lowF;
        prior.high                  =   highF;
        prior.mean                  =   (prior.low +prior.high)/2;
        prior.priorType             =   PRIOR_TYPE.GAUSSIAN;
        prior.setParameterType(PARAMETER_TYPE.Frequency);
        prior.sdev                  =   (prior.high - prior.low)/6;
        prior.isOrderEditable       =   false;
        prior.isPriorTypeEditable   =   false;
        priors.addParameter(prior);
        
       
        // add rate parameter
        prior                       =  new ParameterPrior();
        float at                    =  FidViewer.getInstance().getProcpar().getAt(); 
        if (isWaterResonance == true)
        {
            prior.name              =   JAllPriors.SOLVENT_RATE_NAME;
            prior.mean              =   3/at;
         
        }
        else{
            prior.name              =   JAllPriors.RATE_PARAM_NAME+ index;
            prior.mean              =   1/at;
           
         }
        
        prior.low                   =   0;
        prior.high                  =   20*3/at;
        prior.priorType             =   PRIOR_TYPE.POSITIVE;
        prior.setParameterType(PARAMETER_TYPE.NonLinear);
        prior.order                 =   ORDER_TYPE.NotOrdered;
        prior.sdev                  =   (prior.high - prior.low)/6;
        prior.isOrderEditable       =   false;
        priors.addParameter(prior);
        
        // restore default value for plot updating flag
        FidViewer.getInstance().setUpdatePlot(true);
      
        fidViewer.updatePlot();
    }                
    private ParameterPrior [] initializeParams(){
         ParameterPrior [] params = new   ParameterPrior [4];
         ParameterPrior    pr;
         
         pr                     = new ParameterPrior();
         pr.name                = "RealNoOfPoly";
         pr.low                 = 1.0;
         pr.high                = 20.0;
         pr.mean                = 1.0;
         pr.sdev                = 5.0;
         pr.priorType           = PRIOR_TYPE.EXPONENTIAL;
         pr.order               = ORDER_TYPE.NotOrdered;
         pr.setParameterType(PARAMETER_TYPE.NonLinear);
         pr.isOrderEditable     = false;
         pr.isPriorTypeEditable = true;
         pr.isPriorEditable     = false;
         params[0]              = pr;
         
         pr                     = new ParameterPrior();
         pr.name                = "ImagNoOfPoly";
         pr.low                 = 1.0;
         pr.high                = 20.0;
         pr.mean                = 1.0;
         pr.sdev                = 5.0;
         pr.priorType           = PRIOR_TYPE.EXPONENTIAL;
         pr.order               = ORDER_TYPE.NotOrdered;
         pr.setParameterType(PARAMETER_TYPE.NonLinear);
         pr.isOrderEditable     = false;
         pr.isPriorTypeEditable = true;
         pr.isPriorEditable     = false;
         params[1]              = pr;
         
         pr                     = new ParameterPrior();
         pr.name                = "Phase";
         pr.low                 = 0.0;
         pr.high                = 360.0;
         pr.mean                = 0.0;
         pr.sdev                = 5.0;
         pr.priorType           = PRIOR_TYPE.UNIFORM;
         pr.order               = ORDER_TYPE.NotOrdered;
         pr.setParameterType(PARAMETER_TYPE.NonLinear);
         pr.isOrderEditable     = false;
         pr.isPriorTypeEditable = true;
         pr.isPriorEditable     = false;
         params[2]              = pr;
         
         
         pr                     = new ParameterPrior();
         pr.name                = "T0";
         pr.low                 = -10.0;
         pr.high                = 10.0;
         pr.mean                = 0.0;
         pr.sdev                = 1.0;
         pr.priorType           = PRIOR_TYPE.GAUSSIAN;
         pr.order               = ORDER_TYPE.NotOrdered;
         pr.setParameterType(PARAMETER_TYPE.NonLinear);
         pr.isOrderEditable     = false;
         pr.isPriorTypeEditable = true;
         pr.isPriorEditable     = false;
         params[3]              = pr;
       
         return params;
    }
    
    public static void createAndShowGUI() {

        //Create and set up the window.
        JFrame frame = new JFrame(" Bayes Water ");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
 
        frame.addWindowListener(new java.awt.event.WindowAdapter() {

            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                DirectoryManager.shutDownDirectory();
            }
        });

        frame.add(new BayesWater());

        //Display the window.
        frame.pack();
        frame.setVisible(true);
    }
    public static void main(String[] args) {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                createAndShowGUI();
            }
        });

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFreqParam;
    private javax.swing.JButton addSolvnt_btn;
    private javax.swing.JPanel graph_pane;
    private javax.swing.JPanel jPanel1;
    private interfacebeans.JResetSave jResetSave;
    private run.JRun jRun;
    private interfacebeans.JServer jServer;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel setup_pane;
    // End of variables declaration//GEN-END:variables


}
