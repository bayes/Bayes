/*
 * AnalyzeImagePixels.java
 *
 * Created on November 17, 2008, 11:36 AM
 */

package applications.bayesTestData;
import ascii.AsciiIO;
import image.ImageIO;
import bayes.Reset;
import bayes.ParameterPrior;
import bayes.PackageManager;
import bayes.WriteBayesParams;
import bayes.JobDirections;
import bayes.BayesManager;
import bayes.DirectoryManager;
import applications.model.EnterAsciiPackage;
import run.JRun;
import java.util.List;
import applications.model.ImageModel;
import bayes.BayesView;
import bayes.Enums;
import javax.swing.*;
import java.io.*;
import utilities.*;
import interfacebeans.*;
import load.*;
import bayes.Enums.*;
import bayes.ParameterPrior.PARAMETER_TYPE;
import interfacebeans.AllViewers;
import image.ImageViewer;
import image.ImageDescriptor;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import load.LoadAsciiModels.*;
/**
 *
 * @author  apple
 */
public class BayesTestData extends javax.swing.JPanel
        implements ImageModel,
                    EnterAsciiPackage,
                        java.beans.PropertyChangeListener {

    /** Creates new form AnalyzeImagePixels */
    public BayesTestData() {
        LoadPackage.loadPackage(this);
        PackageManager.setCurrentApplication(this);
        
        AllViewers.addCodeViewer();
        boolean isDeseralized = bayes.Serialize. deserializeCurrenExperiment();
        
        initComponents();
        
        BayesManager.pcs.addPropertyChangeListener(this);
        JShowModels.getInstance().addPropertyChangeListener(this);
        ImageViewer.getInstance().addPropertyChangeListener(this);
        JAllPriors.getInstance().setShowAmplitudePriors(true);
        
        if(isDeseralized){
            AllViewers.showImageViewer();
            JRun.fireJobIDChange();
        }
        else { AllViewers.showInstructions();}
        generateLoadMessage( );
       
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tools = new javax.swing.JPanel();
        jRun = new run.JRun();
        modelaImagePane = new javax.swing.JPanel();
        numImageLabel = new javax.swing.JLabel();
        numberOutputImagesTextField = new javax.swing.JFormattedTextField();
        numPhaseEncodePixelTextField = new javax.swing.JFormattedTextField();
        numReadoutPixelLabel = new javax.swing.JLabel();
        numReadoutPixelTextField = new javax.swing.JFormattedTextField();
        numPhaseEncodePixelLabel = new javax.swing.JLabel();
        numberSlicesTextField = new javax.swing.JFormattedTextField();
        numImageLabel1 = new javax.swing.JLabel();
        numSlicesLabel = new javax.swing.JLabel();
        jserver = interfacebeans.JServer.getInstance();
        jPanel2 = new javax.swing.JPanel();
        jSystemModel = new javax.swing.JButton();
        jUserModel = new javax.swing.JButton();
        buildModelButton = new javax.swing.JButton();
        savePriorsButton = new javax.swing.JButton();
        jResetSave = new interfacebeans.JResetSave();
        abscissaPane = new javax.swing.JPanel();
        abscissaLabel = new javax.swing.JLabel();
        abscissaComboBox = new javax.swing.JComboBox(ABSCISSA.values());
        absmaxValueLabel = new javax.swing.JLabel();
        maxValueTextField = new javax.swing.JFormattedTextField();
        SettingsPane = new javax.swing.JPanel();
        noiseStdDevLabel = new javax.swing.JLabel();
        stdDevField = new javax.swing.JFormattedTextField(new DecimalFormat("#.#####"));
        emptyPlaceHolderLabel = new javax.swing.JLabel();
        arrayDimensionLabel = new javax.swing.JLabel();
        emptyPlaceHolderLabel1 = new javax.swing.JLabel();
        arrayDimensionTextField = new javax.swing.JFormattedTextField();
        graph_panel = AllViewers.getInstance ();

        FormListener formListener = new FormListener();

        setPreferredSize(new java.awt.Dimension(1100, 800));
        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(140);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setName("jSplitPane1"); // NOI18N
        jSplitPane1.setOneTouchExpandable(true);

        jScrollPane1.setBorder(null);
        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tools.setFocusCycleRoot(true);
        tools.setName("tools"); // NOI18N

        jRun.setName("jRun"); // NOI18N

        modelaImagePane.setBorder(javax.swing.BorderFactory.createTitledBorder("Data Dimensions"));
        modelaImagePane.setName("modelaImagePane"); // NOI18N
        modelaImagePane.setLayout(new java.awt.GridBagLayout());

        numImageLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        numImageLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        numImageLabel.setText("# Images");
        numImageLabel.setName("numImageLabel"); // NOI18N
        modelaImagePane.add(numImageLabel, new java.awt.GridBagConstraints());

        numberOutputImagesTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0"))));
        numberOutputImagesTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        numberOutputImagesTextField.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nNumber of output model images must be<br>\ngreater than 1 and less than or equal to 10\n\n</font></p><html>\n\n"); // NOI18N
        numberOutputImagesTextField.setInputVerifier(new RangeIntegerInputVerifier(1,10));
        numberOutputImagesTextField.setName("numberOutputImagesTextField"); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${numberOutputImages}"), numberOutputImagesTextField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        numberOutputImagesTextField.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        modelaImagePane.add(numberOutputImagesTextField, gridBagConstraints);

        numPhaseEncodePixelTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0"))));
        numPhaseEncodePixelTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        numPhaseEncodePixelTextField.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nThe number of pixels in the phase encode (horizontal) direction.<br>\nValid values are integers from 5 to 25.\n</font></p><html>\n\n"); // NOI18N
        numPhaseEncodePixelTextField.setInputVerifier(new RangeIntegerInputVerifier(5,25));
        numPhaseEncodePixelTextField.setName("numPhaseEncodePixelTextField"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${numberPhaseEncodePixels}"), numPhaseEncodePixelTextField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        numPhaseEncodePixelTextField.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        modelaImagePane.add(numPhaseEncodePixelTextField, gridBagConstraints);

        numReadoutPixelLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        numReadoutPixelLabel.setText("Ro");
        numReadoutPixelLabel.setName("numReadoutPixelLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 2);
        modelaImagePane.add(numReadoutPixelLabel, gridBagConstraints);

        numReadoutPixelTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0"))));
        numReadoutPixelTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        numReadoutPixelTextField.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nThe number of pixels in read out (vertical) direction.<br>\nValid values are integers from 5 to 25.\n</font></p><html>\n\n"); // NOI18N
        numReadoutPixelTextField.setInputVerifier(new RangeIntegerInputVerifier(5,25));
        numReadoutPixelTextField.setName("numReadoutPixelTextField"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${numberReadoutPixels}"), numReadoutPixelTextField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        numReadoutPixelTextField.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        modelaImagePane.add(numReadoutPixelTextField, gridBagConstraints);

        numPhaseEncodePixelLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        numPhaseEncodePixelLabel.setText("Pe");
        numPhaseEncodePixelLabel.setName("numPhaseEncodePixelLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 2);
        modelaImagePane.add(numPhaseEncodePixelLabel, gridBagConstraints);

        numberSlicesTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0"))));
        numberSlicesTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        numberSlicesTextField.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nNumber of output slices must be<br>\ngreater than 1 and less than or equal to 10\n\n</font></p><html>\n\n"); // NOI18N
        numberSlicesTextField.setInputVerifier(new RangeIntegerInputVerifier(1,Integer.MAX_VALUE));
        numberSlicesTextField.setName("numberSlicesTextField"); // NOI18N
        numberSlicesTextField.setValue(this.numberOutputSlices);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${numberOutputSlices}"), numberSlicesTextField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        numberSlicesTextField.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        modelaImagePane.add(numberSlicesTextField, gridBagConstraints);

        numImageLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        numImageLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        numImageLabel1.setName("numImageLabel1"); // NOI18N
        modelaImagePane.add(numImageLabel1, new java.awt.GridBagConstraints());

        numSlicesLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        numSlicesLabel.setText("# Slices");
        numSlicesLabel.setName("numSlicesLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        modelaImagePane.add(numSlicesLabel, gridBagConstraints);

        jserver.setName("jserver"); // NOI18N

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Load and Build Model"));
        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jSystemModel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        jSystemModel.setText("  System   ");
        jSystemModel.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nLoad model from system directory.\n\n\n</font></p><html>\n\n\n"); // NOI18N
        jSystemModel.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jSystemModel.setName("jSystemModel"); // NOI18N
        jSystemModel.setPreferredSize(new java.awt.Dimension(125, 25));
        jSystemModel.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel2.add(jSystemModel, gridBagConstraints);

        jUserModel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        jUserModel.setText("User ");
        jUserModel.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nLoad model from user directory.\n\n\n</font></p><html>\n\n"); // NOI18N
        jUserModel.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jUserModel.setName("jUserModel"); // NOI18N
        jUserModel.setPreferredSize(new java.awt.Dimension(125, 25));
        jUserModel.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel2.add(jUserModel, gridBagConstraints);

        buildModelButton.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        buildModelButton.setText("Build");
        buildModelButton.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\n\nBuild (compile) model.\n\n\n</font></p><html>\n\n\n"); // NOI18N
        buildModelButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        buildModelButton.setName("buildModelButton"); // NOI18N
        buildModelButton.setPreferredSize(new java.awt.Dimension(120, 25));
        buildModelButton.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel2.add(buildModelButton, gridBagConstraints);

        savePriorsButton.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        savePriorsButton.setText("Save priors");
        savePriorsButton.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nSave current prior settings.\n\n\n</font></p><html>\n\n"); // NOI18N
        savePriorsButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        savePriorsButton.setName("savePriorsButton"); // NOI18N
        savePriorsButton.setPreferredSize(new java.awt.Dimension(125, 25));
        savePriorsButton.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel2.add(savePriorsButton, gridBagConstraints);

        jResetSave.setName("jResetSave"); // NOI18N

        abscissaPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Abscissa"));
        abscissaPane.setName("abscissaPane"); // NOI18N
        abscissaPane.setLayout(new java.awt.GridBagLayout());

        abscissaLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        abscissaLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        abscissaLabel.setText("Abscissa");
        abscissaLabel.setName("abscissaLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        abscissaPane.add(abscissaLabel, gridBagConstraints);

        abscissaComboBox.setSelectedItem(abscissa);
        abscissaComboBox.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\n<font color=\"blue\" size = \"+1\"><bold>Read</font></bold> - causes the loaded abscissa to be used in generating the images <br>\n<font color=\"blue\" size = \"+1\"><bold>Uniform</font></bold> - causes a uniformly sampled abscissa to be generated<br>\n<font color=\"blue\" size = \"+1\"><bold>NonUniform</font></bold> - cause a nonuniformly sampled abscissa to be generated\n\n</font></p><html>"); // NOI18N
        abscissaComboBox.setName("abscissaComboBox"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${abscissa}"), abscissaComboBox, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        abscissaComboBox.addItemListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        abscissaPane.add(abscissaComboBox, gridBagConstraints);

        absmaxValueLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        absmaxValueLabel.setText("Max Value");
        absmaxValueLabel.setName("absmaxValueLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        abscissaPane.add(absmaxValueLabel, gridBagConstraints);

        maxValueTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0"))));
        maxValueTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        maxValueTextField.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nMax Value is the absolute value of the maximum<br>\nabscissa generated\n</font></p><html>\n\n"); // NOI18N
        maxValueTextField.setInputVerifier(new PositiveFloatInputVerifier ());
        maxValueTextField.setName("maxValueTextField"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${maxAbscissaValue}"), maxValueTextField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        maxValueTextField.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        abscissaPane.add(maxValueTextField, gridBagConstraints);

        SettingsPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Settings"));
        SettingsPane.setName("SettingsPane"); // NOI18N
        SettingsPane.setLayout(new java.awt.GridBagLayout());

        noiseStdDevLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        noiseStdDevLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        noiseStdDevLabel.setText("Noise SD");
        noiseStdDevLabel.setName("noiseStdDevLabel"); // NOI18N
        SettingsPane.add(noiseStdDevLabel, new java.awt.GridBagConstraints());

        stdDevField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        stdDevField.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nThe standard deviation of the Gaussian noise <br>\nadded to each pixel in the generated images.<br>\nValid values are floats from 0.0001 to 100.\n\n</htm>\n\n\n"); // NOI18N
        stdDevField.setInputVerifier(new utilities.RangeDoubleInputVerifier(0.0001,100));
        stdDevField.setName("stdDevField"); // NOI18N
        stdDevField.setValue(this.standardDeviation);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${standardDeviation}"), stdDevField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        stdDevField.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        SettingsPane.add(stdDevField, gridBagConstraints);

        emptyPlaceHolderLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        emptyPlaceHolderLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        emptyPlaceHolderLabel.setText(" ");
        emptyPlaceHolderLabel.setName("emptyPlaceHolderLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        SettingsPane.add(emptyPlaceHolderLabel, gridBagConstraints);

        arrayDimensionLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        arrayDimensionLabel.setText("ArrayDim");
        arrayDimensionLabel.setName("arrayDimensionLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        SettingsPane.add(arrayDimensionLabel, gridBagConstraints);

        emptyPlaceHolderLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        emptyPlaceHolderLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        emptyPlaceHolderLabel1.setText(" ");
        emptyPlaceHolderLabel1.setName("emptyPlaceHolderLabel1"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        SettingsPane.add(emptyPlaceHolderLabel1, gridBagConstraints);

        arrayDimensionTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0"))));
        arrayDimensionTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        arrayDimensionTextField.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nThe array dimension of the generated<br>\nimage data and abscissa.<br>\nValid values are any positive non-zero integers.\n\n</font></p><html>\n\n"); // NOI18N
        arrayDimensionTextField.setInputVerifier(new RangeIntegerInputVerifier(1,Integer.MAX_VALUE));
        arrayDimensionTextField.setName("arrayDimensionTextField"); // NOI18N
        arrayDimensionTextField.setValue(numberOutputImages);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${arrayDimension}"), arrayDimensionTextField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        arrayDimensionTextField.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        SettingsPane.add(arrayDimensionTextField, gridBagConstraints);

        org.jdesktop.layout.GroupLayout toolsLayout = new org.jdesktop.layout.GroupLayout(tools);
        tools.setLayout(toolsLayout);
        toolsLayout.setHorizontalGroup(
            toolsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(toolsLayout.createSequentialGroup()
                .addContainerGap()
                .add(jRun, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 199, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jserver, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 245, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(abscissaPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 226, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(modelaImagePane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 213, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(SettingsPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 187, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jResetSave, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 133, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(538, Short.MAX_VALUE))
        );
        toolsLayout.setVerticalGroup(
            toolsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jRun, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(jserver, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
            .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
            .add(abscissaPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(toolsLayout.createSequentialGroup()
                .add(modelaImagePane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
            .add(toolsLayout.createSequentialGroup()
                .add(SettingsPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .add(toolsLayout.createSequentialGroup()
                .add(jResetSave, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        toolsLayout.linkSize(new java.awt.Component[] {SettingsPane, abscissaPane, jPanel2, jResetSave, jRun, jserver, modelaImagePane}, org.jdesktop.layout.GroupLayout.VERTICAL);

        jScrollPane1.setViewportView(tools);

        jSplitPane1.setTopComponent(jScrollPane1);

        graph_panel.setName("graph_panel"); // NOI18N
        graph_panel.setLayout(new javax.swing.BoxLayout(graph_panel, javax.swing.BoxLayout.LINE_AXIS));
        jSplitPane1.setRightComponent(graph_panel);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);

        bindingGroup.bind();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.ItemListener, java.beans.PropertyChangeListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == jSystemModel) {
                BayesTestData.this.jSystemModelActionPerformed(evt);
            }
            else if (evt.getSource() == jUserModel) {
                BayesTestData.this.jUserModelActionPerformed(evt);
            }
            else if (evt.getSource() == buildModelButton) {
                BayesTestData.this.buildModelButtonActionPerformed(evt);
            }
            else if (evt.getSource() == savePriorsButton) {
                BayesTestData.this.savePriorsButtonActionPerformed(evt);
            }
        }

        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            if (evt.getSource() == abscissaComboBox) {
                BayesTestData.this.abscissaComboBoxItemStateChanged(evt);
            }
        }

        public void propertyChange(java.beans.PropertyChangeEvent evt) {
            if (evt.getSource() == numberOutputImagesTextField) {
                BayesTestData.this.numberOutputImagesTextFieldPropertyChange(evt);
            }
            else if (evt.getSource() == numPhaseEncodePixelTextField) {
                BayesTestData.this.numPhaseEncodePixelTextFieldPropertyChange(evt);
            }
            else if (evt.getSource() == numReadoutPixelTextField) {
                BayesTestData.this.numReadoutPixelTextFieldPropertyChange(evt);
            }
            else if (evt.getSource() == arrayDimensionTextField) {
                BayesTestData.this.arrayDimensionTextFieldPropertyChange(evt);
            }
            else if (evt.getSource() == maxValueTextField) {
                BayesTestData.this.maxValueTextFieldPropertyChange(evt);
            }
            else if (evt.getSource() == stdDevField) {
                BayesTestData.this.stdDevFieldPropertyChange(evt);
            }
            else if (evt.getSource() == numberSlicesTextField) {
                BayesTestData.this.numberSlicesTextFieldPropertyChange(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

private void jSystemModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSystemModelActionPerformed
        JShowModels.getInstance().loadSysModel();
        overwriteAmplitudePriors();
        clearPreviousRun();
}//GEN-LAST:event_jSystemModelActionPerformed
private void jUserModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUserModelActionPerformed
         JShowModels.getInstance().loadUserModel();
         overwriteAmplitudePriors();
         clearPreviousRun();
}//GEN-LAST:event_jUserModelActionPerformed
private void buildModelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildModelButtonActionPerformed
        JShowModels.getInstance().build();
        clearPreviousRun();
}//GEN-LAST:event_buildModelButtonActionPerformed
private void savePriorsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePriorsButtonActionPerformed
if(     getAsciiModel().isLoaded() == false){
            setMessage(getAsciiModel().getName() + ". "+"You cannot save the priors  until you load a model");
            return;
       }
       
       savePriors();
}//GEN-LAST:event_savePriorsButtonActionPerformed
private void numberOutputImagesTextFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_numberOutputImagesTextFieldPropertyChange
    if (evt.getPropertyName().equalsIgnoreCase("value") == false) {return;}
     clearPreviousRun();
}//GEN-LAST:event_numberOutputImagesTextFieldPropertyChange
private void numPhaseEncodePixelTextFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_numPhaseEncodePixelTextFieldPropertyChange
    if (evt.getPropertyName().equalsIgnoreCase("value") == false) {return;}
   // int val = ((Number)numPhaseEncodePixelTextField.getValue()).intValue();
    clearPreviousRun();
}//GEN-LAST:event_numPhaseEncodePixelTextFieldPropertyChange


    private void maxValueTextFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_maxValueTextFieldPropertyChange
        if (evt.getPropertyName().equalsIgnoreCase("value") == false) {return;} 
        clearPreviousRun();
    }//GEN-LAST:event_maxValueTextFieldPropertyChange

    private void numReadoutPixelTextFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_numReadoutPixelTextFieldPropertyChange
         if (evt.getPropertyName().equalsIgnoreCase("value") == false) {return;}  
        clearPreviousRun();
    }//GEN-LAST:event_numReadoutPixelTextFieldPropertyChange

    private void arrayDimensionTextFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_arrayDimensionTextFieldPropertyChange
         if (evt.getPropertyName().equalsIgnoreCase("value") == false) {return;} 
        clearPreviousRun();
    }//GEN-LAST:event_arrayDimensionTextFieldPropertyChange

    private void stdDevFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_stdDevFieldPropertyChange
        if (evt.getPropertyName().equalsIgnoreCase("value") == false) {return;} 
        clearPreviousRun();
    }//GEN-LAST:event_stdDevFieldPropertyChange

    private void abscissaComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_abscissaComboBoxItemStateChanged
    // abscissa     = (ABSCISSA)abscissaComboBox.getSelectedItem();
        clearPreviousRun();
    }//GEN-LAST:event_abscissaComboBoxItemStateChanged

    private void numberSlicesTextFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_numberSlicesTextFieldPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_numberSlicesTextFieldPropertyChange
    
    public void              propertyChange(java.beans.PropertyChangeEvent evt){
      if (evt.getPropertyName().equals(bayes.BayesManager.JRUN_JOB_START)){
          setActive(false);
          setMessage(message);
      }
      
      else if (evt.getPropertyName().equals(bayes.BayesManager.JRUN_JOB_END)){
         setActive(true);
         ImageViewer.getInstance().updateImageList();
         AllViewers.showImageViewer();
      }
      
      else if (evt.getPropertyName().equals(bayes.BayesManager.JRUN_JOB_CANCELED)){
           setActive(true);
      }
    
   
     else if (evt.getPropertyName().equals(JShowModels.COMPILE_IS_RUN)){
          generateLoadMessage( );
     }

     else if (evt.getPropertyName().equals(bayes.BayesManager.COMPILE_ERRROR)){
          EnterAsciiModel.updateModelBuilt(getAsciiModel());

          generateLoadMessage( );

          String error = evt.getNewValue().toString();
          DisplayText.popupErrorMessage(error);
      }
      else if (evt.getPropertyName().equals(ImageViewer.IMAGE_HAS_BEEN_LOADED)){
       // ImageDescriptor id = (ImageDescriptor )evt.getNewValue();
      }
      
      else if (evt.getPropertyName() .equals(JShowModels.NO_ASCII_MODEL_LOADED)){
             setMessage( EnterAsciiModel.NOT_LOADED_MESSAGE);

             AllViewers.showCodeViewer();
      }
      
      else if (evt.getPropertyName() .equals( JShowModels.ASCII_MODEL_IS_LOADED)){
           AsciiIO.clearAsciiFileNonCompatibleWithModel(this);
           generateLoadMessage( );

           AllViewers.showCodeViewer();
      }
      
   
   }
    public void              setPackageParameters(ObjectInputStream ois) throws Exception{
         EnterAsciiModel theModel           =   (EnterAsciiModel)ois.readObject();
         String     msg                     =   (String)ois.readObject();
         ABSCISSA    abscissa               =   (ABSCISSA)ois.readObject();
         double     maxAbsValue             =   (Double)ois.readObject();
         int        numberOutputImages      =   (Integer)ois.readObject();
         int        numberOutputSlices      =   (Integer)ois.readObject();
         int        arrayDimension          =   (Integer)ois.readObject();
         int        noReadouPixels          =   (Integer)ois.readObject();
         int        noPhaseEncodeixels      =   (Integer)ois.readObject();
         double     sdev                    =   (Double)ois.readObject();
        
         this.setMessage( msg);
         this.setMaxAbscissaValue(maxAbsValue);
         this.setAbscissa(abscissa);
         
         this.setNumberOutputImages(numberOutputImages);
         this.setNumberOutputSlices(numberOutputSlices);
         this.setArrayDimension(arrayDimension);
         this.setNumberReadoutPixels(noReadouPixels);
         this.setNumberPhaseEncodePixels(noPhaseEncodeixels);
         this.setStandardDeviation(sdev);
      
       
         JShowModels.getInstance().addModel(theModel);
        
     
       
    }
    public void              savePackageParameters(ObjectOutputStream oos){
        try{
             oos.writeObject( getAsciiModel());
             oos.writeObject(message);
             oos.writeObject(this.getAbscissa());
             oos.writeObject(this.getMaxAbscissaValue());
             oos.writeObject(this.getNumberOutputImages());
             oos.writeObject(this.getNumberOutputSlices());
             oos.writeObject(this.getArrayDimension());
             oos.writeObject(this.getNumberReadoutPixels());
             oos.writeObject(this.getNumberPhaseEncodePixels());
             oos.writeObject(this.getStandardDeviation());
             
           
             
        } catch (IOException exp){
             DirectoryManager.getSerializationFile().delete();
             exp.printStackTrace();
       }        
    }    
    public boolean           isReadyToRun(){
      // make sure data has been loaded
       File dir        =   DirectoryManager.getBayesOtherAnalysisDir();
       
       // make sure the asciiModel has been loaded
       if(getAsciiModel().isLoaded() == false){
           DisplayText.popupMessage("Model is not loaded.");
           return false;
       }
         // make sure the asciiModel has been built
       if(getAsciiModel().isBuilt() == false){
           DisplayText.popupErrorMessage(
                "Before you can run the analysis, \n" +
                "you must verify the model is error free \n" +
                "using the \"Build Model\" button.");
          return false;
       }
       
       
        
        // do we need to care about absicssa checks
        boolean isReadAbscissa      =   (getAbscissa() ==  ABSCISSA.READ);
        // if yes, do abscissa-model compatability check
        if(isReadAbscissa){
           // get reference to abscissa
           File abscissaFile           =   DirectoryManager.getAbscissaFile();
           List <String>abscissaValues  = new <String>ArrayList();
           // make sure absicssa file was loaded
           if (!abscissaFile.exists()) {
                DisplayText.popupMessage("Abscissa file doesn't exist.\nExiting run.");
                return false;
           }
            try {
                int nAbscissaColumns     =   IO.getNumberOfColumns(abscissaFile) ;
                if ( nAbscissaColumns < 1){throw new IOException();}
                int modelAbscissa        =   getNumberOfAbscissa();
                abscissaValues           =   IO.ASCII2String(abscissaFile);
                if (nAbscissaColumns !=  modelAbscissa) {
                     message     =  "Number of abscissa for the model "+ "("+ modelAbscissa+")\n";
                     message     += "is different from the number of\n";
                     message     += "abscissa in the abscisaa file"+ "("+ nAbscissaColumns +")\n" ;
                     message     += "Exiting run.";
                     DisplayText.popupMessage(message);
                     return false;
                }
            }
            catch (IOException ex) {
                DisplayText.popupMessage("Abscissa file is not valid.\n\nExiting run.");
                return false;
            }
            
                 
            int abscisaaLength  =  abscissaValues.size();
            int expecetdAbscLength = getArrayDimension() ;
            if ( expecetdAbscLength != abscisaaLength){
                    message     =  "Number of array dimension "+ "("+ expecetdAbscLength+")\n";
                    message     += "is different from\n";
                    message     += "number of rows in abscissa file"+ "("+abscisaaLength +")\n" ;
                    DisplayText.popupMessage(message);
                    return false;
             }
        } 
       

       // write the parameter file
       boolean bl  =  WriteBayesParams.writeParamsFile(this, dir);
       if (bl == false){
           DisplayText.popupMessage( "Failed to write Bayes.params file.");
           return false;
       }

       // save the priors
       savePriors();
  

       //  write "job.directions" file
       bl  =  JobDirections.writeFromProperties(JobDirections.BAYES_SUBMIT_IMAGE);
       if(bl == false){
          DisplayText.popupMessage("Failed to write job.directions file.");
          return false;
        }
        return true;
    }
    public String            getProgramName(){
         return "BayesTestData";
     
    }
    public String            getExtendedProgramName() { return "Bayes Test Data" ;}
    public int               getNumberOfAbscissa(){
        if(getAsciiModel().isLoaded()){   return getAsciiModel().getNumberOfAbscissa();}
        else  { return 0;}
    }
    public int               getNumberOfDataColumns(){
         if(getAsciiModel().isLoaded())  {  
             return getAsciiModel().getNumberOfDataCols();}
         
         /*make sure default is 1. Otherwise extracted image pixel
          *in the absense of loaded model, won't display
          */
         else                       {return 1 ;}
    }
    public int               getTotalNumberOfColumns(){
        int curNoCols = getNumberOfDataColumns();
        int curNoAbs  = getNumberOfAbscissa();
        int noOfCols;
        if(curNoAbs == 1){
            noOfCols = curNoAbs + curNoCols;
        } else{
            noOfCols = 1 + curNoAbs + curNoCols;
        }
        return noOfCols;}
    public int               getNumberOfPriors(){return  getAsciiModel().getNumberOfPriors();}
    public StringBuilder     getModelSpecificsForParamsFile(int PADLEN, String PADCHAR){
        StringBuilder sb            =   new StringBuilder();
        String  EOL                 =   BayesManager.EOL; // end of line character
        String  separator           =   BayesManager.FILE_SEPARATOR; // file separator
        ImageViewer iv              =   ImageViewer.getInstance();
        File imgDir                 =   DirectoryManager.getImageDir();
        List <File>imageFiles       =   iv.getSelectedFiles();
        String str                  =   null;

        // sort lexicographically
        Collections.sort(imageFiles );

        int noParams    = 16 +  getAsciiModel().getNumberOfDerived();
        sb.append( IO.pad("Package Parameters", -PADLEN, PADCHAR ));
        sb.append(" = ") ;
        sb.append(noParams);
        sb.append(EOL);

        int numberOfImages          =   imageFiles.size();
        sb.append( IO.pad("Number Of Output Images", -PADLEN, PADCHAR ));
        sb.append(" = ") ;
        sb.append(this.getNumberOutputImages());
        sb.append(EOL);
        
        str     = imgDir.getName() ;
        sb.append( IO.pad("Output Image Directory", -PADLEN, PADCHAR )); 
        sb.append(" = ") ;
        sb.append(str); 
        sb.append(EOL); 
        
        sb.append( IO.pad("NoRo", -PADLEN, PADCHAR )); 
        sb.append(" = ") ;
        sb.append(this.getNumberReadoutPixels()); 
        sb.append(EOL); 
        
        
        sb.append( IO.pad("NoPe", -PADLEN, PADCHAR )); 
        sb.append(" = ") ;
        sb.append(this.getNumberPhaseEncodePixels()); 
        sb.append(EOL);
    
        
        sb.append( IO.pad("ArrayDim", -PADLEN, PADCHAR )); 
        sb.append(" = ") ;
        sb.append(this.getArrayDimension()); 
        sb.append(EOL);
        
        sb.append( IO.pad("No Slices", -PADLEN, PADCHAR )); 
        sb.append(" = ") ;
        sb.append(this.getNumberOutputSlices()); 
        sb.append(EOL);
              
        sb.append( IO.pad("Noise Std Dev", -PADLEN, PADCHAR )); 
        sb.append(" = ") ;
        sb.append(this.getStandardDeviation()); 
        sb.append(EOL);
        
        sb.append( IO.pad("Abscissa", -PADLEN, PADCHAR )); 
        sb.append(" = ") ;
        sb.append(getAbscissa().getName()); 
        sb.append(EOL);
        
        
        sb.append( IO.pad("Maximum Abscissa Value", -PADLEN, PADCHAR )); 
        sb.append(" = ") ;
        sb.append(""+getMaxAbscissaValue()); 
        sb.append(EOL);
        
        str     =  this.getAsciiModelName() ;
        sb.append( IO.pad("Model Name", -PADLEN, PADCHAR )); 
        sb.append(" = ") ;
        sb.append(str); 
        sb.append(EOL); 
         
        sb.append( IO.pad("Number Of Models", -PADLEN, PADCHAR )); 
        sb.append(" = ") ;
        sb.append(getAsciiModel().getNumberOfModelVectors()); 
        sb.append(EOL); 
         
        
        sb.append( IO.pad("Number of Derived", -PADLEN, PADCHAR )); 
        sb.append(" = ") ;
        sb.append( getAsciiModel().getNumberOfDerived()); 
        sb.append(EOL); 
       
         String [] Derived =  getAsciiModel().getDerived();;
         for (int I = 0; I < Derived.length; I++) {
             int ind = I+1;
             sb.append( IO.pad("Derived "+ ind, -PADLEN, PADCHAR )); 
             sb.append(" = ") ;
             sb.append(Derived[I]); 
             sb.append(EOL); 
         }
     
         return sb;
     
    };
    public List <ParameterPrior>  getPriors() {
        return getAsciiModel().getPriors();
    }
    public String            getConstructorArg(){ return getAsciiModelName();}
    public String            getInstructions(){return PACKAGE_INTSRUCTIONS.BAYES_TEST_DATA.getInstruction();}
    public boolean           isOutliers(){ return false;}
    public void              setActive(boolean isActive){
        jSystemModel.setEnabled(isActive);
        jUserModel.setEnabled(isActive);
        getSavePriorsButton().setEnabled(isActive);
        getBuildModelButton().setEnabled(isActive);
        jserver.setActive(isActive);
        jRun.setEnabled(isActive);
        jResetSave.setActive(isActive);

        getEndFormattedTextField().setEditable(isActive);
        getStartFormatetedTextField().setEnabled(isActive);
        getEndFormattedTextField ().setEnabled(isActive);
        noiseStdDevLabel.setEnabled(isActive);
        stdDevField.setEnabled(isActive);
        numImageLabel.setEnabled(isActive);
        numberOutputImagesTextField.setEnabled(isActive);
        numSlicesLabel.setEnabled(isActive);
        numberSlicesTextField.setEnabled(isActive);
        arrayDimensionLabel.setEnabled(isActive);
        arrayDimensionTextField.setEnabled(isActive);
        numReadoutPixelLabel.setEnabled(isActive);
        numReadoutPixelTextField.setEnabled(isActive);
        numPhaseEncodePixelLabel.setEnabled(isActive);
        numPhaseEncodePixelTextField.setEnabled(isActive);
        abscissaLabel.setEnabled(isActive);
        abscissaComboBox.setEnabled(isActive);
        absmaxValueLabel.setEnabled(isActive);
        maxValueTextField.setEnabled(isActive);
        AllViewers.getInstance().setActive(isActive);
    }
    public void              reset(){
            
           
           
            JShowModels.getInstance().removeAllModels();
            generateLoadMessage( );
            LoadAsciiModels.cleanModelFiles();

         
            setDefaults();
            clearPreviousRun();


            // show default viewer
            AllViewers.getInstance().showDefaultViewer();
       
    }
    @Override
    public void              clearPreviousRun(){

          Reset.clearImageResutls();

         // reset job status
         jRun.reset();

    }
    public void              setDefaults(){
        abscissaComboBox.setSelectedItem(BayesTestData.ABSCISSA_DEFAULT_VALUE);
        numberOutputImagesTextField.setValue(BayesTestData.NUMBER_OUTPUT_IMAGES_DEFAULT_VALUE);
        arrayDimensionTextField.setValue(BayesTestData.ARRAYDIM_DEFAULT_VALUE);
        numReadoutPixelTextField.setValue(BayesTestData.NUMBER_READOUT_PIXELS_DEFAULT_VALUE);
        numPhaseEncodePixelTextField.setValue(BayesTestData.NUMBER_PHASE_ENCODE_DEFAULT_VALUE);
        stdDevField.setValue(BayesTestData.NUMBER_PHASE_ENCODE_DEFAULT_VALUE);
        maxValueTextField.setValue(BayesTestData.MAX_ABSCISSA_DEFAULT_VALUE);
        setMessage("");

    }
    public Collection <File> getFilesToTar(){
       
        List<File> tarFiles     =   new  ArrayList<File>();
        File imageDir = DirectoryManager.getImageDir();
        if(!imageDir.exists()){
            imageDir.mkdirs();
            try{
                File file = new File (imageDir, ".dummy_placeholder");
                file.createNewFile();
            }
            catch(Exception e){
                e.printStackTrace();
            }
        }
        tarFiles.add(DirectoryManager.getBayesOtherAnalysisDir()); // asciiDIR
        tarFiles.add(imageDir);
   
        return tarFiles ;
    }
    public void              destroy(){
         // make sure we set JAllPriors viiewer settings to defaults
         JAllPriors.getInstance().setShowAmplitudePriors(false);
    };
    
    public void             overwriteAmplitudePriors(){
        List<ParameterPrior> priors = getAsciiModel().getPriors();
        boolean isOverwritten = false;
      
          for (ParameterPrior parameterPrior : priors) {
           if (parameterPrior.getParameterType() == PARAMETER_TYPE.Amplitude){
                if(parameterPrior.high >= +1E6){
                   parameterPrior.high =100; 
                   isOverwritten=true;
                }
                if(parameterPrior.low >= -1E6){
                   parameterPrior.low =-100; 
                   isOverwritten=true;
                }
                if(parameterPrior.sdev >= +3E5){
                   parameterPrior.sdev = 30; 
                    isOverwritten=true;
                }
           }    
         
       }
        
        savePriors();   
        setMessage(getAsciiModel().getName() + ". "+" Amplitude priors have been overwritten"); 
      
    }   
    public void             savePriors(){
        getAsciiModel().overwriteOriginalParamsFile();
        setMessage(getAsciiModel().getName() + ". "+"Priors have been saved"); 
      
    }   
    protected void          generateLoadMessage( ) {
        String msg      = getAsciiModel().getStatusMessage();
        setMessage(msg);
    }




    public static void createAndShowGUI() {

        //Create and set up the window.
        JFrame frame = new JFrame("Bayes Test Data ");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.addWindowListener(new java.awt.event.WindowAdapter() {

            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                DirectoryManager.shutDownDirectory();
            }
        });

        frame.add(new BayesTestData());

        //Display the window.
        frame.pack();
        frame.setVisible(true);
    }
    public static void main(String[] args) {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                createAndShowGUI();
            }
        });

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel SettingsPane;
    private javax.swing.JComboBox abscissaComboBox;
    private javax.swing.JLabel abscissaLabel;
    private javax.swing.JPanel abscissaPane;
    private javax.swing.JLabel absmaxValueLabel;
    private javax.swing.JLabel arrayDimensionLabel;
    private javax.swing.JFormattedTextField arrayDimensionTextField;
    private javax.swing.JButton buildModelButton;
    private javax.swing.JLabel emptyPlaceHolderLabel;
    private javax.swing.JLabel emptyPlaceHolderLabel1;
    private javax.swing.JPanel graph_panel;
    private javax.swing.JPanel jPanel2;
    private interfacebeans.JResetSave jResetSave;
    private run.JRun jRun;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton jSystemModel;
    private javax.swing.JButton jUserModel;
    private interfacebeans.JServer jserver;
    private javax.swing.JFormattedTextField maxValueTextField;
    private javax.swing.JPanel modelaImagePane;
    private javax.swing.JLabel noiseStdDevLabel;
    private javax.swing.JLabel numImageLabel;
    private javax.swing.JLabel numImageLabel1;
    private javax.swing.JLabel numPhaseEncodePixelLabel;
    private javax.swing.JFormattedTextField numPhaseEncodePixelTextField;
    private javax.swing.JLabel numReadoutPixelLabel;
    private javax.swing.JFormattedTextField numReadoutPixelTextField;
    private javax.swing.JLabel numSlicesLabel;
    private javax.swing.JFormattedTextField numberOutputImagesTextField;
    private javax.swing.JFormattedTextField numberSlicesTextField;
    private javax.swing.JButton savePriorsButton;
    private javax.swing.JFormattedTextField stdDevField;
    private javax.swing.JPanel tools;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
    public javax.swing.JFormattedTextField getEndFormattedTextField () {
        return numPhaseEncodePixelTextField;
    }
    public javax.swing.JFormattedTextField getStartFormatetedTextField () {
        return numberOutputImagesTextField;
    }
    public javax.swing.JButton              getBuildModelButton() {
        return buildModelButton;
    }
    public javax.swing.JButton              getSavePriorsButton() {
        return savePriorsButton;
    }

    public final static ABSCISSA ABSCISSA_DEFAULT_VALUE             =   ABSCISSA.NONUNIFORM;
    public final static  int NUMBER_OUTPUT_IMAGES_DEFAULT_VALUE     =   1;
    public final static  int NUMBER_READOUT_PIXELS_DEFAULT_VALUE    =   16;
    public final static  int NUMBER_PHASE_ENCODE_DEFAULT_VALUE      =   16;
    public final static  int ARRAYDIM_DEFAULT_VALUE                 =   1;
    public final static  int NUMBER_SLICES_DEFAULT_VALUE            =   1;
    public final static  double MAX_ABSCISSA_DEFAULT_VALUE          =   1.0;
    public final static  double SDEV_DEFAULT_VALUE                  =   1.0;
    private ABSCISSA abscissa                          =   ABSCISSA_DEFAULT_VALUE;
    public String message                              =   "";
    private int numberOutputImages                     =   NUMBER_OUTPUT_IMAGES_DEFAULT_VALUE;
    private int numberOutputSlices                         =   NUMBER_SLICES_DEFAULT_VALUE;
    private int numberReadoutPixels                    =   NUMBER_READOUT_PIXELS_DEFAULT_VALUE;
    private int numberPhaseEncodePixels                =   NUMBER_PHASE_ENCODE_DEFAULT_VALUE;
    private int arrayDimension                         =   ARRAYDIM_DEFAULT_VALUE;
    private double maxAbscissaValue                    =   MAX_ABSCISSA_DEFAULT_VALUE ;
    private double standardDeviation                   =   SDEV_DEFAULT_VALUE;


    
    public ABSCISSA getAbscissa() {
        return abscissa;
    }
    public double getMaxAbscissaValue() {
        return maxAbscissaValue;
    }
     public String      getMessage      ( String aMessage ) { return message; }
     public EnterAsciiModel  getAsciiModel () {
        return JShowModels.getInstance().getSingleModel();
    }
  
     public String      getAsciiModelName(){ return  getAsciiModel().getName();}
     public int         getNumberOutputImages () {
        return numberOutputImages;
    }
    public int getNumberReadoutPixels() {
        return numberReadoutPixels;
    }

    public int getNumberPhaseEncodePixels() {
        return numberPhaseEncodePixels;
    }

    public int getArrayDimension() {
        return arrayDimension;
    }
    
    
    public int getNumberOutputSlices() {
        return numberOutputSlices;
    }

    
    public double getStandardDeviation() {
        return standardDeviation;
    }
   

     public void        setMessage      ( String aMessage ) {
        message =     aMessage;
        BayesView.setMenuBarMessage(message);
    }
     public void        setNumberOutputImages ( int astartSliceIndex ) {
        this.numberOutputImages        =   astartSliceIndex;
    }

    public void setAbscissa(ABSCISSA abscissa) {
        this.abscissa = abscissa;
    }
    public void setMaxAbscissaValue(double maxAbacissaValue) {
        
        this.maxAbscissaValue = maxAbacissaValue;
    }
    public void setNumberReadoutPixels(int numberReadoutPixels) {
        this.numberReadoutPixels = numberReadoutPixels;
    }
    public void setNumberPhaseEncodePixels(int numberPhaseEncodePixels) {
        this.numberPhaseEncodePixels = numberPhaseEncodePixels;
    }
    public void setArrayDimension(int arrayDimension) {
        this.arrayDimension = arrayDimension;
    }


    public void setStandardDeviation(double standardDeviation) {
        this.standardDeviation = standardDeviation;
    }

    public void setNumberOutputSlices(int numberOfSlices) {
        this.numberOutputSlices = numberOfSlices;
    }
  




  

  

  
     
    

   
}
