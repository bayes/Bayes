/*
 * BayesPolynomial.java
 *
 * Created on February 19, 2008, 3:32 PM
 */

package applications.bayesPolynomial;

import run.JRun;
import bayes.ParameterPrior;
import bayes.PackageManager;
import bayes.DirectoryManager;
import javax.swing.*;
import java.io.*;
import bayes.JobDirections;
import bayes.WriteBayesParams;
import interfacebeans.*;
import bayes.Enums.*;
import bayes.BayesManager;
import ascii.ASCIIDataViewer;
import bayes.Reset;
import java.util.List;
import java.util.Vector;
import utilities.DisplayText;
import utilities.IO;

/**
 *
 * @author  larry
 */
public class BayesPolynomial extends javax.swing.JPanel implements
                                applications.model.AsciiModel,
                                java.beans.PropertyChangeListener,
                                 bayes.ApplicationConstants{
    
    /** Creates new form BayesPolynomial */
    public BayesPolynomial() {
        PackageManager.setCurrentApplication(this);
        boolean isDeseralized = bayes.Serialize. deserializeCurrenExperiment();
        initComponents();

        AllViewers.removePriorsViewer();
        ASCIIDataViewer.getInstance().addPropertyChangeListener(this);
        BayesManager.pcs.addPropertyChangeListener(this);


        if(isDeseralized){
            JRun.fireJobIDChange();
        }
        else {AllViewers.showInstructions();}
    }
    
  
    public void propertyChange(java.beans.PropertyChangeEvent evt){
        
      if (evt.getPropertyName().equals(bayes.BayesManager.JRUN_JOB_START)){
          setActive(false);
          return;
      }
      
      if (evt.getPropertyName().equals(bayes.BayesManager.JRUN_JOB_END)){
          setActive(true);
           AllViewers.showResultsViewer();
          return;
      }
      
      if (evt.getPropertyName().equals(bayes.BayesManager.JRUN_JOB_CANCELED)){
          setActive(true);
          return;
      }
 
   }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jSplitPane1 = new javax.swing.JSplitPane();
        tool_pane = new javax.swing.JPanel();
        jRun = new run.JRun();
        jPanel1 = new javax.swing.JPanel();
        knownOPrderLabel = new javax.swing.JLabel();
        orderSpinner = new javax.swing.JSpinner();
        unknownOrderCB = new javax.swing.JCheckBox();
        unknowOrderLabel = new javax.swing.JLabel();
        jResetSave = new interfacebeans.JResetSave();
        jserver = new interfacebeans.JServer();
        graph_panel = AllViewers.getInstance();

        setName("Form"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setName("jSplitPane1"); // NOI18N
        jSplitPane1.setOneTouchExpandable(true);

        tool_pane.setName("tool_pane"); // NOI18N

        jRun.setName("jRun"); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Model"));
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(new java.awt.GridBagLayout());

        knownOPrderLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        knownOPrderLabel.setText("Set Order (0-55)");
        knownOPrderLabel.setName("knownOPrderLabel"); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, unknownOrderCB, org.jdesktop.beansbinding.ELProperty.create("${!selected}"), knownOPrderLabel, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 4.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        jPanel1.add(knownOPrderLabel, gridBagConstraints);

        orderSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 55, 1));
        orderSpinner.setToolTipText("<html><p style=\\\"margin: 6px;\\\"><font size=\\\"4\\\">\n\nSet polynmial order for your model.<br>\nOrder can take values from 0 to 55.\n\n</p></html>"); // NOI18N
        orderSpinner.setName("orderSpinner"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, unknownOrderCB, org.jdesktop.beansbinding.ELProperty.create("${!selected}"), orderSpinner, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        if (isUnknownOrder() == false){
            unknownOrderCB.setSelected(false);
            Integer order = Integer.valueOf(polynomialOrder);
            orderSpinner.setValue(order);

        }
        orderSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                orderSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        jPanel1.add(orderSpinner, gridBagConstraints);

        unknownOrderCB.setSelected(isUnknownOrder());
        unknownOrderCB.setToolTipText("<html><p style=\"margin: 6px;\"><font size=\"4\">\n\nSet polynmial order to unknown<br>\nto run model selection analysis for models<br>\nwith orders ranging from 0 to 11.\n\n</p></html>\n"); // NOI18N
        unknownOrderCB.setFocusPainted(false);
        unknownOrderCB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        unknownOrderCB.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        unknownOrderCB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rb.gif"))); // NOI18N
        unknownOrderCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        unknownOrderCB.setName("unknownOrderCB"); // NOI18N
        unknownOrderCB.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbp.gif"))); // NOI18N
        unknownOrderCB.setRolloverEnabled(true);
        unknownOrderCB.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbr.gif"))); // NOI18N
        unknownOrderCB.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbrs.gif"))); // NOI18N
        unknownOrderCB.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/bayes/resources/buttons/rbs.gif"))); // NOI18N
        unknownOrderCB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                unknownOrderCBItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        jPanel1.add(unknownOrderCB, gridBagConstraints);

        unknowOrderLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        unknowOrderLabel.setText("Unknown Order");
        unknowOrderLabel.setName("unknowOrderLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 4.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        jPanel1.add(unknowOrderLabel, gridBagConstraints);

        jResetSave.setName("jResetSave"); // NOI18N

        jserver.setName("jserver"); // NOI18N

        org.jdesktop.layout.GroupLayout tool_paneLayout = new org.jdesktop.layout.GroupLayout(tool_pane);
        tool_pane.setLayout(tool_paneLayout);
        tool_paneLayout.setHorizontalGroup(
            tool_paneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(tool_paneLayout.createSequentialGroup()
                .add(12, 12, 12)
                .add(jRun, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 196, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jserver, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 189, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jResetSave, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 148, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(755, Short.MAX_VALUE))
        );
        tool_paneLayout.setVerticalGroup(
            tool_paneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(tool_paneLayout.createSequentialGroup()
                .add(tool_paneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jRun, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jResetSave, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jserver, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        tool_paneLayout.linkSize(new java.awt.Component[] {jPanel1, jResetSave, jRun, jserver}, org.jdesktop.layout.GroupLayout.VERTICAL);

        jSplitPane1.setLeftComponent(tool_pane);

        graph_panel.setName("graph_panel"); // NOI18N
        graph_panel.setLayout(new javax.swing.BoxLayout(graph_panel, javax.swing.BoxLayout.LINE_AXIS));
        jSplitPane1.setRightComponent(graph_panel);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

        private void unknownOrderCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_unknownOrderCBItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED){
            polynomialOrder = UNKNOWN_ORDER;
            clearPreviousRun();
        }
        else{
             polynomialOrder = getOrderSpinner().getValue().toString();
             clearPreviousRun();
        }


}//GEN-LAST:event_unknownOrderCBItemStateChanged

        private void orderSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_orderSpinnerStateChanged
             polynomialOrder = getOrderSpinner().getValue().toString();
             clearPreviousRun();
        }//GEN-LAST:event_orderSpinnerStateChanged
    
    
        //  ********** Override Methods required by Model interface  starts ******* // 
    public void             setPackageParameters(ObjectInputStream serializationFile) throws Exception{
        polynomialOrder    = (String)serializationFile.readObject();

    }
    public void             savePackageParameters(ObjectOutputStream serializationFile){
        
   try{
        serializationFile.writeObject(polynomialOrder);
    } catch (IOException exp){
	 DirectoryManager.getSerializationFile().delete();
   }        
    }
    public boolean          isReadyToRun(){

// make sure data has been loaded
        File dir        =       DirectoryManager.getBayesOtherAnalysisDir();
        File[] files    =       ASCIIDataViewer.getInstance().getFiles();

        if (files == null || files.length == 0) {
            DisplayText.popupErrorMessage( "No data files are selected for analysis.");
            return false;
        }
        
        if (files.length != 1) {
            DisplayText.popupErrorMessage(    "Only one data file is allowed in this analysis.");
            return false;
        }

        // make sure all data files exist
        for (File file : files) {
            if (!file.exists()) {
                DisplayText.popupErrorMessage(  String.format( "Data ile %s doesn't exist.", file.getPath()));
                 return false;
            }
        }
        
       // write the parameter file
       boolean bl  =  WriteBayesParams.writeParamsFile(this, dir);
       if (bl == false){
           DisplayText.popupErrorMessage(   "Failed to write Bayes.params file.");
           return false;
       }

        //  write "job.directions" file
       PackageManager.setCurrentApplication(this);
       if(!JobDirections.writeFromProperties( JobDirections.BAYES_SUBMIT)){
          DisplayText.popupErrorMessage(   "Failed to write job.directions file.");
           return false;
         }

        return true;
    }
    public String           getProgramName(){
        if(isUnknownOrder()){
            return "BayesPolUnknown";
        } else {
            return "BayesPolGiven";
        }
    }
    public String           getExtendedProgramName() { return "Given and Unknown Number of Polinomials" ;}
    public int              getNumberOfAbscissa() {
        return 1;
    }
    public int              getNumberOfDataColumns() {
       return 1;
    }
    public int              getTotalNumberOfColumns(){return 2;}
    public int              getNumberOfPriors() {
         return 0;
    }
    public StringBuilder    getModelSpecificsForParamsFile(int PADLEN, String PADCHAR) {
        return writeParams(PADLEN, PADCHAR);
    }
    public List<ParameterPrior> getPriors() {
        return new Vector<ParameterPrior>();
    }
    public String           getConstructorArg(){return null;}
    public String           getInstructions(){return PACKAGE_INTSRUCTIONS.POLYNOMIAL.getInstruction();}
    public boolean          isOutliers(){return false;}
    public void             reset(){
            setDefaults();
            
             clearPreviousRun();
            // show defualt viewer
            AllViewers.getInstance().showDefaultViewer();

           

    }
    public void              clearPreviousRun(){

          Reset.clearAsciiResutls();

         // reset job status
         jRun.reset();

    }
    public void              setDefaults(){
            polynomialOrder = "0";
            getOrderSpinner().setValue(0);
            getUnknownOrderComboBox().setSelected(false);
    }
    public void             setActive(boolean enabled){
        AllViewers.getInstance().setActive(enabled);
        jserver.setActive(enabled);
        jRun.setEnabled(enabled);
        jResetSave.setActive(enabled);

        unknowOrderLabel.setEnabled(enabled);
        getUnknownOrderComboBox().setEnabled(enabled) ;

        boolean enableOrder = enabled && getUnknownOrderComboBox().isSelected() == false;

        knownOPrderLabel.setEnabled(enableOrder );
        getOrderSpinner().setEnabled(enableOrder );
              ;
    }
    
    public static void      createAndShowGUI() {

        JFrame frame = new JFrame ("Polynomial Models");
        frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
        frame.addWindowListener(new java.awt.event.WindowAdapter() {
           @Override
             public void windowClosing(java.awt.event.WindowEvent evt) {
                DirectoryManager.shutDownDirectory();
            }
        });

        BayesPolynomial newContentPane = new BayesPolynomial();
        newContentPane.setOpaque (true);
        frame.setContentPane (newContentPane);
        frame.pack ();
        frame.setVisible (true);
        
        try {String aquaClassName = "javax.swing.plaf.metal.MetalLookAndFeel";     
             UIManager.setLookAndFeel(aquaClassName );
             SwingUtilities.updateComponentTreeUI(frame);
	    }catch(Exception exc){} 
    }
    public static void      main(String[] args) {
       javax.swing.SwingUtilities.invokeLater (new Runnable () {
            public void run (){createAndShowGUI();}});
    } 
    
    public  StringBuilder writeParams(int PADLEN, String PADCHAR){
         StringBuilder buffer   =   new StringBuilder();


         buffer.append (IO.pad("Package Parameters", -PADLEN, PADCHAR ));
         buffer.append(" = "+ "1");
         buffer.append(EOL);
     

         buffer.append (IO.pad("Polynomial Order", -PADLEN, PADCHAR ));
         buffer.append(" = "+ polynomialOrder);
         buffer.append(EOL);
         
         
         return buffer;
    }    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel graph_panel;
    private javax.swing.JPanel jPanel1;
    private interfacebeans.JResetSave jResetSave;
    private run.JRun jRun;
    private javax.swing.JSplitPane jSplitPane1;
    private interfacebeans.JServer jserver;
    private javax.swing.JLabel knownOPrderLabel;
    private javax.swing.JSpinner orderSpinner;
    private javax.swing.JPanel tool_pane;
    private javax.swing.JLabel unknowOrderLabel;
    public javax.swing.JCheckBox unknownOrderCB;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
    public javax.swing.JSpinner getOrderSpinner() {
        return orderSpinner;
    }
    public javax.swing.JCheckBox getUnknownOrderComboBox() {
        return unknownOrderCB;
    }


    public static final String UNKNOWN_ORDER    = "Unknown";
    private  String polynomialOrder = "0";



    public boolean isUnknownOrder(){
       return  polynomialOrder.equals(UNKNOWN_ORDER);
    }




}
